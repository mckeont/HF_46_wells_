%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: CEET-Perelman logo_white-green.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Mary Leonard
%%CreationDate: 9/19/11
%%BoundingBox: 0 0 600 116
%%HiResBoundingBox: 0 0 599.5235 115.0538
%%CropBox: 0 0 599.5235 115.0538
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 288 CV)
%%+ (PANTONE 201 CV)
%%+ (PANTONE 288 C)
%%CMYKCustomColor: 1 0.6500 0 0.3050 (PANTONE 288 CV)
%%+ 0 1 0.6500 0.3400 (PANTONE 201 CV)
%%+ 1 0.6700 0 0.2300 (PANTONE 288 C)
%%RGBCustomColor: 
%%EndComments
                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2011-09-19T11:48:33-04:00</xmp:CreateDate>
         <xmp:MetadataDate>2011-09-19T11:48:34-04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2011-09-19T11:48:34-04:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>52</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAZABkAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAZAAAAAEA&#xA;AQBkAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgANAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AX8ueRfImqeX49S1vzLPb&#xA;a1qE11xtmu4oyPTSUqQjAsauq9Tv075mHHIk1xV8e9y8naPh1HhxbAc4iz6b396j5S/LHQryzln1&#xA;nWLmP15HSzCTwxmNRJLHH6vqyxrzYQE7GnQdxkRAgbmXzLdqu0RxgQx49ogn0DnVnn0SbUfyq1mz&#xA;1/V7FtSk+pWFlNfWsxeks4iRnMao5j+JPTbn0p3oSBlXDO/qNe9z4dpaeWOJ8KHGZUfTt5nlf4Kd&#xA;+Z/y+8hWPle7m0zzJcXOu2djHdS2wu4nb1PTleRTEu44lF5UPw9+uZAxyBs8VfF1MO0+M8PDi9X9&#xA;EbX3e59TZhOK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgLUn9MX4rsEgoPofID6igc1uu6/peh2RvN&#xA;Rl9OOtEUbu7deKL3OOTIICyspAc2Bt+a2vX8rDQtBe4iQ05FZJm+lYgAv3nML85I/TFp8UnkFbTv&#xA;zdeK8Fp5h0x7BjTlKoaq17tE45U+R+jJR1lGpCkjL3vRIJ4Z4UmhdZIZVDxyKaqykVBBGZoNtzzW&#xA;+/OC9t9RurOPSVl+rSyRchK1SEYrWgQ5gS1pBIpoOXfkpf8AK49U/wCrH/yUf/mjB+dP81fGPciN&#xA;P/NrUrq/trVtF9NZ5UiL+o54h2C1+x2rko6wkgUkZT3Ms86eZn8uaOuoJbi5JmWL02bgPiDGtQG/&#xA;lzJz5eCNs5yoMKX85dSZQy6ICp6ESuR/xDMT88f5rX4x7m/+Vx6p/wBWP/ko/wDzRj+dP81fGPcy&#xA;byn51u9csNRuprD6q1ioZE5FudVZu6r/AC5kYc5mCa5M4TtjP/K49U/6sf8AyUf/AJozH/On+aw8&#xA;Y9ywfnTfl/TGjKX/AJfVav3cMfzx7l8byX/8rj1T/qx/8lH/AOaMfzp/mr4x7kBov/OPnky80iyv&#xA;Wv8AVYpLuCO4kjiulSMPModuK+nsOTZtchqR9/m7TF2lk4BtE7D+EdzH/wAwvyv8h6JYWmh29xrG&#xA;ta9chzonl+O6RizblpXHpUSNd6seu4HeluLF4n1bQHVge2MmKRlAR8SXdEIryH5U0fXdIl8m6/qe&#xA;uaPrltEP0h5elvE4PE1P3kBMbF4WoPh5GnQ12OSz4uEWPVA9WnD2jIz4jGMcg8vtrkmmvf8AOPPk&#xA;y20LUbhdQ1Z2gtppFR7pWQlIywDD09xtlOM3Ie/zcnJ2lk4TtDl/ND2PKnCdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVQFr/wAdm/8A+McH6nyA+ooHN5drSyeb/wAyxpUjsNPs5GhKg0okIrNT3d1pX5eG&#xA;a+f73Lw9A0H1Sp63a2ltaW8dtaxLDBEOMcSAKoHsBmyAAFByAEm85+V7fzDo0tsUUXsYL2UzbFZB&#xA;2r/K3Q5VnxCca6sJxsKfkXQtX0PRBp+pTxzsjs0HpFiERqHhVgv7VT9ODT45QjRWESBRYV+XH/kx&#xA;9c/1Lr/qKjzE0v8Aey+P3teP6i9XzZN7sVYP+cX/ACiSf8xUf/EXzE1v0fFqzck58hf8odpX/GAf&#xA;rOW6f+7DKHIJ/lzN2KuxV5Ro/wD5Oa6/4yT/APJk5rYf35aB9b1fNk3vPLvz7Bo8Vh5P054ZvN88&#xA;smn6fZTEhIo4WYR3Fzxqyp6CK4X7T128cyxg4rmfo5uMcvCBEfVyeJ69p35oeR/zh0/Umni8x+ZN&#xA;VDSWxVWKzJJWJoinwemqjpxNFHtmxhLHkxEfTEOHIThkB5yVU0f80fP35w3Ulw0XlrzFokKOzryC&#xA;wxxNROFC5lDmSta8WB8MHFixYv50SvDPJk7pB6/Z/mJHqltrXkvV2ig86WifUJIYifRuXuQIo57e&#xA;vxcf3qs6kVQV6gVzBODhImPo5uX41gxP1cnpeYTlOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoC1/47&#xA;N/8A8Y4P1PkB9RQObzPyDSL8ztWjlFHJu1UE/tCYH6dgcwNPtmPxaMf1F63mychxIAqdgMVcCCAQ&#xA;ag7gjFXhekaHqes+dNYtdOvjYTo9zK0yl1JQThSvwEHqwOaiGMyyEA1zcURJkaZP/wAqz85/9TI/&#xA;/Iyf/mrL/wArk/nM/Dl3pn5a8jeZtM1u2vr3W3vLaHn6luXlIblGyjZiRsWByzFp5xkCZWyjAg81&#xA;35xf8okn/MVH/wARfDrfo+K5uTGfL3kLzTf6LaXlrrr21vPGGjgDzAIK9KKaZj49PMxBEmEYEjmm&#xA;P/Ks/Of/AFMj/wDIyf8A5qyf5XJ/OT4cu9mvlTR9Q0nSFs7+7N7cB2Yzksxox2FXJO2ZeGBjGibb&#xA;YignGWsnlGj/APk5rr/jJP8A8mTmth/floH1vV82Te8T/Pn8rdYvry388+UvUTzBYBfrcUB4yyLF&#xA;/dzRkUPqRjYjutKdN9jotSAOCf0lwtVhJ9UebK/yw8jXNlbweZvMmo/p7zTe26gagziWOC3YchDb&#xA;MPhoeVWZftfLrTqc1+mI4YhtwYq9RNyRv5k+UW1Kwk1vS9UOgeYtOgdbbWA/pp6P22huCdjESK7/&#xA;AGTuO4MdPlo8JHFE9E5sdiwaI6sG/Iz8qdastSm89ecTLJ5huuf1OKckyxiQFXmlrvzdfhVey1ru&#xA;dsjWakEcEPpadNgIPFLm9tzXOa7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgLX/AI7N/wD8Y4P1PkB9&#xA;RQObzTzzZ33ljzpb+aLSMvaTuHkp9kSceEsZPbmu4Pz8MwNRE48nGOTRMcMregaP5z8tarbrLbX0&#xA;SMR8UErLHKp7gqxH3jbM2GeEhsW4TBY75+/MHSbXSbjT9NuUur+6QxcoWDpErCjMXXblToAeuUaj&#xA;UxEaBssMmQVsiPyq0K70zy8Z7vkst8wlSJifgiA+DY9C1S33ZLSYzGNnqnFGgxLyRqenad+YGtz3&#xA;9zHawsLpFklYKpY3KECp70BzFwTEcsr8/va4ECRekf408pf9Xe1/5Gr/AFzP8eHeG7jHe5fOXlRm&#xA;Crq1qSTQASr1P04+PDvC8Y70g/OL/lEk/wCYqP8A4i+U636PiwzclTyX5q8t2vlbTbe51O3hnjhC&#xA;yRPIoZTU7EE4cGaAgASmEhSd/wCNPKX/AFd7X/kav9ct8eHeGXGO9Gadrmj6kzrp95FdGIAyCJw3&#xA;EHpWnyyUckZcjaRIFG5NLyjR/wDyc11/xkn/AOTJzWw/vy0D63q+bJvdiqUyaE8E73OkXP1CSVi8&#xA;8BT1bWRmNWdoaoVY1JLRutTu3LLOO9juw4O7ZuHQvUuI7vVbhtQuYW5wIV9O2icdGigBYch2aRnY&#xA;dmGJntQ2UQ6ndNcrZuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVCQW8qaldzsP3cqRBDXqU5V/XkQ&#xA;Nyjqq3lna3ttJbXcSz28opJE4DKR8jhlEEUVIthl5+TvlWeRngkubWvSON1ZB/yMVm/4bMSWige8&#xA;NZwhG6L+WPlXSp1uBE93OhrG90wcKR3CqEX7xk4aWETfNIxgMszJbGGXf5T+V7q6mupXufUnkaV+&#xA;MigcnJY0+D3zFOjgTe7WcQUv+VO+Uv57r/kYv/NGD8lDzR4Ibj/KDyojq6vdVUhhWReo3/kx/JQ8&#xA;18IMk8xeXbDX7AWN8ZBCJFlBiYK3JQQNyG/my/JjExRZyjbGv+VO+Uv57r/kYv8AzRlH5KHmw8EO&#xA;/wCVO+Uv57r/AJGL/wA0Y/koea+CE68s+S9H8uPcPp7TE3IVZPVYNslSKUVf5stxYIw5MowAT7Lm&#xA;aQ2/kvR7fzG/mCNpvr8hZmBYenV14n4eNenvlIwRE+Lqw4Bdp9lzNjb6/qgtbm/D2i2ym8jt7V+Y&#xA;n52gkp8XKjkmIlkCrQftGmUeIavbr9jDiKHfzLrttb2k89us4lmPrxi3kt3ECwtI7RhppubLxr79&#xA;OuR8WQA/V+1HEVaz1vWr6TT5La4tBaX73AWsEjnhA7AEMJ1B5qB+zthjkkaqqP470iRKAi81+YW0&#xA;KTUmjj5MYVhX6pKErLcpCaP9YPqfCxoAF3yAzS4b/R5+9HEatM7LzHeHy7qWqXUSs9i0wRQhgL+i&#xA;oPxxs8rRHnUEFugr3yyOU8JJ6JEtrQ+o+YNcspzZE289y31d45YYZHASd3UqYvVBYj0/hPMV8NsE&#xA;skhtt0QZEIvV9X1ey0mwljCPe3U6QyVt32DqzbQCblyHEbepkpzkIjvPl+1JJAQ155j1a0m0+2kE&#xA;Bl1FeIkkieH0XEoUvLF6kh4MrBV+P7e1fi2jLLIUO9TIt3PmLVI9PvNSR7MQRrei2tX5+tzs1kpV&#xA;g1HqYqsgVaD9o4nKaJ26/YpkatE2Oraubiziuwp+tTPGa2z2zBUhaSoDTT1+JeuSjOVi/ur9Kglq&#xA;fX75NL1i6RI/WsLloIBxZgVHChZQwLH4+xGJyGie4rxbFCy+ZdWsWs2volkt5Wma8cQPbPFDGIwJ&#xA;AjSz1CtJVjX7PbbeJyyFWvEQu03zFqt9bRXXOztoo4LKW7WYOvNrpFduD8v3ajnRaq1TtjHKSL26&#xA;faokSidA1bV7+6mNyFW1VplQLbOg/dymNf35mcMaDf8AdjJY5ykd/u/asSSlt950v7P1ZJII2to1&#xA;vQ0oDfu5ILqSC3Ljl9hvTCt/lHsMrlnI+376CDNMta1jVLeTTorJV53cckkp9B7gjgEpxRZYdvj6&#xA;1yycyKrqkkoOTzXqMOpyWE0Ma1urW1tbngwV2kjhedWTmeLqJuSjl0r/AC7wOYg15j9COI2ui806&#xA;hKsQWKISQNbQamCGIW4nvEtWRPiHRRI29eqn5kZT91/Ok8RQcHnTV1W5lnhikjitp7lU9J4Kem/B&#xA;KO0kvqqT9tlUce/bIDPLe+5HGUVqHmTXbC6+p+lb31yGgkPoK6coZVmZowrO9JKQfCa0avQZKWWQ&#xA;Nc/wf1KZEIZfP7ieOYxxy6ZKlyY5YwwctE7iAbn/AHYI+PT7RHywfmN/LdfEVdK8x+Yb65t4nSJK&#xA;xwtc+lbSTKGkkdH+P104KPT2JVsMMsif2ftUSJVNL80apqNzFYBIbS+kSeXm6PIhjR1EUiqHQkGr&#xA;Kw5faH3sMpka5FRIlCw+dr6G10ea9Nu5v0W5u/TjkQQ28hSNQKvJ8QZmYsduKnauRGcgC+q8fJk2&#xA;l3lxe2UsrcElW4uoEIBK0guJIUJFanZATv8AdmRCRI+f3swbSZNZ19f3cs1o8s18dPgcQSRorKrS&#xA;GR6zvyqqUCgjem+VccvLnX43Y2VC983alZwpzW2kkNzNYO45ogkSnG4I5MRClaSitQf2sEsxHdzr&#xA;9vu70GZRn6a1abUW0yBraKdZJv8ASJUdk4W8cDEBBIpLM1x/Nso75LxJE1t+K/WmzdKM/mfURDdX&#xA;UJtGg06O3e5RS8nrGZFc+hICtFo1EJQ8jttgOU7nbZeJGSa9cppBuuEf1h7+SxirURrS9a2R33rs&#xA;q1PifDJHIeG/OvtpPFshT5g1b622l8rcXsczxveCKR4iqQLPRYBJzMhD04+p7+2R8SV11RxHk5PM&#xA;OsyC0SCKCc6hzggnVJUSK4gkZZ/VSUpJx4IzBRQ1UrXcNj4ktq6rxFHv/hT69d8vqX1703+u/wB3&#xA;6vp8f3nP9qnGnL2pXtk/RZ5WnZZpP+E/UT9GfVvU5/u/SpXnwbpTvw5fRjDg6Uoroi7P9B8LT6n6&#xA;Hp/vPqXpcePU+r6dPetaZKPDtSRSWWf+BeT/AFT6lX4OfDj/AL+Th/yW4U96ZXHw+lMRwpxF+jfU&#xA;vPT9LnyH16lPtcB/ee/p069stFbstkDpv+EvRH6M+pej660+r+nx9enwfY/ap9n26ZCPB0pAroid&#xA;b/Qn1Rf0x6P1X1Bw9enH1KHjSvelclk4a9SZV1Qdv/hD6nP6P1T6r6I+sU48fR5vx5V/Z586e9ci&#xA;OCulI2bk/wAIfWr31PqX1v0pPr9fT9T0uP731P2qcftV9q4ngs8r6rshP+dA+rf8eX1f1B/Lx9Ti&#xA;1Pp48sh+6roj0rv+dD5z/wC8XPh/pH2fsUH2voph/d+S+lF6d/hX0x9Q+ren+9pw40pxT1v+F4cv&#xA;oyUeDpSRTR/wh62n8vqPrenF+jeXpc/T/wB0+lXen8lPox9G3LyXZvTP8LfpGX9HfVvr/wAfrelT&#xA;nXl+8rT/ACuuMOC9qtRV7Kj/AOHPSuef1b0uE/1rlx4+n6revzr29Xly964fRvyXZbrP+GeFt+lv&#xA;q/CjfVfWp0oOXCvtTBPg24lNdV8P+HfRT0vq/petD6dONPX9JPQp/l+lw4+1MI4V2Xj9B/6TT0P9&#xA;6YvrX2f96uUfpc/8vlw4/Rh9O/v+1Oy0/wCHuFry+r8OM31WvGnHifW41/Zp9r8cHp25I2UdM/wl&#xA;6Sfov6n6frDh9W9Onr8DT7H7XCtP8n2wQ4OlKK6Nr/hWvw/VP70dOH979Y/4l9Y/4bH0eX4P612Q&#xA;7/4K+uQcvqn1v4fq/wBnlTmeHH/Z1p74P3d9LR6Uwt/0J61t9X9D1vTl+qcOPL0+Q9Xh348qcvfJ&#xA;jh2plsowf4a+pTeh9W+p/VU9fjx4fVaPw5dvTpzp264BwV0qvsRss0r/AAv9fn/Rn1f698f1j0ac&#xA;/tj1OVP8vr74IcF7c1FdFa8/w/8AUbn659W+peqfrXrcPT9Wo+1y25Vp71wy4aN1SmlO3/wt6A+r&#xA;/VPq/wBVenp8OH1Xl+8pTbhy+179cA4K2rl9i7Kd1/g/6l/pf1P6p6op63p8PV9MU+1+16VP9j7Y&#xA;ngreqU0qXP8AhX69Z/WfqX17in1H1PS9TjX936dd6V+zT6MJ4LF1amlKP/B3q3/H6nz/AHn6S5cO&#xA;NOf7z1eXw/b+1XvkR4e/LzXZs/4P/Qy1+o/ojn8H936Pq79O3qV/2WH0cPThXakXa/oT0bH6p9X9&#xA;D4v0f6PDh9luXpcdvs8umSHDtXwSKf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>11.000000</stDim:w>
            <stDim:h>8.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 288 CV</rdf:li>
               <rdf:li>PANTONE 201 CV</rdf:li>
               <rdf:li>PANTONE 288 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>[Registration]</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 288 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>66.999992</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>22.999998</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 201 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>63.000000</xmpG:yellow>
                           <xmpG:black>29.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 288 CV</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>65.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>30.500000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 201 CV</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>34.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0580117407206811994CD158C058D148</stRef:instanceID>
            <stRef:documentID>xmp.did:0580117407206811994CD158C058D148</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:F77F1174072068118083B7A0588C723F</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118083B7A0588C723F</stEvt:instanceID>
                  <stEvt:when>2011-06-10T15:43:14-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068119F73DAD179E0DF3F</stEvt:instanceID>
                  <stEvt:when>2011-08-16T10:51:38-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BA08D23F192068118DBBEC38059F99C0</stEvt:instanceID>
                  <stEvt:when>2011-09-13T14:55:21-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0580117407206811994CD158C058D148</stEvt:instanceID>
                  <stEvt:when>2011-09-19T11:40-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0680117407206811994CD158C058D148</stEvt:instanceID>
                  <stEvt:when>2011-09-19T11:48:34-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DocumentID>xmp.did:0680117407206811994CD158C058D148</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0680117407206811994CD158C058D148</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F1174072068118083B7A0588C723F</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -115.054 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 115.054 li
599.523 115.054 li
599.523 0 li
cp
clp
[1 0 0 1 0 0 ]ct
87.5532 78.7432 mo
87.5532 80.9844 88.1621 82.6973 90.5474 82.6973 cv
92.7407 82.6973 93.8931 81.2256 93.8931 78.6621 cv
93.8931 74.2129 li
93.8931 73.876 93.8296 73.6055 93.7964 73.3477 cv
93.7168 72.7705 93.1714 72.5469 92.4209 72.4678 cv
92.4209 72.0498 li
96.1992 72.0498 li
96.1992 72.4678 li
95.4302 72.5469 94.9014 72.7705 94.8213 73.3477 cv
94.7891 73.6055 94.7271 73.876 94.7271 74.2129 cv
94.7271 78.7266 li
94.7271 82.1689 92.5327 83.4512 90.4683 83.4512 cv
87.0566 83.4512 86.0005 81.7207 86.0005 78.8242 cv
86.0005 74.0527 li
86.0005 72.5625 86.0654 72.6445 84.624 72.4678 cv
84.624 72.0498 li
88.9297 72.0498 li
88.9297 72.4678 li
87.4888 72.6445 87.5532 72.5625 87.5532 74.0527 cv
87.5532 78.7432 li
cp
false sop
/0 
<<
/Name (PANTONE 288 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .67 0 .23 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
105.263 83.2578 mo
103.299 80.9365 101.26 78.502 99.2466 76.1309 cv
99.2466 81.5918 li
99.2466 81.8496 99.2964 82.0596 99.3213 82.2568 cv
99.3833 82.7021 99.8022 82.877 100.618 82.9365 cv
100.618 83.2578 li
97.5913 83.2578 li
97.5913 82.9365 li
98.1851 82.877 98.5918 82.7021 98.6538 82.2568 cv
98.6782 82.0596 98.728 81.8496 98.728 81.5918 cv
98.728 75.7705 li
98.3823 75.3281 97.9985 74.9326 97.2954 74.9326 cv
97.2954 74.6104 li
99.543 74.6104 li
101.384 76.8467 103.299 79.1201 105.139 81.3564 cv
105.164 81.3564 li
105.164 76.2793 li
105.164 76.0195 105.114 75.8096 105.089 75.6113 cv
105.028 75.166 104.607 74.9941 103.792 74.9326 cv
103.792 74.6104 li
106.819 74.6104 li
106.819 74.9326 li
106.238 74.9941 105.818 75.166 105.757 75.6113 cv
105.732 75.8096 105.683 76.0195 105.683 76.2793 cv
105.683 83.2578 li
105.263 83.2578 li
cp
f
111.601 81.7129 mo
111.601 82.8633 111.55 82.8008 112.662 82.9365 cv
112.662 83.2578 li
109.339 83.2578 li
109.339 82.9365 li
110.451 82.8008 110.401 82.8633 110.401 81.7129 cv
110.401 76.1553 li
110.401 75.0068 110.451 75.0684 109.339 74.9326 cv
109.339 74.6104 li
112.662 74.6104 li
112.662 74.9326 li
111.55 75.0684 111.601 75.0068 111.601 76.1553 cv
111.601 81.7129 li
cp
f
117.925 74.9326 mo
117.245 74.9326 116.75 75.1309 117.158 76.3154 cv
117.64 77.7734 118.357 79.8984 118.999 81.7754 cv
119.789 79.8857 120.542 77.9834 121.309 76.0928 cv
121.618 75.3154 121.297 74.9326 120.457 74.9326 cv
120.457 74.6104 li
123.125 74.6104 li
123.125 74.9326 li
122.767 74.9326 122.359 75.0557 122.099 75.6738 cv
121.062 78.2051 120.012 80.7275 118.974 83.2578 cv
118.344 83.2578 li
117.591 81.1221 116.75 78.7354 115.998 76.6357 cv
115.54 75.3154 115.158 74.9326 114.564 74.9326 cv
114.564 74.6104 li
117.925 74.6104 li
117.925 74.9326 li
cp
f
125.027 82.9365 mo
126.138 82.8008 126.089 82.8633 126.089 81.7129 cv
126.089 76.1553 li
126.089 75.0068 126.138 75.0684 125.027 74.9326 cv
125.027 74.6104 li
130.549 74.6104 li
130.549 76.6016 li
130.228 76.6016 li
130.104 75.6855 129.856 75.0068 128.968 75.0068 cv
127.288 75.0068 li
127.288 78.5371 li
128.326 78.5371 li
129.103 78.5371 129.436 78.2314 129.462 77.4629 cv
129.783 77.4629 li
129.783 80.0947 li
129.462 80.0947 li
129.436 79.3672 129.153 78.9336 128.326 78.9336 cv
127.288 78.9336 li
127.288 81.7285 li
127.288 82.7773 127.771 82.8633 128.882 82.8633 cv
130.672 82.8633 130.586 82.3574 131.154 81.0342 cv
131.475 81.0342 li
131.105 83.2578 li
125.027 83.2578 li
125.027 82.9365 li
cp
f
135.626 79.0342 mo
136.651 79.0342 li
137.726 79.0342 138.22 78.2188 138.22 76.8223 cv
138.22 75.4756 137.478 75.0068 136.577 75.0068 cv
135.626 75.0068 li
135.626 79.0342 li
cp
133.365 74.6104 mo
136.961 74.6104 li
138.208 74.6104 139.455 75.2656 139.455 76.7109 cv
139.455 77.9834 138.678 78.8604 137.726 79.2324 cv
138.937 81.0723 li
139.555 81.9736 140.247 82.8389 140.678 83.0986 cv
140.678 83.2578 li
139.407 83.2578 li
138.678 83.2578 138.281 81.9121 136.786 79.4268 cv
135.626 79.4268 li
135.626 81.7129 li
135.626 82.8633 135.576 82.8008 136.688 82.9365 cv
136.688 83.2578 li
133.365 83.2578 li
133.365 82.9365 li
134.477 82.8008 134.427 82.8633 134.427 81.7129 cv
134.427 76.1553 li
134.427 75.0068 134.477 75.0684 133.365 74.9326 cv
133.365 74.6104 li
cp
f
146.794 76.4502 mo
146.693 75.5869 146.224 74.8936 145.237 74.8936 cv
144.52 74.8936 143.878 75.2656 143.878 76.1787 cv
143.878 77.043 144.742 77.5635 145.979 78.4912 cv
147.287 79.4648 147.707 80.0947 147.707 81.1221 cv
147.707 82.5908 146.2 83.4063 144.718 83.4063 cv
143.927 83.4063 143.249 83.2578 142.605 83.0117 cv
142.556 82.9854 142.52 82.9365 142.52 82.8389 cv
142.52 81.0605 li
142.84 81.0605 li
142.977 82.4297 143.878 82.9746 144.83 82.9746 cv
145.707 82.9746 146.422 82.3066 146.422 81.4063 cv
146.422 80.6025 145.991 79.9473 144.137 78.7246 cv
143.47 78.2783 142.643 77.7969 142.643 76.4502 cv
142.643 75.3389 143.878 74.4629 145.298 74.4629 cv
145.83 74.4629 146.535 74.5244 147.027 74.6963 cv
147.102 74.7217 147.114 74.7705 147.114 74.832 cv
147.114 76.4502 li
146.794 76.4502 li
cp
f
152.192 81.7129 mo
152.192 82.8633 152.143 82.8008 153.252 82.9365 cv
153.252 83.2578 li
149.931 83.2578 li
149.931 82.9365 li
151.043 82.8008 150.993 82.8633 150.993 81.7129 cv
150.993 76.1553 li
150.993 75.0068 151.043 75.0684 149.931 74.9326 cv
149.931 74.6104 li
153.252 74.6104 li
153.252 74.9326 li
152.143 75.0684 152.192 75.0068 152.192 76.1553 cv
152.192 81.7129 li
cp
f
159.356 81.7129 mo
159.356 82.8633 159.307 82.8008 160.419 82.9365 cv
160.419 83.2578 li
157.095 83.2578 li
157.095 82.9365 li
158.208 82.8008 158.157 82.8633 158.157 81.7129 cv
158.157 75.0068 li
157.047 75.0068 li
155.972 75.0068 155.725 75.6855 155.316 76.501 cv
155.007 76.501 li
155.34 74.6104 li
162.173 74.6104 li
162.506 76.501 li
162.197 76.501 li
161.791 75.6855 161.542 75.0068 160.467 75.0068 cv
159.356 75.0068 li
159.356 81.7129 li
cp
f
166.102 82.9365 mo
167.212 82.8008 167.164 82.8633 167.164 81.7129 cv
167.164 79.8125 li
165.26 76.043 li
164.853 75.2402 164.507 74.9326 163.939 74.9326 cv
163.939 74.6104 li
167.088 74.6104 li
167.088 74.9326 li
166.151 74.9326 166.236 75.4014 166.544 76.043 cv
168.041 79.1436 li
169.746 76.043 li
170.165 75.29 169.769 74.9326 169.04 74.9326 cv
169.04 74.6104 li
171.584 74.6104 li
171.584 74.9326 li
171.239 74.9326 170.906 75.0928 170.572 75.6855 cv
168.511 79.4268 li
168.387 79.6748 168.36 80.0215 168.36 80.3311 cv
168.36 81.7129 li
168.36 82.8633 168.313 82.8008 169.424 82.9365 cv
169.424 83.2578 li
166.102 83.2578 li
166.102 82.9365 li
cp
f
182.813 77.1748 mo
182.813 75.5098 181.806 75.4443 181.55 75.4443 cv
179.819 75.4443 178.683 78.5498 178.683 80.6338 cv
178.683 81.4658 178.828 82.9697 180.013 82.9697 cv
181.838 82.9697 182.813 79.96 182.813 77.1748 cv
cp
177.21 80.2979 mo
177.21 78.2002 179.019 75.0605 181.693 75.0605 cv
183.824 75.0605 184.285 76.5029 184.285 77.9424 cv
184.285 79.7031 182.877 83.4512 179.819 83.4512 cv
177.77 83.4512 177.21 81.8018 177.21 80.2979 cv
cp
f
192.339 75.5889 mo
191.955 75.9258 li
189.857 75.9258 li
189.074 79.7354 187.792 84.8115 186.881 87.2451 cv
186.159 87.2451 li
188.449 75.9258 li
186.93 75.9258 li
187.072 75.2539 li
188.577 75.2539 li
189.427 71.8438 192.243 71.4902 192.915 71.4902 cv
193.283 71.4902 194.053 71.5557 194.293 71.7793 cv
194.1 72.835 li
193.7 73.0273 li
193.476 72.5967 192.964 72.0996 192.291 72.0996 cv
191.33 72.0996 190.61 72.7559 190.225 74.4844 cv
190.051 75.2539 li
192.404 75.2539 li
192.339 75.5889 li
cp
f
202.104 81.2578 mo
202.104 82.7461 202.041 82.666 203.48 82.8438 cv
203.48 83.2578 li
199.173 83.2578 li
199.173 82.8438 li
200.615 82.666 200.551 82.7461 200.551 81.2578 cv
200.551 74.0527 li
200.551 72.5625 200.615 72.6445 199.173 72.4678 cv
199.173 72.0498 li
203.368 72.0498 li
206.026 72.0498 207.339 73.1064 207.339 75.0303 cv
207.339 77.335 205.258 78.583 202.809 78.4375 cv
202.809 78.1182 li
204.811 78.1494 205.736 76.9502 205.736 75.1895 cv
205.736 73.3945 204.873 72.5625 203.08 72.5625 cv
202.104 72.5625 li
202.104 81.2578 li
cp
f
209.545 82.9365 mo
210.658 82.8008 210.607 82.8633 210.607 81.7129 cv
210.607 76.1553 li
210.607 75.0068 210.658 75.0684 209.545 74.9326 cv
209.545 74.6104 li
215.068 74.6104 li
215.068 76.6016 li
214.746 76.6016 li
214.621 75.6855 214.377 75.0068 213.487 75.0068 cv
211.808 75.0068 li
211.808 78.5371 li
212.844 78.5371 li
213.623 78.5371 213.957 78.2314 213.981 77.4629 cv
214.302 77.4629 li
214.302 80.0947 li
213.981 80.0947 li
213.957 79.3672 213.672 78.9336 212.844 78.9336 cv
211.808 78.9336 li
211.808 81.7285 li
211.808 82.7773 212.289 82.8633 213.4 82.8633 cv
215.191 82.8633 215.106 82.3574 215.673 81.0342 cv
215.995 81.0342 li
215.623 83.2578 li
209.545 83.2578 li
209.545 82.9365 li
cp
f
225.802 83.2578 mo
223.838 80.9365 221.801 78.502 219.787 76.1309 cv
219.787 81.5918 li
219.787 81.8496 219.836 82.0596 219.86 82.2568 cv
219.922 82.7021 220.342 82.877 221.157 82.9365 cv
221.157 83.2578 li
218.133 83.2578 li
218.133 82.9365 li
218.725 82.877 219.131 82.7021 219.193 82.2568 cv
219.219 82.0596 219.268 81.8496 219.268 81.5918 cv
219.268 75.7705 li
218.922 75.3281 218.54 74.9326 217.835 74.9326 cv
217.835 74.6104 li
220.082 74.6104 li
221.924 76.8467 223.838 79.1201 225.679 81.3564 cv
225.703 81.3564 li
225.703 76.2793 li
225.703 76.0195 225.654 75.8096 225.631 75.6113 cv
225.568 75.166 225.149 74.9941 224.331 74.9326 cv
224.331 74.6104 li
227.358 74.6104 li
227.358 74.9326 li
226.78 74.9941 226.357 75.166 226.298 75.6113 cv
226.272 75.8096 226.223 76.0195 226.223 76.2793 cv
226.223 83.2578 li
225.802 83.2578 li
cp
f
236.871 83.2578 mo
234.906 80.9365 232.869 78.502 230.854 76.1309 cv
230.854 81.5918 li
230.854 81.8496 230.904 82.0596 230.928 82.2568 cv
230.99 82.7021 231.41 82.877 232.225 82.9365 cv
232.225 83.2578 li
229.201 83.2578 li
229.201 82.9365 li
229.791 82.877 230.199 82.7021 230.261 82.2568 cv
230.288 82.0596 230.335 81.8496 230.335 81.5918 cv
230.335 75.7705 li
229.989 75.3281 229.606 74.9326 228.902 74.9326 cv
228.902 74.6104 li
231.15 74.6104 li
232.992 76.8467 234.906 79.1201 236.746 81.3564 cv
236.772 81.3564 li
236.772 76.2793 li
236.772 76.0195 236.723 75.8096 236.699 75.6113 cv
236.637 75.166 236.218 74.9941 235.398 74.9326 cv
235.398 74.6104 li
238.426 74.6104 li
238.426 74.9326 li
237.848 74.9941 237.426 75.166 237.366 75.6113 cv
237.34 75.8096 237.29 76.0195 237.29 76.2793 cv
237.29 83.2578 li
236.871 83.2578 li
cp
f
244.911 76.4502 mo
244.813 75.5869 244.345 74.8936 243.356 74.8936 cv
242.64 74.8936 241.996 75.2656 241.996 76.1787 cv
241.996 77.043 242.861 77.5635 244.096 78.4912 cv
245.407 79.4648 245.827 80.0947 245.827 81.1221 cv
245.827 82.5908 244.32 83.4063 242.838 83.4063 cv
242.047 83.4063 241.367 83.2578 240.724 83.0117 cv
240.677 82.9854 240.638 82.9365 240.638 82.8389 cv
240.638 81.0605 li
240.96 81.0605 li
241.095 82.4297 241.996 82.9746 242.948 82.9746 cv
243.825 82.9746 244.541 82.3066 244.541 81.4063 cv
244.541 80.6025 244.11 79.9473 242.257 78.7246 cv
241.59 78.2783 240.763 77.7969 240.763 76.4502 cv
240.763 75.3389 241.996 74.4629 243.416 74.4629 cv
243.948 74.4629 244.654 74.5244 245.147 74.6963 cv
245.223 74.7217 245.232 74.7705 245.232 74.832 cv
245.232 76.4502 li
244.911 76.4502 li
cp
f
249.89 82.9365 mo
251.004 82.8008 250.952 82.8633 250.952 81.7129 cv
250.952 79.8125 li
249.052 76.043 li
248.644 75.2402 248.298 74.9326 247.729 74.9326 cv
247.729 74.6104 li
250.88 74.6104 li
250.88 74.9326 li
249.94 74.9326 250.025 75.4014 250.336 76.043 cv
251.83 79.1436 li
253.534 76.043 li
253.953 75.29 253.561 74.9326 252.831 74.9326 cv
252.831 74.6104 li
255.376 74.6104 li
255.376 74.9326 li
255.028 74.9326 254.694 75.0928 254.364 75.6855 cv
252.301 79.4268 li
252.176 79.6748 252.152 80.0215 252.152 80.3311 cv
252.152 81.7129 li
252.152 82.8633 252.102 82.8008 253.212 82.9365 cv
253.212 83.2578 li
249.89 83.2578 li
249.89 82.9365 li
cp
f
257.4 82.9365 mo
258.513 82.8008 258.463 82.8633 258.463 81.7129 cv
258.463 76.1553 li
258.463 75.0068 258.513 75.0684 257.4 74.9326 cv
257.4 74.6104 li
260.724 74.6104 li
260.724 74.9326 li
259.611 75.0684 259.661 75.0068 259.661 76.1553 cv
259.661 81.9121 li
259.661 82.7773 260.143 82.8633 261.242 82.8633 cv
263.035 82.8633 262.959 82.3574 263.527 81.0342 cv
263.837 81.0342 li
263.465 83.2578 li
257.4 83.2578 li
257.4 82.9365 li
cp
f
268.149 74.9326 mo
267.47 74.9326 266.973 75.1309 267.382 76.3154 cv
267.864 77.7734 268.579 79.8984 269.224 81.7754 cv
270.014 79.8857 270.768 77.9834 271.533 76.0928 cv
271.843 75.3154 271.521 74.9326 270.681 74.9326 cv
270.681 74.6104 li
273.35 74.6104 li
273.35 74.9326 li
272.992 74.9326 272.582 75.0557 272.324 75.6738 cv
271.285 78.2051 270.236 80.7275 269.197 83.2578 cv
268.568 83.2578 li
267.814 81.1221 266.973 78.7354 266.221 76.6357 cv
265.762 75.3154 265.381 74.9326 264.789 74.9326 cv
264.789 74.6104 li
268.149 74.6104 li
268.149 74.9326 li
cp
f
278.39 79.9238 mo
277.078 75.9072 li
277.055 75.9072 li
275.585 79.9238 li
278.39 79.9238 li
cp
275.398 80.3936 mo
274.831 82.0469 li
274.669 82.5283 274.904 82.9365 275.448 82.9365 cv
275.448 83.2578 li
273.202 83.2578 li
273.202 82.9365 li
273.535 82.9365 273.893 82.7266 274.09 82.3184 cv
274.622 81.2324 276.066 77.1914 277.091 74.4629 cv
277.784 74.4629 li
278.623 76.9453 279.885 80.75 280.303 81.8496 cv
280.576 82.543 280.772 82.9365 281.305 82.9365 cv
281.305 83.2578 li
278.426 83.2578 li
278.426 82.9365 li
279.204 82.9365 279.279 82.5283 279.08 81.9854 cv
278.55 80.3936 li
275.398 80.3936 li
cp
f
290.815 83.2578 mo
288.852 80.9365 286.812 78.502 284.801 76.1309 cv
284.801 81.5918 li
284.801 81.8496 284.848 82.0596 284.874 82.2568 cv
284.937 82.7021 285.356 82.877 286.172 82.9365 cv
286.172 83.2578 li
283.144 83.2578 li
283.144 82.9365 li
283.737 82.877 284.146 82.7021 284.207 82.2568 cv
284.231 82.0596 284.281 81.8496 284.281 81.5918 cv
284.281 75.7705 li
283.936 75.3281 283.552 74.9326 282.849 74.9326 cv
282.849 74.6104 li
285.095 74.6104 li
286.936 76.8467 288.852 79.1201 290.691 81.3564 cv
290.716 81.3564 li
290.716 76.2793 li
290.716 76.0195 290.669 75.8096 290.643 75.6113 cv
290.581 75.166 290.16 74.9941 289.346 74.9326 cv
289.346 74.6104 li
292.373 74.6104 li
292.373 74.9326 li
291.791 74.9941 291.371 75.166 291.31 75.6113 cv
291.286 75.8096 291.235 76.0195 291.235 76.2793 cv
291.235 83.2578 li
290.815 83.2578 li
cp
f
296.658 81.7129 mo
296.658 82.8633 296.61 82.8008 297.721 82.9365 cv
297.721 83.2578 li
294.398 83.2578 li
294.398 82.9365 li
295.509 82.8008 295.461 82.8633 295.461 81.7129 cv
295.461 76.1553 li
295.461 75.0068 295.509 75.0684 294.398 74.9326 cv
294.398 74.6104 li
297.721 74.6104 li
297.721 74.9326 li
296.61 75.0684 296.658 75.0068 296.658 76.1553 cv
296.658 81.7129 li
cp
f
304.811 79.9238 mo
303.502 75.9072 li
303.476 75.9072 li
302.008 79.9238 li
304.811 79.9238 li
cp
301.822 80.3936 mo
301.253 82.0469 li
301.093 82.5283 301.326 82.9365 301.872 82.9365 cv
301.872 83.2578 li
299.623 83.2578 li
299.623 82.9365 li
299.956 82.9365 300.314 82.7266 300.511 82.3184 cv
301.043 81.2324 302.489 77.1914 303.514 74.4629 cv
304.206 74.4629 li
305.047 76.9453 306.306 80.75 306.727 81.8496 cv
306.998 82.543 307.193 82.9365 307.726 82.9365 cv
307.726 83.2578 li
304.848 83.2578 li
304.848 82.9365 li
305.625 82.9365 305.701 82.5283 305.502 81.9854 cv
304.973 80.3936 li
301.822 80.3936 li
cp
f
94.5615 20.1602 mo
96.3306 20.7725 97.3511 20.8403 99.3921 20.8403 cv
105.175 20.8403 108.849 17.7109 108.849 12.4043 cv
108.849 8.25439 106.536 2.67578 99.3921 2.67578 cv
94.5615 2.67578 li
94.5615 20.1602 li
cp
94.5615 32.8135 mo
94.5615 37.6436 95.7188 39.0049 98.9839 39.0049 cv
98.9839 40.1611 li
84.9692 40.1611 li
84.9692 39.0049 li
87.6909 39.0049 89.3911 38.1201 89.3911 32.9497 cv
89.3911 8.52686 li
89.3911 3.76416 88.2349 2.33545 84.9692 2.33545 cv
84.9692 1.1792 li
99.188 1.1792 li
109.937 1.1792 114.291 6.89355 114.291 12.2681 cv
114.291 18.7314 109.393 22.3369 100.548 22.3369 cv
98.8477 22.3369 97.4189 22.269 94.5615 21.9287 cv
94.5615 32.8135 li
cp
f
132.744 24.3101 mo
132.948 19.0034 129.342 16.8262 126.281 16.8262 cv
122.267 16.8262 119.886 19.8198 119.614 24.3101 cv
132.744 24.3101 li
cp
119.614 25.4663 mo
119.478 36.2832 125.94 39.0049 129.207 39.0049 cv
132.54 39.0049 134.241 37.8481 137.71 33.9707 cv
137.71 35.7388 li
134.785 39.481 131.996 40.9097 127.778 40.9097 cv
120.226 40.9097 114.784 35.6709 114.784 28.3916 cv
114.784 21.1123 120.09 15.3975 126.893 15.3975 cv
132.472 15.3975 137.642 19.8877 137.302 25.4663 cv
119.614 25.4663 li
cp
f
148.664 35.603 mo
148.664 38.2563 149.48 39.0049 152.678 39.0049 cv
152.678 40.1611 li
139.956 40.1611 li
139.956 39.0049 li
143.63 39.0049 144.038 38.0522 144.038 34.3784 cv
144.038 21.2485 li
144.038 17.7109 143.154 17.3022 139.072 17.3022 cv
139.072 16.146 li
147.508 15.3975 li
148.664 15.3975 li
148.664 20.6362 li
153.154 16.7583 155.263 15.3975 156.896 15.3975 cv
158.257 15.3975 160.093 16.2139 161.318 17.3022 cv
159.481 21.5889 li
157.508 20.5 155.399 19.48 153.767 19.48 cv
152.202 19.48 150.841 20.2959 148.664 22.4048 cv
148.664 35.603 li
cp
f
181.745 24.3101 mo
181.949 19.0034 178.344 16.8262 175.282 16.8262 cv
171.268 16.8262 168.887 19.8198 168.615 24.3101 cv
181.745 24.3101 li
cp
168.615 25.4663 mo
168.479 36.2832 174.941 39.0049 178.207 39.0049 cv
181.541 39.0049 183.242 37.8481 186.711 33.9707 cv
186.711 35.7388 li
183.785 39.481 180.996 40.9097 176.779 40.9097 cv
169.227 40.9097 163.785 35.6709 163.785 28.3916 cv
163.785 21.1123 169.091 15.3975 175.895 15.3975 cv
181.473 15.3975 186.644 19.8877 186.303 25.4663 cv
168.615 25.4663 li
cp
f
193.584 6.71729 mo
193.584 4.40381 192.835 3.45117 190.318 3.45117 cv
188.753 3.45117 li
188.753 2.29492 li
197.053 1.47852 li
198.21 1.47852 li
198.21 35.603 li
198.21 38.1885 199.026 39.0049 201.951 39.0049 cv
202.563 39.0049 li
202.563 40.1611 li
189.161 40.1611 li
189.161 39.0049 li
190.386 39.0049 li
192.835 39.0049 193.584 37.9839 193.584 34.4463 cv
193.584 6.71729 li
cp
f
247.261 35.6709 mo
247.261 38.1201 248.077 39.0049 251.344 39.0049 cv
251.344 40.1611 li
238.553 40.1611 li
238.553 39.0049 li
241.955 39.0049 242.636 38.3242 242.636 34.3784 cv
242.636 22.9492 li
242.636 19.8198 240.594 17.9829 237.396 17.9829 cv
234.811 17.9829 232.702 19.4116 230.594 22.6089 cv
230.594 35.5347 li
230.594 38.0522 231.342 39.0049 234.607 39.0049 cv
234.607 40.1611 li
221.953 40.1611 li
221.953 39.0049 li
225.219 39.0049 225.967 38.6646 225.967 34.3784 cv
225.967 23.2212 li
225.967 19.6152 223.45 17.9829 220.865 17.9829 cv
218.144 17.9829 215.49 19.8877 213.926 22.6089 cv
213.926 35.7388 li
213.926 38.1885 214.946 39.0723 218.008 39.0723 cv
218.008 40.1611 li
205.217 40.1611 li
205.217 39.0049 li
208.074 39.0049 209.3 38.7324 209.3 35.127 cv
209.3 20.8403 li
209.3 18.187 208.144 17.3022 205.966 17.3022 cv
204.469 17.3022 li
204.469 16.146 li
212.769 15.3975 li
213.926 15.3975 li
213.926 20.4316 li
214.062 20.4316 li
216.035 17.3701 219.437 15.3975 222.634 15.3975 cv
225.831 15.3975 228.96 17.1665 230.186 20.8403 cv
232.77 17.2349 235.831 15.3975 239.098 15.3975 cv
242.499 15.3975 247.261 17.3701 247.261 23.5615 cv
247.261 35.6709 li
cp
f
268.218 27.0991 mo
263.66 29.0718 259.578 29.0039 259.578 33.9023 cv
259.578 36.3511 261.278 38.3242 263.252 38.3242 cv
264.681 38.3242 267.266 37.3037 268.218 35.2627 cv
268.218 27.0991 li
cp
272.844 34.5825 mo
272.844 37.3721 273.116 38.3242 274.205 38.3242 cv
274.953 38.3242 275.293 37.7119 275.838 36.0112 cv
276.994 36.0112 li
276.79 39.0049 275.021 40.9097 272.3 40.9097 cv
270.259 40.9097 269.034 39.8887 268.218 37.5078 cv
265.837 40.0928 264.272 40.9097 261.755 40.9097 cv
258.014 40.9097 254.884 38.0522 254.884 34.5146 cv
254.884 27.6431 264.272 27.9155 268.218 25.6025 cv
268.218 23.834 li
268.218 20.4316 266.245 17.9829 262.844 17.9829 cv
260.122 17.9829 257.469 19.6836 256.448 23.1528 cv
255.224 22.813 li
256.244 18.3228 259.781 15.3975 264.136 15.3975 cv
268.15 15.3975 272.844 17.7109 272.844 24.2417 cv
272.844 34.5825 li
cp
f
303.868 34.9224 mo
303.868 38.0522 304.548 39.0049 307.95 39.0049 cv
307.95 40.1611 li
295.092 40.1611 li
295.092 39.0049 li
298.356 39.0049 299.242 38.2563 299.242 36.0112 cv
299.242 23.4253 li
299.242 19.5474 296.452 17.915 293.868 17.915 cv
291.486 17.915 289.377 19.4116 286.996 22.6089 cv
286.996 34.3784 li
286.996 38.0522 287.473 39.0049 291.078 39.0049 cv
291.078 40.1611 li
278.356 40.1611 li
278.356 39.0049 li
281.554 39.0049 282.37 38.7324 282.37 34.3784 cv
282.37 20.8403 li
282.37 17.915 281.622 17.3022 278.356 17.3022 cv
278.356 16.146 li
285.84 15.3975 li
286.996 15.3975 li
286.996 20.2275 li
289.854 16.9624 292.643 15.3975 295.704 15.3975 cv
299.719 15.3975 303.868 18.2549 303.868 24.0376 cv
303.868 34.9224 li
cp
f
94.645 50.0039 mo
94.0767 50.0039 li
93.7759 47.1626 91.77 46.0596 89.8311 46.0596 cv
87.8252 46.0596 86.3882 47.1626 86.3882 48.9341 cv
86.3882 52.4785 91.2686 53.4141 94.0098 56.1553 cv
95.3472 57.4922 95.6812 58.6953 95.6812 59.9658 cv
95.6812 62.9746 93.2412 65.415 90.2324 65.415 cv
88.1929 65.415 86.4888 64.4121 85.853 64.4121 cv
85.5186 64.4121 85.2847 64.6465 85.1177 65.1475 cv
84.5493 65.1475 li
84.5493 59.9658 li
85.1177 59.9658 li
85.1519 63.5098 88.0596 64.6787 89.731 64.6787 cv
92.0376 64.6787 93.5752 63.3418 93.5752 61.2695 cv
93.5752 57.96 88.4272 56.4229 86.2876 54.2832 cv
85.1177 53.1133 84.6499 51.7754 84.6499 50.2715 cv
84.6499 47.3301 86.7554 45.3242 89.8643 45.3242 cv
91.9038 45.3242 92.873 46.0596 93.6084 46.0596 cv
93.9097 46.0596 93.9761 45.9932 94.1099 45.5249 cv
94.645 45.5249 li
94.645 50.0039 li
cp
f
108.354 56.957 mo
107.785 56.957 li
107.283 54.8184 105.78 53.4473 103.807 53.4473 cv
101.467 53.4473 99.8291 55.4531 99.8291 58.3613 cv
99.8291 61.6045 101.868 64.3115 104.275 64.3115 cv
105.712 64.3115 107.451 63.542 108.688 61.8379 cv
108.688 62.707 li
107.417 64.4453 105.612 65.3154 103.473 65.3154 cv
99.9629 65.3154 97.5225 62.874 97.5225 59.3301 cv
97.5225 55.6875 100.264 52.7783 103.64 52.7783 cv
105.412 52.7783 106.381 53.4473 106.983 53.4473 cv
107.283 53.4473 107.585 53.2139 107.785 52.7783 cv
108.354 52.7783 li
108.354 56.957 li
cp
f
122.087 62.1055 mo
122.087 63.9102 122.422 64.3789 123.993 64.3789 cv
123.993 64.9473 li
117.842 64.9473 li
117.842 64.3789 li
119.447 64.3789 119.814 64.0107 119.814 62.4727 cv
119.814 56.623 li
119.814 55.0518 118.878 54.0498 117.441 54.0498 cv
116.104 54.0498 115.134 54.6846 113.998 56.2891 cv
113.998 62.7734 li
113.998 64.0107 114.499 64.3789 115.97 64.3789 cv
115.97 64.9473 li
109.619 64.9473 li
109.619 64.3789 li
111.39 64.3447 111.725 64.0107 111.725 62.1055 cv
111.725 46.6943 li
111.725 45.1567 111.29 44.9229 109.619 44.9229 cv
109.619 44.354 li
113.43 43.9536 li
113.998 43.9536 li
113.998 55.1523 li
115.502 53.4141 116.605 52.7783 118.143 52.7783 cv
120.115 52.7783 122.087 54.083 122.087 56.8906 cv
122.087 62.1055 li
cp
f
131.517 53.4473 mo
129.01 53.4473 127.506 55.6543 127.506 59.0635 cv
127.506 62.1055 128.776 64.6465 131.517 64.6465 cv
134.326 64.6465 135.529 61.9385 135.529 59.0635 cv
135.529 56.0879 134.258 53.4473 131.517 53.4473 cv
cp
131.517 65.3154 mo
127.806 65.3154 125.032 62.6406 125.032 59.0635 cv
125.032 55.4531 127.806 52.7783 131.517 52.7783 cv
135.228 52.7783 138.002 55.4531 138.002 59.0635 cv
138.002 62.6406 135.228 65.3154 131.517 65.3154 cv
cp
f
146.496 53.4473 mo
143.989 53.4473 142.485 55.6543 142.485 59.0635 cv
142.485 62.1055 143.755 64.6465 146.496 64.6465 cv
149.305 64.6465 150.508 61.9385 150.508 59.0635 cv
150.508 56.0879 149.237 53.4473 146.496 53.4473 cv
cp
146.496 65.3154 mo
142.785 65.3154 140.011 62.6406 140.011 59.0635 cv
140.011 55.4531 142.785 52.7783 146.496 52.7783 cv
150.206 52.7783 152.981 55.4531 152.981 59.0635 cv
152.981 62.6406 150.206 65.3154 146.496 65.3154 cv
cp
f
156.762 46.5278 mo
156.762 45.3906 156.394 44.9229 155.157 44.9229 cv
154.388 44.9229 li
154.388 44.354 li
158.467 43.9536 li
159.035 43.9536 li
159.035 62.707 li
159.035 63.9775 159.436 64.3789 160.873 64.3789 cv
161.174 64.3789 li
161.174 64.9473 li
154.588 64.9473 li
154.588 64.3789 li
155.191 64.3789 li
156.394 64.3789 156.762 63.877 156.762 62.1387 cv
156.762 46.5278 li
cp
f
176.354 53.4473 mo
173.847 53.4473 172.342 55.6543 172.342 59.0635 cv
172.342 62.1055 173.613 64.6465 176.354 64.6465 cv
179.162 64.6465 180.365 61.9385 180.365 59.0635 cv
180.365 56.0879 179.095 53.4473 176.354 53.4473 cv
cp
176.354 65.3154 mo
172.644 65.3154 169.869 62.6406 169.869 59.0635 cv
169.869 55.4531 172.644 52.7783 176.354 52.7783 cv
180.064 52.7783 182.839 55.4531 182.839 59.0635 cv
182.839 62.6406 180.064 65.3154 176.354 65.3154 cv
cp
f
188.592 62.6074 mo
188.592 63.9443 189.193 64.3789 190.297 64.3789 cv
190.864 64.3789 li
190.864 64.9473 li
184.146 64.9473 li
184.146 64.3789 li
184.681 64.3789 li
185.884 64.3789 186.318 63.9443 186.318 62.8076 cv
186.318 54.0156 li
184.681 54.0156 li
184.681 53.4473 li
185.482 53.1133 185.816 52.9795 186.318 52.6455 cv
186.318 50.3057 li
186.318 47.4302 187.689 43.9536 191.399 43.9536 cv
192.703 43.9536 193.94 44.3213 194.742 44.9229 cv
193.606 47.8979 li
193.038 47.8979 li
193.205 45.6587 192.202 44.6558 190.798 44.6558 cv
189.494 44.6558 188.592 45.625 188.592 47.4302 cv
188.592 53.1465 li
191.533 53.1465 li
191.533 54.0156 li
188.592 54.0156 li
188.592 62.6074 li
cp
f
222.857 46.3599 mo
221.22 46.3936 220.585 47.5303 220.719 49.3359 cv
221.688 61.1357 li
221.889 63.4756 222.29 64.2109 224.062 64.3789 cv
224.062 64.9473 li
217.176 64.9473 li
217.176 64.3789 li
218.746 64.1104 219.281 63.4092 219.147 61.5039 cv
218.211 49.1348 li
218.145 49.1348 li
211.593 64.9473 li
211.092 64.9473 li
204.673 49.1348 li
204.606 49.1348 li
203.536 60.9355 li
203.369 62.874 204.071 64.0107 206.011 64.3789 cv
206.011 64.9473 li
200.061 64.9473 li
200.061 64.3789 li
201.998 64.1104 202.3 62.9746 202.5 60.8682 cv
203.67 47.6973 li
202.936 46.895 202.267 46.5278 201.164 46.3599 cv
201.164 45.792 li
206.011 45.792 li
212.128 60.8682 li
218.346 45.792 li
222.857 45.792 li
222.857 46.3599 li
cp
f
234.698 57.1582 mo
234.798 54.5508 233.026 53.4814 231.522 53.4814 cv
229.55 53.4814 228.38 54.9512 228.246 57.1582 cv
234.698 57.1582 li
cp
228.246 57.7266 mo
228.18 63.041 231.355 64.3789 232.959 64.3789 cv
234.598 64.3789 235.434 63.8105 237.139 61.9043 cv
237.139 62.7734 li
235.701 64.6123 234.33 65.3154 232.257 65.3154 cv
228.547 65.3154 225.873 62.7412 225.873 59.1641 cv
225.873 55.5869 228.48 52.7783 231.823 52.7783 cv
234.564 52.7783 237.104 54.9854 236.938 57.7266 cv
228.246 57.7266 li
cp
f
248.439 55.4863 mo
247.503 54.2158 246.199 53.4814 244.996 53.4814 cv
242.856 53.4814 241.387 55.4199 241.387 58.2949 cv
241.387 61.1357 242.689 64.4121 246.567 64.4121 cv
247.904 64.4121 248.439 63.877 248.439 62.6074 cv
248.439 55.4863 li
cp
250.713 62.6406 mo
250.713 63.9443 251.181 64.3789 252.686 64.3789 cv
252.686 64.9473 li
245.799 64.9473 li
240.784 64.9473 238.912 61.5703 238.912 58.7959 cv
238.912 55.4531 241.387 52.7783 244.461 52.7783 cv
245.731 52.7783 246.936 53.2139 248.439 54.2158 cv
248.439 46.9619 li
248.439 45.2568 248.039 44.9229 246.868 44.9229 cv
246.199 44.9229 li
246.199 44.354 li
250.145 43.9536 li
250.713 43.9536 li
250.713 62.6406 li
cp
f
258.203 48.0991 mo
258.203 48.9009 257.568 49.5693 256.766 49.5693 cv
255.964 49.5693 255.295 48.9009 255.295 48.0991 cv
255.295 47.2964 255.964 46.6616 256.766 46.6616 cv
257.568 46.6616 258.203 47.2964 258.203 48.0991 cv
cp
257.869 62.7412 mo
257.869 63.9102 258.17 64.3789 259.841 64.3789 cv
259.841 64.9473 li
253.356 64.9473 li
253.356 64.3789 li
255.161 64.3789 255.596 64.1445 255.596 62.7412 cv
255.596 55.4863 li
255.596 53.8486 255.095 53.7148 253.356 53.7148 cv
253.356 53.1465 li
257.301 52.7783 li
257.869 52.7783 li
257.869 62.7412 li
cp
f
272.211 56.957 mo
271.644 56.957 li
271.142 54.8184 269.637 53.4473 267.665 53.4473 cv
265.325 53.4473 263.687 55.4531 263.687 58.3613 cv
263.687 61.6045 265.727 64.3115 268.133 64.3115 cv
269.57 64.3115 271.309 63.542 272.545 61.8379 cv
272.545 62.707 li
271.275 64.4453 269.47 65.3154 267.331 65.3154 cv
263.821 65.3154 261.38 62.874 261.38 59.3301 cv
261.38 55.6875 264.121 52.7783 267.498 52.7783 cv
269.27 52.7783 270.239 53.4473 270.841 53.4473 cv
271.142 53.4473 271.442 53.2139 271.644 52.7783 cv
272.211 52.7783 li
272.211 56.957 li
cp
f
278.064 48.0991 mo
278.064 48.9009 277.43 49.5693 276.627 49.5693 cv
275.824 49.5693 275.155 48.9009 275.155 48.0991 cv
275.155 47.2964 275.824 46.6616 276.627 46.6616 cv
277.43 46.6616 278.064 47.2964 278.064 48.0991 cv
cp
277.729 62.7412 mo
277.729 63.9102 278.031 64.3789 279.702 64.3789 cv
279.702 64.9473 li
273.217 64.9473 li
273.217 64.3789 li
275.022 64.3789 275.456 64.1445 275.456 62.7412 cv
275.456 55.4863 li
275.456 53.8486 274.955 53.7148 273.217 53.7148 cv
273.217 53.1465 li
277.161 52.7783 li
277.729 52.7783 li
277.729 62.7412 li
cp
f
292.94 62.373 mo
292.94 63.9102 293.275 64.3789 294.947 64.3789 cv
294.947 64.9473 li
288.628 64.9473 li
288.628 64.3789 li
290.233 64.3789 290.668 64.0107 290.668 62.9072 cv
290.668 56.7236 li
290.668 54.8184 289.297 54.0156 288.027 54.0156 cv
286.856 54.0156 285.82 54.751 284.65 56.3223 cv
284.65 62.1055 li
284.65 63.9102 284.885 64.3789 286.656 64.3789 cv
286.656 64.9473 li
280.405 64.9473 li
280.405 64.3789 li
281.977 64.3789 282.377 64.2451 282.377 62.1055 cv
282.377 55.4531 li
282.377 54.0156 282.011 53.7148 280.405 53.7148 cv
280.405 53.1465 li
284.082 52.7783 li
284.65 52.7783 li
284.65 55.1523 li
286.055 53.5479 287.426 52.7783 288.93 52.7783 cv
290.902 52.7783 292.94 54.1826 292.94 57.0244 cv
292.94 62.373 li
cp
f
305.078 57.1582 mo
305.179 54.5508 303.407 53.4814 301.902 53.4814 cv
299.931 53.4814 298.761 54.9512 298.627 57.1582 cv
305.078 57.1582 li
cp
298.627 57.7266 mo
298.561 63.041 301.735 64.3789 303.34 64.3789 cv
304.979 64.3789 305.813 63.8105 307.519 61.9043 cv
307.519 62.7734 li
306.081 64.6123 304.71 65.3154 302.639 65.3154 cv
298.927 65.3154 296.253 62.7412 296.253 59.1641 cv
296.253 55.5869 298.86 52.7783 302.203 52.7783 cv
304.944 52.7783 307.485 54.9854 307.318 57.7266 cv
298.627 57.7266 li
cp
f
.0078125 0 mo
76.2622 0 li
76.2622 0 76.2622 37.459 76.2622 38.1211 cv
75.7466 69.1934 40.9248 85.5273 36.5439 85.377 cv
31.9883 85.2207 -.0957031 69.2402 0 37.959 cv
.00195313 37.3965 .0078125 0 .0078125 0 cv
cp
/1 
[/DeviceCMYK] /CSA add_res
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
1.84668 2.02637 mo
74.4707 2.02637 li
74.4707 2.02637 74.4707 37.7031 74.4707 38.332 cv
73.9785 67.9258 40.8149 83.4805 36.6431 83.3379 cv
32.3042 83.1895 1.74854 67.9688 1.83936 38.1777 cv
1.84082 37.6426 1.84668 2.02637 1.84668 2.02637 cv
cp
f
1.83984 24.0898 mo
1.94531 24.1953 1.84424 2.03223 1.84424 2.03223 cv
74.415 2.03223 li
74.415 2.03223 74.415 13.918 74.415 24.0908 cv
1.83984 24.0898 li
cp
/1 
<<
/Name (PANTONE 201 CV)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .65 .34 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
.5045 lw
0 lc
0 lj
3.8636 ml
[] 0 dsh
true sadj
1.83984 24.0898 mo
1.94531 24.1953 1.84424 2.03223 1.84424 2.03223 cv
74.415 2.03223 li
74.415 2.03223 74.415 13.918 74.415 24.0908 cv
1.83984 24.0898 li
cp
@
5.90576 56.3828 mo
8.69775 62.25 12.1484 66.9746 16.9932 70.9941 cv
38.1245 49.6289 li
58.4653 70.4922 li
62.6582 66.6582 66.7427 62.0156 69.6689 56.5156 cv
38.1001 26.1455 li
6.05078 56.4453 li
5.90576 56.3828 li
cp
/2 
<<
/Name (PANTONE 288 CV)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .65 0 .305 ] 
>>
/CSD add_res
1 /2 /CSD get_res sepcs
1 sep
f
.5042 lw
5.90576 56.3828 mo
8.69775 62.25 12.1484 66.9746 16.9932 70.9941 cv
38.1245 49.6289 li
58.4653 70.4922 li
62.6582 66.6582 66.7427 62.0156 69.6689 56.5156 cv
38.1001 26.1455 li
6.05078 56.4453 li
5.90576 56.3828 li
cp
@
.5045 lw
1.83984 24.2402 mo
74.4106 24.2305 li
@
56.2314 7.51367 mo
58.2065 7.51367 li
59.6543 7.18359 60.1821 6.34375 61.6665 6.34375 cv
62.7349 6.34375 63.2378 7.05273 64.0225 7.05273 cv
64.6851 7.05273 65.7036 6.29688 66.8198 6.29688 cv
67.9614 6.29688 68.5259 6.98242 69.2744 7.30078 cv
69.937 7.58496 70.8076 7.57031 71.728 7.57031 cv
71.7031 8.23242 71.728 8.625 71.728 9.17969 cv
71.728 9.74805 72.4888 9.52344 72.4888 10.4453 cv
72.4888 11.4141 71.5063 11.2246 71.5063 11.6152 cv
71.4702 15.2197 li
71.5195 15.6689 72.4272 15.7285 72.4272 16.4131 cv
72.4272 17.4297 71.4165 17.0781 71.4824 17.8789 cv
71.5313 18.4697 71.4824 19.7227 71.4824 19.7227 cv
69.5317 19.7227 56.9849 19.8379 56.3706 19.8145 cv
56.4077 18.4785 56.6152 18.5586 56.6611 17.9141 cv
56.6982 17.3945 55.5327 17.0752 55.5327 16.2012 cv
55.5327 15.5977 56.2314 15.6328 56.2925 15.0664 cv
56.2925 11.4727 li
56.2563 11 55.2012 10.7637 55.2373 10.0908 cv
55.2813 9.28516 56.2192 9.3877 56.2192 8.84961 cv
56.2192 8.61328 56.2437 7.73828 56.2314 7.51367 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
56.2314 7.51367 mo
58.2065 7.51367 li
59.6543 7.18359 60.1821 6.34375 61.6665 6.34375 cv
62.7349 6.34375 63.2378 7.05273 64.0225 7.05273 cv
64.6851 7.05273 65.7036 6.29688 66.8198 6.29688 cv
67.9614 6.29688 68.5259 6.98242 69.2744 7.30078 cv
69.937 7.58496 70.8076 7.57031 71.728 7.57031 cv
71.7031 8.23242 71.728 8.625 71.728 9.17969 cv
71.728 9.74805 72.4888 9.52344 72.4888 10.4453 cv
72.4888 11.4141 71.5063 11.2246 71.5063 11.6152 cv
71.4702 15.2197 li
71.5195 15.6689 72.4272 15.7285 72.4272 16.4131 cv
72.4272 17.4297 71.4165 17.0781 71.4824 17.8789 cv
71.5313 18.4697 71.4824 19.7227 71.4824 19.7227 cv
69.5317 19.7227 56.9849 19.8379 56.3706 19.8145 cv
56.4077 18.4785 56.6152 18.5586 56.6611 17.9141 cv
56.6982 17.3945 55.5327 17.0752 55.5327 16.2012 cv
55.5327 15.5977 56.2314 15.6328 56.2925 15.0664 cv
56.2925 11.4727 li
56.2563 11 55.2012 10.7637 55.2373 10.0908 cv
55.2813 9.28516 56.2192 9.3877 56.2192 8.84961 cv
56.2192 8.61328 56.2437 7.73828 56.2314 7.51367 cv
cp
1 /2 /CSD get_res sepcs
1 sep
@
57.8389 7.57324 mo
57.8389 7.57324 57.8638 15.6094 57.8389 17.501 cv
57.8389 17.501 69.5439 17.5244 70.0591 17.4766 cv
70.0591 15.3379 70.0474 7.51367 70.0474 7.51367 cv
@
63.9614 7.07617 mo
63.9614 17.5244 li
@
64.146 16.2363 mo
64.6611 16.2598 65.6069 16.6074 66.5264 16.8867 cv
67.7158 17.2461 68.978 16.9941 69.9121 17.1816 cv
70.2065 17.2402 64.146 17.2881 64.146 17.2881 cv
64.1699 16.1172 64.146 16.2363 64.146 16.2363 cv
cp
f
64.146 16.2363 mo
64.6611 16.2598 65.6069 16.6074 66.5264 16.8867 cv
67.7158 17.2461 68.978 16.9941 69.9121 17.1816 cv
70.2065 17.2402 64.146 17.2881 64.146 17.2881 cv
64.1699 16.1172 64.146 16.2363 64.146 16.2363 cv
cp
@
63.2739 17.7852 mo
63.2739 17.5234 63.5791 17.3115 63.9551 17.3115 cv
64.332 17.3115 64.6362 17.5234 64.6362 17.7852 cv
64.6362 18.0449 64.332 18.2568 63.9551 18.2568 cv
63.5791 18.2568 63.2739 18.0449 63.2739 17.7852 cv
cp
f
63.2739 17.7852 mo
63.2739 17.5234 63.5791 17.3115 63.9551 17.3115 cv
64.332 17.3115 64.6362 17.5234 64.6362 17.7852 cv
64.6362 18.0449 64.332 18.2568 63.9551 18.2568 cv
63.5791 18.2568 63.2739 18.0449 63.2739 17.7852 cv
cp
@
63.6211 16.2363 mo
63.106 16.2598 62.1602 16.6074 61.2407 16.8867 cv
60.0508 17.2461 58.7886 16.9941 57.855 17.1816 cv
57.5605 17.2402 63.6211 17.2881 63.6211 17.2881 cv
63.5967 16.1172 63.6211 16.2363 63.6211 16.2363 cv
cp
f
63.6211 16.2363 mo
63.106 16.2598 62.1602 16.6074 61.2407 16.8867 cv
60.0508 17.2461 58.7886 16.9941 57.855 17.1816 cv
57.5605 17.2402 63.6211 17.2881 63.6211 17.2881 cv
63.5967 16.1172 63.6211 16.2363 63.6211 16.2363 cv
cp
@
23.4058 20.7734 mo
23.6021 21.542 24.1787 22.0508 25.1235 22.0508 cv
26.8779 22.0508 28.5713 20.75 29.5894 20.0176 cv
30.3872 19.4502 31.209 18.8477 31.209 17.6064 cv
31.062 18.0791 li
31.062 18.0791 32.4365 16.709 35.8223 17.7949 cv
36.7632 18.0977 40.792 20.3594 41.6631 20.7266 cv
42.4116 21.0459 45.0352 22.9277 49.1353 22.2021 cv
49.1353 22.2021 55.395 21.3408 53.9966 14.8945 cv
52.9971 10.2871 53.3071 9.95996 53.6875 8.48242 cv
53.5405 8.41211 49.8594 7.58398 49.9575 12.6895 cv
48.3618 12.8555 46.3252 14.0605 47.6504 17.2285 cv
48.1904 16.4238 48.9141 15.5742 49.9082 15.5742 cv
50.5337 15.5742 51.1929 16.4727 51.2334 17.1338 cv
51.3315 18.7412 49.7119 19.4502 47.7002 19.1191 cv
46.6797 18.9512 45.7402 17.8213 44.334 16.8037 cv
44.5796 16.6855 44.8037 15.8574 44.8037 15.5264 cv
44.8037 14.7109 44.1045 14.333 43.6265 14.0605 cv
43.7246 13.7773 43.9199 13.3984 43.9199 13.1152 cv
43.9199 12.4648 43 12.5127 42.645 12.2646 cv
42.7915 12.0635 42.7915 12.1816 42.7915 11.8867 cv
42.7915 10.9404 42.939 10.4199 41.0249 10.4688 cv
41.1846 9.53418 40.9878 8.93164 40.3379 8.67188 cv
38.9146 8.48242 li
38.0313 8.31738 38.9121 8.02344 38.0967 7.2373 cv
37.3696 6.53516 36.1724 7.2373 36.1724 7.2373 cv
36.1724 6.58789 35.7241 6.07129 34.939 6.07129 cv
34.522 6.07129 34.0068 6.10742 33.7124 6.26074 cv
33.1235 6.7334 li
32.3872 6.7334 32.2031 6.07129 31.3564 6.07129 cv
30.5103 6.07129 30.1665 6.7334 29.835 7.1582 cv
29.2583 6.88672 29.1846 6.40234 28.4116 6.40234 cv
27.958 6.40234 27.8232 6.88672 27.6265 7.11133 cv
27.1235 7.66699 27.1592 8.24219 26.374 8.52637 cv
26.082 8.0127 li
26.0728 7.98047 26.064 7.94727 26.0562 7.91504 cv
24.9023 8.4707 22.3003 14.4033 22.3003 15.6201 cv
22.3003 16.7793 23.3076 16.2715 23.3076 17.5117 cv
23.3076 18.2441 22.228 18.7773 22.228 19.4023 cv
22.228 20.1953 23.1479 20.584 23.9453 20.584 cv
23.4058 20.7734 li
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
.5042 lw
23.4058 20.7734 mo
23.6021 21.542 24.1787 22.0508 25.1235 22.0508 cv
26.8779 22.0508 28.5713 20.75 29.5894 20.0176 cv
30.3872 19.4502 31.209 18.8477 31.209 17.6064 cv
31.062 18.0791 li
31.062 18.0791 32.4365 16.709 35.8223 17.7949 cv
36.7632 18.0977 40.792 20.3594 41.6631 20.7266 cv
42.4116 21.0459 45.0352 22.9277 49.1353 22.2021 cv
49.1353 22.2021 55.395 21.3408 53.9966 14.8945 cv
52.9971 10.2871 53.3071 9.95996 53.6875 8.48242 cv
53.5405 8.41211 49.8594 7.58398 49.9575 12.6895 cv
48.3618 12.8555 46.3252 14.0605 47.6504 17.2285 cv
48.1904 16.4238 48.9141 15.5742 49.9082 15.5742 cv
50.5337 15.5742 51.1929 16.4727 51.2334 17.1338 cv
51.3315 18.7412 49.7119 19.4502 47.7002 19.1191 cv
46.6797 18.9512 45.7402 17.8213 44.334 16.8037 cv
44.5796 16.6855 44.8037 15.8574 44.8037 15.5264 cv
44.8037 14.7109 44.1045 14.333 43.6265 14.0605 cv
43.7246 13.7773 43.9199 13.3984 43.9199 13.1152 cv
43.9199 12.4648 43 12.5127 42.645 12.2646 cv
42.7915 12.0635 42.7915 12.1816 42.7915 11.8867 cv
42.7915 10.9404 42.939 10.4199 41.0249 10.4688 cv
41.1846 9.53418 40.9878 8.93164 40.3379 8.67188 cv
38.9146 8.48242 li
38.0313 8.31738 38.9121 8.02344 38.0967 7.2373 cv
37.3696 6.53516 36.1724 7.2373 36.1724 7.2373 cv
36.1724 6.58789 35.7241 6.07129 34.939 6.07129 cv
34.522 6.07129 34.0068 6.10742 33.7124 6.26074 cv
33.1235 6.7334 li
32.3872 6.7334 32.2031 6.07129 31.3564 6.07129 cv
30.5103 6.07129 30.1665 6.7334 29.835 7.1582 cv
29.2583 6.88672 29.1846 6.40234 28.4116 6.40234 cv
27.958 6.40234 27.8232 6.88672 27.6265 7.11133 cv
27.1235 7.66699 27.1592 8.24219 26.374 8.52637 cv
26.082 8.0127 li
26.0728 7.98047 26.064 7.94727 26.0562 7.91504 cv
24.9023 8.4707 22.3003 14.4033 22.3003 15.6201 cv
22.3003 16.7793 23.3076 16.2715 23.3076 17.5117 cv
23.3076 18.2441 22.228 18.7773 22.228 19.4023 cv
22.228 20.1953 23.1479 20.584 23.9453 20.584 cv
23.4058 20.7734 li
cp
1 /2 /CSD get_res sepcs
1 sep
@
26.1172 15.7891 mo
26.1172 15.7891 27.3936 16.2813 27.3936 16.5459 cv
27.3936 16.9053 26.5688 17.3018 26.019 17.7754 cv
25.332 17.7754 li
25.5776 16.9707 25.332 17.2637 25.332 16.5459 cv
25.332 16.0068 25.9014 15.7891 26.1172 15.7891 cv
cp
f
.5045 lw
26.1172 15.7891 mo
26.1172 15.7891 27.3936 16.2813 27.3936 16.5459 cv
27.3936 16.9053 26.5688 17.3018 26.019 17.7754 cv
25.332 17.7754 li
25.5776 16.9707 25.332 17.2637 25.332 16.5459 cv
25.332 16.0068 25.9014 15.7891 26.1172 15.7891 cv
cp
@
30.7798 13.6133 mo
31.4424 13.2949 31.1353 12.4795 32.2026 12.4795 cv
33.1475 12.4795 33.5034 13.1406 34.3623 13.1406 cv
34.939 13.1406 35.3438 12.5742 36.1289 12.5742 cv
36.8281 12.5742 37.7485 13.5195 37.6016 14.6543 cv
37.6016 14.6543 40.0552 13.8496 39.957 16.498 cv
41.9199 15.8359 41.7241 17.4551 41.9199 18.2461 cv
42.1167 19.0039 43.3931 18.3887 43.1963 19.9961 cv
@
4.58643 7.57813 mo
6.56152 7.57813 li
8.00928 7.24609 8.53711 6.40723 10.022 6.40723 cv
11.0894 6.40723 11.5923 7.11719 12.3774 7.11719 cv
13.0396 7.11719 14.0586 6.36035 15.1748 6.36035 cv
16.3159 6.36035 16.8804 7.0459 17.6289 7.36523 cv
18.2915 7.64844 19.1626 7.63379 20.083 7.63379 cv
20.0581 8.29492 20.083 8.68848 20.083 9.24414 cv
20.083 9.81152 20.8433 9.58691 20.8433 10.5078 cv
20.8433 11.4775 19.8618 11.2891 19.8618 11.6777 cv
19.8252 15.2832 li
19.874 15.7324 20.7822 15.791 20.7822 16.4766 cv
20.7822 17.4941 19.771 17.1416 19.8374 17.9424 cv
19.8862 18.5332 19.8374 19.7861 19.8374 19.7861 cv
17.8862 19.7861 5.60449 19.7988 4.99121 19.7744 cv
5.02832 18.4395 4.97021 18.6211 5.01563 17.9785 cv
5.05225 17.458 3.88672 17.1387 3.88672 16.2637 cv
3.88672 15.6621 4.58643 15.6973 4.64746 15.1299 cv
4.64746 11.5371 li
4.61084 11.0645 3.55566 10.8281 3.59229 10.1543 cv
3.63623 9.34863 4.57422 9.45117 4.57422 8.91309 cv
4.57422 8.67676 4.59863 7.80273 4.58643 7.57813 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
4.58643 7.57813 mo
6.56152 7.57813 li
8.00928 7.24609 8.53711 6.40723 10.022 6.40723 cv
11.0894 6.40723 11.5923 7.11719 12.3774 7.11719 cv
13.0396 7.11719 14.0586 6.36035 15.1748 6.36035 cv
16.3159 6.36035 16.8804 7.0459 17.6289 7.36523 cv
18.2915 7.64844 19.1626 7.63379 20.083 7.63379 cv
20.0581 8.29492 20.083 8.68848 20.083 9.24414 cv
20.083 9.81152 20.8433 9.58691 20.8433 10.5078 cv
20.8433 11.4775 19.8618 11.2891 19.8618 11.6777 cv
19.8252 15.2832 li
19.874 15.7324 20.7822 15.791 20.7822 16.4766 cv
20.7822 17.4941 19.771 17.1416 19.8374 17.9424 cv
19.8862 18.5332 19.8374 19.7861 19.8374 19.7861 cv
17.8862 19.7861 5.60449 19.7988 4.99121 19.7744 cv
5.02832 18.4395 4.97021 18.6211 5.01563 17.9785 cv
5.05225 17.458 3.88672 17.1387 3.88672 16.2637 cv
3.88672 15.6621 4.58643 15.6973 4.64746 15.1299 cv
4.64746 11.5371 li
4.61084 11.0645 3.55566 10.8281 3.59229 10.1543 cv
3.63623 9.34863 4.57422 9.45117 4.57422 8.91309 cv
4.57422 8.67676 4.59863 7.80273 4.58643 7.57813 cv
cp
1 /2 /CSD get_res sepcs
1 sep
@
6.19336 7.63672 mo
6.19336 7.63672 6.21777 15.6738 6.19336 17.5645 cv
6.19336 17.5645 17.8989 17.5879 18.4141 17.541 cv
18.4141 15.4014 18.4014 7.57813 18.4014 7.57813 cv
@
12.3159 7.14063 mo
12.3159 17.5879 li
@
12.5 16.2998 mo
13.0156 16.3242 13.9619 16.6719 14.8809 16.9492 cv
16.0703 17.3105 17.3325 17.0576 18.2666 17.2451 cv
18.5615 17.3047 12.5 17.3516 12.5 17.3516 cv
12.5244 16.1816 12.5 16.2998 12.5 16.2998 cv
cp
f
12.5 16.2998 mo
13.0156 16.3242 13.9619 16.6719 14.8809 16.9492 cv
16.0703 17.3105 17.3325 17.0576 18.2666 17.2451 cv
18.5615 17.3047 12.5 17.3516 12.5 17.3516 cv
12.5244 16.1816 12.5 16.2998 12.5 16.2998 cv
cp
@
11.6289 17.8477 mo
11.6289 17.5869 11.9336 17.375 12.3101 17.375 cv
12.6865 17.375 12.9907 17.5869 12.9907 17.8477 cv
12.9907 18.1094 12.6865 18.3203 12.3101 18.3203 cv
11.9336 18.3203 11.6289 18.1094 11.6289 17.8477 cv
cp
f
11.6289 17.8477 mo
11.6289 17.5869 11.9336 17.375 12.3101 17.375 cv
12.6865 17.375 12.9907 17.5869 12.9907 17.8477 cv
12.9907 18.1094 12.6865 18.3203 12.3101 18.3203 cv
11.9336 18.3203 11.6289 18.1094 11.6289 17.8477 cv
cp
@
11.9761 16.2998 mo
11.4609 16.3242 10.5146 16.6719 9.59619 16.9492 cv
8.40576 17.3105 7.14404 17.0576 6.20947 17.2451 cv
5.91504 17.3047 11.9761 17.3516 11.9761 17.3516 cv
11.9517 16.1816 11.9761 16.2998 11.9761 16.2998 cv
cp
f
11.9761 16.2998 mo
11.4609 16.3242 10.5146 16.6719 9.59619 16.9492 cv
8.40576 17.3105 7.14404 17.0576 6.20947 17.2451 cv
5.91504 17.3047 11.9761 17.3516 11.9761 17.3516 cv
11.9517 16.1816 11.9761 16.2998 11.9761 16.2998 cv
cp
@
14.3169 53.9648 mo
14.3169 50.5938 17.1533 47.8594 20.6528 47.8594 cv
24.1523 47.8594 26.9893 50.5938 26.9893 53.9648 cv
26.9893 57.3359 24.1523 60.0664 20.6528 60.0664 cv
17.1533 60.0664 14.3169 57.3359 14.3169 53.9648 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
14.3169 53.9648 mo
14.3169 50.5938 17.1533 47.8594 20.6528 47.8594 cv
24.1523 47.8594 26.9893 50.5938 26.9893 53.9648 cv
26.9893 57.3359 24.1523 60.0664 20.6528 60.0664 cv
17.1533 60.0664 14.3169 57.3359 14.3169 53.9648 cv
cp
1 /2 /CSD get_res sepcs
1 sep
@
31.7368 39.3047 mo
31.7368 35.9336 34.5737 33.2012 38.0728 33.2012 cv
41.5723 33.2012 44.4087 35.9336 44.4087 39.3047 cv
44.4087 42.6758 41.5723 45.4063 38.0728 45.4063 cv
34.5737 45.4063 31.7368 42.6758 31.7368 39.3047 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
.5042 lw
31.7368 39.3047 mo
31.7368 35.9336 34.5737 33.2012 38.0728 33.2012 cv
41.5723 33.2012 44.4087 35.9336 44.4087 39.3047 cv
44.4087 42.6758 41.5723 45.4063 38.0728 45.4063 cv
34.5737 45.4063 31.7368 42.6758 31.7368 39.3047 cv
cp
1 /2 /CSD get_res sepcs
1 sep
@
48.1719 53.9648 mo
48.1719 50.5938 51.0088 47.8594 54.5088 47.8594 cv
58.0078 47.8594 60.8447 50.5938 60.8447 53.9648 cv
60.8447 57.3359 58.0078 60.0664 54.5088 60.0664 cv
51.0088 60.0664 48.1719 57.3359 48.1719 53.9648 cv
cp
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
.5045 lw
48.1719 53.9648 mo
48.1719 50.5938 51.0088 47.8594 54.5088 47.8594 cv
58.0078 47.8594 60.8447 50.5938 60.8447 53.9648 cv
60.8447 57.3359 58.0078 60.0664 54.5088 60.0664 cv
51.0088 60.0664 48.1719 57.3359 48.1719 53.9648 cv
cp
1 /2 /CSD get_res sepcs
1 sep
@
44.4282 16.5527 mo
42.8091 14.7705 41.3809 12.6777 41.1348 12.5742 cv
40.3374 12.2422 38.436 8.46094 33.3315 8.17773 cv
32.0356 8.10547 27.1543 8.5791 26.9868 9.82813 cv
@
31.2412 17.9277 mo
31.2603 17.8047 31.2705 17.6748 31.2705 17.5371 cv
31.2705 17.335 30.0742 17.4492 29.79 17.3652 cv
29.5938 17.3066 30.3159 17.0176 30.1904 17.0176 cv
30.9268 16.7344 32.813 15.9043 32.1538 15.2686 cv
31.5156 14.6543 31.1353 14.0039 30.7798 13.6133 cv
30.3013 13.0938 29.7363 12.8105 28.8652 12.8105 cv
28.1167 12.8105 26.9038 14.1084 26.4009 14.4629 cv
26.769 14.1084 27.8345 13.1875 27.8345 12.4316 cv
27.8345 10.7305 26.4731 9.25195 26.1172 7.8457 cv
@
23.9038 20.5156 mo
25.2529 20.5156 26.0137 20.4219 26.6523 20.0898 cv
27.3511 19.7246 28.6152 18.9316 28.9097 18.2461 cv
@
1 lw
1.82324 2.03223 mo
74.4463 2.03223 li
74.4463 2.03223 74.4463 37.709 74.4463 38.3379 cv
73.9551 67.9316 40.7915 83.4863 36.6196 83.3438 cv
32.2813 83.1953 1.7251 67.9746 1.81592 38.1846 cv
1.81738 37.6484 1.82324 2.03223 1.82324 2.03223 cv
cp
@
2 lw
4 ml
325.942 1.15967 mo
325.942 88.1602 li
.531853 .189731 .763821 .0158999 cmyk
@
392.962 55.7119 mo
402.438 58.1045 li
400.451 65.8896 396.877 71.8242 391.716 75.9111 cv
386.554 79.998 380.244 82.042 372.786 82.042 cv
365.068 82.042 358.791 80.4707 353.955 77.3271 cv
349.119 74.1846 345.438 69.6338 342.915 63.6738 cv
340.391 57.7139 339.129 51.3154 339.129 44.4756 cv
339.129 37.0186 340.554 30.5137 343.403 24.96 cv
346.253 19.4092 350.308 15.1904 355.567 12.3086 cv
360.826 9.42676 366.615 7.98535 372.934 7.98535 cv
380.098 7.98535 386.123 9.80957 391.008 13.4561 cv
395.893 17.1045 399.295 22.2334 401.217 28.8447 cv
391.887 31.042 li
390.226 25.833 387.815 22.0381 384.657 19.6611 cv
381.498 17.2842 377.525 16.0947 372.737 16.0947 cv
367.233 16.0947 362.634 17.4131 358.938 20.0518 cv
355.241 22.6885 352.644 26.2314 351.146 30.6768 cv
349.647 35.1221 348.899 39.7061 348.899 44.4268 cv
348.899 50.5176 349.786 55.833 351.562 60.376 cv
353.336 64.9199 356.096 68.3154 359.842 70.5615 cv
363.586 72.8096 367.641 73.9326 372.005 73.9326 cv
377.313 73.9326 381.807 72.4023 385.487 69.3408 cv
389.167 66.2803 391.658 61.7373 392.962 55.7119 cv
cp
f
414.31 80.8203 mo
414.31 9.20605 li
466.09 9.20605 li
466.09 17.6572 li
423.786 17.6572 li
423.786 39.5908 li
463.403 39.5908 li
463.403 47.9932 li
423.786 47.9932 li
423.786 72.3691 li
467.751 72.3691 li
467.751 80.8203 li
414.31 80.8203 li
cp
f
481.038 80.8203 mo
481.038 9.20605 li
532.818 9.20605 li
532.818 17.6572 li
490.515 17.6572 li
490.515 39.5908 li
530.132 39.5908 li
530.132 47.9932 li
490.515 47.9932 li
490.515 72.3691 li
534.479 72.3691 li
534.479 80.8203 li
481.038 80.8203 li
cp
f
565.792 80.8203 mo
565.792 17.6572 li
542.197 17.6572 li
542.197 9.20605 li
598.961 9.20605 li
598.961 17.6572 li
575.269 17.6572 li
575.269 80.8203 li
565.792 80.8203 li
cp
f
12.229 110.001 mo
14.0483 110.46 li
13.667 111.953 12.981 113.093 11.9902 113.878 cv
10.9995 114.662 9.78809 115.055 8.35645 115.055 cv
6.875 115.055 5.66992 114.754 4.74219 114.149 cv
3.81396 113.547 3.10693 112.673 2.62256 111.529 cv
2.13818 110.386 1.896 109.156 1.896 107.844 cv
1.896 106.412 2.16992 105.164 2.71631 104.098 cv
3.26318 103.032 4.0415 102.222 5.05127 101.669 cv
6.06055 101.116 7.17188 100.838 8.38477 100.838 cv
9.75977 100.838 10.916 101.189 11.854 101.89 cv
12.792 102.589 13.4448 103.574 13.814 104.844 cv
12.0229 105.265 li
11.7041 104.266 11.2412 103.536 10.6348 103.08 cv
10.0288 102.623 9.2666 102.396 8.34766 102.396 cv
7.29053 102.396 6.40771 102.648 5.69873 103.155 cv
4.98828 103.662 4.48975 104.341 4.20264 105.194 cv
3.91504 106.048 3.77148 106.929 3.77148 107.834 cv
3.77148 109.004 3.94189 110.024 4.28271 110.896 cv
4.62354 111.767 5.15283 112.419 5.87207 112.851 cv
6.59082 113.282 7.36914 113.498 8.20703 113.498 cv
9.2251 113.498 10.0884 113.204 10.7944 112.616 cv
11.501 112.029 11.9795 111.156 12.229 110.001 cv
cp
f
16.9795 114.82 mo
16.9795 101.074 li
26.9194 101.074 li
26.9194 102.695 li
18.7993 102.695 li
18.7993 106.905 li
26.4038 106.905 li
26.4038 108.52 li
18.7993 108.52 li
18.7993 113.197 li
27.2383 113.197 li
27.2383 114.82 li
16.9795 114.82 li
cp
f
30.3853 114.82 mo
30.3853 101.074 li
32.252 101.074 li
39.4712 111.865 li
39.4712 101.074 li
41.2153 101.074 li
41.2153 114.82 li
39.3496 114.82 li
32.1294 104.019 li
32.1294 114.82 li
30.3853 114.82 li
cp
f
48.4224 114.82 mo
48.4224 102.695 li
43.894 102.695 li
43.894 101.074 li
54.7896 101.074 li
54.7896 102.695 li
50.2417 102.695 li
50.2417 114.82 li
48.4224 114.82 li
cp
f
57.3457 114.82 mo
57.3457 101.074 li
67.2856 101.074 li
67.2856 102.695 li
59.165 102.695 li
59.165 106.905 li
66.7695 106.905 li
66.7695 108.52 li
59.165 108.52 li
59.165 113.197 li
67.6045 113.197 li
67.6045 114.82 li
57.3457 114.82 li
cp
f
72.6177 107.14 mo
76.5278 107.14 li
77.3589 107.14 78.0093 107.054 78.478 106.882 cv
78.9468 106.71 79.3032 106.436 79.5464 106.057 cv
79.7905 105.68 79.9126 105.268 79.9126 104.824 cv
79.9126 104.175 79.6768 103.641 79.2051 103.221 cv
78.7324 102.802 77.9868 102.593 76.9688 102.593 cv
72.6177 102.593 li
72.6177 107.14 li
cp
70.7983 114.82 mo
70.7983 101.074 li
76.8931 101.074 li
78.1187 101.074 79.0498 101.197 79.6875 101.444 cv
80.3252 101.691 80.8345 102.127 81.2158 102.752 cv
81.5972 103.377 81.7876 104.067 81.7876 104.824 cv
81.7876 105.8 81.4717 106.621 80.8403 107.291 cv
80.209 107.959 79.2349 108.385 77.9155 108.566 cv
78.3965 108.796 78.7622 109.024 79.0122 109.251 cv
79.5435 109.737 80.0469 110.347 80.522 111.079 cv
82.9131 114.82 li
80.6255 114.82 li
78.8066 111.961 li
78.2744 111.136 77.8374 110.504 77.4937 110.066 cv
77.1494 109.629 76.8423 109.322 76.5698 109.147 cv
76.2979 108.971 76.0215 108.85 75.7402 108.781 cv
75.5337 108.739 75.1958 108.715 74.7275 108.715 cv
72.6177 108.715 li
72.6177 114.82 li
70.7983 114.82 li
cp
f
92.6021 108.153 mo
92.6021 109.81 93.0483 111.114 93.9385 112.067 cv
94.8296 113.021 95.9463 113.498 97.291 113.498 cv
98.6592 113.498 99.7866 113.017 100.671 112.054 cv
101.556 111.092 101.998 109.725 101.998 107.955 cv
101.998 106.837 101.809 105.86 101.431 105.026 cv
101.052 104.19 100.5 103.544 99.771 103.084 cv
99.043 102.626 98.2251 102.396 97.3188 102.396 cv
96.0313 102.396 94.9233 102.837 93.9951 103.723 cv
93.0664 104.607 92.6021 106.083 92.6021 108.153 cv
cp
90.7271 108.126 mo
90.7271 105.843 91.3398 104.057 92.5649 102.766 cv
93.79 101.475 95.3716 100.829 97.3096 100.829 cv
98.5786 100.829 99.7222 101.133 100.741 101.739 cv
101.76 102.346 102.537 103.191 103.072 104.276 cv
103.606 105.36 103.874 106.59 103.874 107.965 cv
103.874 109.36 103.592 110.606 103.029 111.707 cv
102.467 112.807 101.67 113.64 100.639 114.206 cv
99.6074 114.771 98.4941 115.055 97.2998 115.055 cv
96.0059 115.055 94.8496 114.742 93.8306 114.116 cv
92.8115 113.491 92.04 112.638 91.5146 111.557 cv
90.9897 110.475 90.7271 109.331 90.7271 108.126 cv
cp
f
106.964 114.82 mo
106.964 101.074 li
116.238 101.074 li
116.238 102.695 li
108.783 102.695 li
108.783 106.952 li
115.234 106.952 li
115.234 108.575 li
108.783 108.575 li
108.783 114.82 li
106.964 114.82 li
cp
f
125.279 114.82 mo
125.279 101.074 li
135.219 101.074 li
135.219 102.695 li
127.098 102.695 li
127.098 106.905 li
134.703 106.905 li
134.703 108.52 li
127.098 108.52 li
127.098 113.197 li
135.538 113.197 li
135.538 114.82 li
125.279 114.82 li
cp
f
137.306 114.82 mo
142.624 107.656 li
137.935 101.074 li
140.101 101.074 li
142.595 104.599 li
143.113 105.33 143.482 105.894 143.701 106.288 cv
144.007 105.787 144.37 105.265 144.789 104.721 cv
147.555 101.074 li
149.534 101.074 li
144.705 107.553 li
149.909 114.82 li
147.658 114.82 li
144.198 109.916 li
144.004 109.636 143.804 109.328 143.598 108.997 cv
143.292 109.498 143.073 109.84 142.942 110.029 cv
139.491 114.82 li
137.306 114.82 li
cp
f
161.973 110.001 mo
163.792 110.46 li
163.411 111.953 162.725 113.093 161.734 113.878 cv
160.744 114.662 159.532 115.055 158.101 115.055 cv
156.619 115.055 155.414 114.754 154.486 114.149 cv
153.558 113.547 152.852 112.673 152.367 111.529 cv
151.882 110.386 151.64 109.156 151.64 107.844 cv
151.64 106.412 151.914 105.164 152.461 104.098 cv
153.007 103.032 153.786 102.222 154.796 101.669 cv
155.805 101.116 156.916 100.838 158.128 100.838 cv
159.504 100.838 160.661 101.189 161.598 101.89 cv
162.536 102.589 163.189 103.574 163.558 104.844 cv
161.767 105.265 li
161.449 104.266 160.985 103.536 160.379 103.08 cv
159.772 102.623 159.01 102.396 158.091 102.396 cv
157.035 102.396 156.152 102.648 155.442 103.155 cv
154.733 103.662 154.234 104.341 153.947 105.194 cv
153.659 106.048 153.515 106.929 153.515 107.834 cv
153.515 109.004 153.686 110.024 154.027 110.896 cv
154.367 111.767 154.897 112.419 155.616 112.851 cv
156.334 113.282 157.113 113.498 157.951 113.498 cv
158.97 113.498 159.832 113.204 160.539 112.616 cv
161.245 112.029 161.723 111.156 161.973 110.001 cv
cp
f
166.724 114.82 mo
166.724 101.074 li
176.663 101.074 li
176.663 102.695 li
168.543 102.695 li
168.543 106.905 li
176.148 106.905 li
176.148 108.52 li
168.543 108.52 li
168.543 113.197 li
176.982 113.197 li
176.982 114.82 li
166.724 114.82 li
cp
f
180.073 114.82 mo
180.073 101.074 li
181.892 101.074 li
181.892 113.197 li
188.662 113.197 li
188.662 114.82 li
180.073 114.82 li
cp
f
191.407 114.82 mo
191.407 101.074 li
193.225 101.074 li
193.225 113.197 li
199.996 113.197 li
199.996 114.82 li
191.407 114.82 li
cp
f
202.852 114.82 mo
202.852 101.074 li
212.791 101.074 li
212.791 102.695 li
204.672 102.695 li
204.672 106.905 li
212.275 106.905 li
212.275 108.52 li
204.672 108.52 li
204.672 113.197 li
213.11 113.197 li
213.11 114.82 li
202.852 114.82 li
cp
f
216.257 114.82 mo
216.257 101.074 li
218.123 101.074 li
225.343 111.865 li
225.343 101.074 li
227.087 101.074 li
227.087 114.82 li
225.222 114.82 li
218.002 104.019 li
218.002 114.82 li
216.257 114.82 li
cp
f
240.605 110.001 mo
242.424 110.46 li
242.043 111.953 241.356 113.093 240.366 113.878 cv
239.376 114.662 238.165 115.055 236.732 115.055 cv
235.25 115.055 234.046 114.754 233.119 114.149 cv
232.189 113.547 231.483 112.673 230.999 111.529 cv
230.515 110.386 230.272 109.156 230.272 107.844 cv
230.272 106.412 230.546 105.164 231.092 104.098 cv
231.639 103.032 232.417 102.222 233.428 101.669 cv
234.438 101.116 235.548 100.838 236.76 100.838 cv
238.137 100.838 239.292 101.189 240.23 101.89 cv
241.167 102.589 241.821 103.574 242.19 104.844 cv
240.399 105.265 li
240.08 104.266 239.617 103.536 239.01 103.08 cv
238.405 102.623 237.643 102.396 236.723 102.396 cv
235.667 102.396 234.785 102.648 234.074 103.155 cv
233.365 103.662 232.866 104.341 232.578 105.194 cv
232.292 106.048 232.147 106.929 232.147 107.834 cv
232.147 109.004 232.317 110.024 232.659 110.896 cv
233 111.767 233.529 112.419 234.249 112.851 cv
234.966 113.282 235.744 113.498 236.583 113.498 cv
237.601 113.498 238.464 113.204 239.171 112.616 cv
239.877 112.029 240.355 111.156 240.605 110.001 cv
cp
f
245.356 114.82 mo
245.356 101.074 li
255.294 101.074 li
255.294 102.695 li
247.176 102.695 li
247.176 106.905 li
254.78 106.905 li
254.78 108.52 li
247.176 108.52 li
247.176 113.197 li
255.614 113.197 li
255.614 114.82 li
245.356 114.82 li
cp
f
265.079 114.82 mo
265.079 101.074 li
266.897 101.074 li
266.897 114.82 li
265.079 114.82 li
cp
f
270.739 114.82 mo
270.739 101.074 li
272.605 101.074 li
279.824 111.865 li
279.824 101.074 li
281.569 101.074 li
281.569 114.82 li
279.703 114.82 li
272.482 104.019 li
272.482 114.82 li
270.739 114.82 li
cp
f
291.304 114.82 mo
291.304 101.074 li
301.242 101.074 li
301.242 102.695 li
293.123 102.695 li
293.123 106.905 li
300.727 106.905 li
300.727 108.52 li
293.123 108.52 li
293.123 113.197 li
301.563 113.197 li
301.563 114.82 li
291.304 114.82 li
cp
f
304.71 114.82 mo
304.71 101.074 li
306.575 101.074 li
313.795 111.865 li
313.795 101.074 li
315.54 101.074 li
315.54 114.82 li
313.674 114.82 li
306.453 104.019 li
306.453 114.82 li
304.71 114.82 li
cp
f
323.18 114.82 mo
317.853 101.074 li
319.821 101.074 li
323.395 111.06 li
323.683 111.86 323.922 112.61 324.116 113.311 cv
324.329 112.56 324.576 111.81 324.857 111.06 cv
328.571 101.074 li
330.427 101.074 li
325.045 114.82 li
323.18 114.82 li
cp
f
333.022 114.82 mo
333.022 101.074 li
334.84 101.074 li
334.84 114.82 li
333.022 114.82 li
cp
f
340.546 107.14 mo
344.457 107.14 li
345.287 107.14 345.937 107.054 346.406 106.882 cv
346.876 106.71 347.231 106.436 347.476 106.057 cv
347.72 105.68 347.842 105.268 347.842 104.824 cv
347.842 104.175 347.605 103.641 347.133 103.221 cv
346.662 102.802 345.916 102.593 344.897 102.593 cv
340.546 102.593 li
340.546 107.14 li
cp
338.727 114.82 mo
338.727 101.074 li
344.822 101.074 li
346.047 101.074 346.979 101.197 347.615 101.444 cv
348.254 101.691 348.763 102.127 349.145 102.752 cv
349.525 103.377 349.717 104.067 349.717 104.824 cv
349.717 105.8 349.401 106.621 348.77 107.291 cv
348.137 107.959 347.163 108.385 345.844 108.566 cv
346.325 108.796 346.69 109.024 346.94 109.251 cv
347.473 109.737 347.976 110.347 348.45 111.079 cv
350.842 114.82 li
348.554 114.82 li
346.735 111.961 li
346.204 111.136 345.767 110.504 345.422 110.066 cv
345.079 109.629 344.771 109.322 344.499 109.147 cv
344.226 108.971 343.95 108.85 343.668 108.781 cv
343.462 108.739 343.125 108.715 342.655 108.715 cv
340.546 108.715 li
340.546 114.82 li
338.727 114.82 li
cp
f
354.543 108.153 mo
354.543 109.81 354.988 111.114 355.879 112.067 cv
356.77 113.021 357.887 113.498 359.231 113.498 cv
360.6 113.498 361.728 113.017 362.611 112.054 cv
363.496 111.092 363.938 109.725 363.938 107.955 cv
363.938 106.837 363.75 105.86 363.371 105.026 cv
362.992 104.19 362.439 103.544 361.711 103.084 cv
360.983 102.626 360.165 102.396 359.26 102.396 cv
357.971 102.396 356.863 102.837 355.935 103.723 cv
355.006 104.607 354.543 106.083 354.543 108.153 cv
cp
352.667 108.126 mo
352.667 105.843 353.28 104.057 354.505 102.766 cv
355.731 101.475 357.312 100.829 359.249 100.829 cv
360.519 100.829 361.663 101.133 362.682 101.739 cv
363.7 102.346 364.478 103.191 365.013 104.276 cv
365.547 105.36 365.813 106.59 365.813 107.965 cv
365.813 109.36 365.532 110.606 364.97 111.707 cv
364.407 112.807 363.61 113.64 362.578 114.206 cv
361.547 114.771 360.435 115.055 359.24 115.055 cv
357.946 115.055 356.789 114.742 355.771 114.116 cv
354.752 113.491 353.98 112.638 353.455 111.557 cv
352.93 110.475 352.667 109.331 352.667 108.126 cv
cp
f
368.792 114.82 mo
368.792 101.074 li
370.657 101.074 li
377.878 111.865 li
377.878 101.074 li
379.622 101.074 li
379.622 114.82 li
377.757 114.82 li
370.535 104.019 li
370.535 114.82 li
368.792 114.82 li
cp
f
383.276 114.82 mo
383.276 101.074 li
386.014 101.074 li
389.268 110.807 li
389.567 111.714 389.787 112.391 389.924 112.841 cv
390.08 112.342 390.323 111.606 390.655 110.638 cv
393.946 101.074 li
396.395 101.074 li
396.395 114.82 li
394.641 114.82 li
394.641 103.315 li
390.646 114.82 li
389.005 114.82 li
385.029 103.116 li
385.029 114.82 li
383.276 114.82 li
cp
f
400.019 114.82 mo
400.019 101.074 li
409.957 101.074 li
409.957 102.695 li
401.838 102.695 li
401.838 106.905 li
409.441 106.905 li
409.441 108.52 li
401.838 108.52 li
401.838 113.197 li
410.276 113.197 li
410.276 114.82 li
400.019 114.82 li
cp
f
413.424 114.82 mo
413.424 101.074 li
415.29 101.074 li
422.51 111.865 li
422.51 101.074 li
424.255 101.074 li
424.255 114.82 li
422.388 114.82 li
415.168 104.019 li
415.168 114.82 li
413.424 114.82 li
cp
f
431.461 114.82 mo
431.461 102.695 li
426.932 102.695 li
426.932 101.074 li
437.827 101.074 li
437.827 102.695 li
433.279 102.695 li
433.279 114.82 li
431.461 114.82 li
cp
f
441.379 109.175 mo
446.038 109.175 li
444.604 105.367 li
444.166 104.212 443.841 103.262 443.629 102.519 cv
443.454 103.398 443.208 104.275 442.889 105.144 cv
441.379 109.175 li
cp
437.413 114.82 mo
442.691 101.074 li
444.65 101.074 li
450.277 114.82 li
448.204 114.82 li
446.602 110.657 li
440.853 110.657 li
439.344 114.82 li
437.413 114.82 li
cp
f
452.308 114.82 mo
452.308 101.074 li
454.127 101.074 li
454.127 113.197 li
460.896 113.197 li
460.896 114.82 li
452.308 114.82 li
cp
f
472.143 114.82 mo
472.143 102.695 li
467.613 102.695 li
467.613 101.074 li
478.508 101.074 li
478.508 102.695 li
473.961 102.695 li
473.961 114.82 li
472.143 114.82 li
cp
f
482.004 108.153 mo
482.004 109.81 482.449 111.114 483.34 112.067 cv
484.23 113.021 485.349 113.498 486.692 113.498 cv
488.062 113.498 489.188 113.017 490.073 112.054 cv
490.957 111.092 491.399 109.725 491.399 107.955 cv
491.399 106.837 491.211 105.86 490.832 105.026 cv
490.454 104.19 489.9 103.544 489.172 103.084 cv
488.444 102.626 487.627 102.396 486.72 102.396 cv
485.432 102.396 484.323 102.837 483.396 103.723 cv
482.468 104.607 482.004 106.083 482.004 108.153 cv
cp
480.129 108.126 mo
480.129 105.843 480.741 104.057 481.967 102.766 cv
483.192 101.475 484.773 100.829 486.711 100.829 cv
487.979 100.829 489.125 101.133 490.143 101.739 cv
491.162 102.346 491.938 103.191 492.474 104.276 cv
493.008 105.36 493.274 106.59 493.274 107.965 cv
493.274 109.36 492.994 110.606 492.432 111.707 cv
491.868 112.807 491.07 113.64 490.04 114.206 cv
489.008 114.771 487.896 115.055 486.701 115.055 cv
485.408 115.055 484.25 114.742 483.232 114.116 cv
482.214 113.491 481.441 112.638 480.915 111.557 cv
480.391 110.475 480.129 109.331 480.129 108.126 cv
cp
f
494.874 114.82 mo
500.191 107.656 li
495.503 101.074 li
497.668 101.074 li
500.164 104.599 li
500.682 105.33 501.051 105.894 501.27 106.288 cv
501.575 105.787 501.938 105.265 502.356 104.721 cv
505.123 101.074 li
507.103 101.074 li
502.272 107.553 li
507.478 114.82 li
505.227 114.82 li
501.766 109.916 li
501.572 109.636 501.372 109.328 501.167 108.997 cv
500.86 109.498 500.641 109.84 500.509 110.029 cv
497.059 114.82 li
494.874 114.82 li
cp
f
510.043 114.82 mo
510.043 101.074 li
511.861 101.074 li
511.861 114.82 li
510.043 114.82 li
cp
f
525.529 110.001 mo
527.35 110.46 li
526.967 111.953 526.281 113.093 525.291 113.878 cv
524.299 114.662 523.088 115.055 521.657 115.055 cv
520.176 115.055 518.971 114.754 518.042 114.149 cv
517.113 113.547 516.407 112.673 515.923 111.529 cv
515.438 110.386 515.196 109.156 515.196 107.844 cv
515.196 106.412 515.47 105.164 516.017 104.098 cv
516.564 103.032 517.342 102.222 518.352 101.669 cv
519.361 101.116 520.473 100.838 521.686 100.838 cv
523.061 100.838 524.217 101.189 525.154 101.89 cv
526.093 102.589 526.745 103.574 527.115 104.844 cv
525.323 105.265 li
525.005 104.266 524.542 103.536 523.937 103.08 cv
523.329 102.623 522.566 102.396 521.648 102.396 cv
520.591 102.396 519.708 102.648 518.998 103.155 cv
518.289 103.662 517.79 104.341 517.503 105.194 cv
517.215 106.048 517.072 106.929 517.072 107.834 cv
517.072 109.004 517.241 110.024 517.583 110.896 cv
517.923 111.767 518.453 112.419 519.172 112.851 cv
519.891 113.282 520.67 113.498 521.508 113.498 cv
522.525 113.498 523.389 113.204 524.096 112.616 cv
524.801 112.029 525.279 111.156 525.529 110.001 cv
cp
f
531.563 108.153 mo
531.563 109.81 532.01 111.114 532.9 112.067 cv
533.792 113.021 534.909 113.498 536.253 113.498 cv
537.622 113.498 538.749 113.017 539.633 112.054 cv
540.517 111.092 540.959 109.725 540.959 107.955 cv
540.959 106.837 540.771 105.86 540.392 105.026 cv
540.015 104.19 539.461 103.544 538.732 103.084 cv
538.005 102.626 537.188 102.396 536.28 102.396 cv
534.992 102.396 533.885 102.837 532.957 103.723 cv
532.028 104.607 531.563 106.083 531.563 108.153 cv
cp
529.689 108.126 mo
529.689 105.843 530.302 104.057 531.527 102.766 cv
532.752 101.475 534.333 100.829 536.271 100.829 cv
537.54 100.829 538.685 101.133 539.703 101.739 cv
540.723 102.346 541.499 103.191 542.034 104.276 cv
542.568 105.36 542.835 106.59 542.835 107.965 cv
542.835 109.36 542.555 110.606 541.992 111.707 cv
541.43 112.807 540.631 113.64 539.601 114.206 cv
538.569 114.771 537.456 115.055 536.262 115.055 cv
534.968 115.055 533.812 114.742 532.793 114.116 cv
531.774 113.491 531.002 112.638 530.477 111.557 cv
529.951 110.475 529.689 109.331 529.689 108.126 cv
cp
f
545.759 114.82 mo
545.759 101.074 li
547.577 101.074 li
547.577 113.197 li
554.348 113.197 li
554.348 114.82 li
545.759 114.82 li
cp
f
558.487 108.153 mo
558.487 109.81 558.933 111.114 559.824 112.067 cv
560.716 113.021 561.832 113.498 563.177 113.498 cv
564.545 113.498 565.672 113.017 566.557 112.054 cv
567.44 111.092 567.883 109.725 567.883 107.955 cv
567.883 106.837 567.694 105.86 567.315 105.026 cv
566.938 104.19 566.385 103.544 565.656 103.084 cv
564.929 102.626 564.111 102.396 563.204 102.396 cv
561.916 102.396 560.808 102.837 559.88 103.723 cv
558.952 104.607 558.487 106.083 558.487 108.153 cv
cp
556.613 108.126 mo
556.613 105.843 557.225 104.057 558.451 102.766 cv
559.676 101.475 561.257 100.829 563.195 100.829 cv
564.463 100.829 565.608 101.133 566.626 101.739 cv
567.646 102.346 568.423 103.191 568.957 104.276 cv
569.492 105.36 569.759 106.59 569.759 107.965 cv
569.759 109.36 569.479 110.606 568.916 111.707 cv
568.353 112.807 567.555 113.64 566.524 114.206 cv
565.491 114.771 564.38 115.055 563.186 115.055 cv
561.892 115.055 560.734 114.742 559.717 114.116 cv
558.698 113.491 557.925 112.638 557.399 111.557 cv
556.875 110.475 556.613 109.331 556.613 108.126 cv
cp
f
579.189 109.428 mo
579.189 107.815 li
585.012 107.807 li
585.012 112.907 li
584.119 113.619 583.196 114.155 582.245 114.516 cv
581.296 114.875 580.319 115.055 579.321 115.055 cv
577.971 115.055 576.743 114.765 575.64 114.188 cv
574.537 113.609 573.704 112.772 573.142 111.678 cv
572.579 110.585 572.297 109.362 572.297 108.012 cv
572.297 106.675 572.578 105.426 573.137 104.266 cv
573.696 103.107 574.5 102.246 575.552 101.684 cv
576.602 101.121 577.812 100.838 579.18 100.838 cv
580.173 100.838 581.072 100.999 581.876 101.322 cv
582.679 101.645 583.309 102.092 583.766 102.667 cv
584.221 103.242 584.568 103.992 584.806 104.918 cv
583.165 105.367 li
582.958 104.668 582.702 104.118 582.396 103.718 cv
582.09 103.317 581.653 102.998 581.083 102.756 cv
580.515 102.516 579.884 102.396 579.189 102.396 cv
578.356 102.396 577.639 102.522 577.032 102.775 cv
576.427 103.028 575.937 103.361 575.565 103.774 cv
575.193 104.186 574.904 104.64 574.697 105.134 cv
574.349 105.984 574.172 106.905 574.172 107.899 cv
574.172 109.125 574.384 110.15 574.806 110.975 cv
575.228 111.801 575.841 112.413 576.648 112.813 cv
577.454 113.213 578.312 113.414 579.217 113.414 cv
580.006 113.414 580.774 113.262 581.524 112.958 cv
582.274 112.656 582.844 112.331 583.231 111.988 cv
583.231 109.428 li
579.189 109.428 li
cp
f
592.22 114.82 mo
592.22 108.997 li
586.921 101.074 li
589.134 101.074 li
591.845 105.219 li
592.345 105.994 592.811 106.769 593.241 107.544 cv
593.654 106.824 594.153 106.015 594.741 105.114 cv
597.404 101.074 li
599.524 101.074 li
594.038 108.997 li
594.038 114.82 li
592.22 114.82 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Mary Leonard) ()%%Title: (CEET-Perelman logo_white-green.eps)%%CreationDate: 9/19/11 11:48 AM%%Canvassize: 16383%AI9_DataStream%Gb!Q;q-"`LZL<2B^OmC4B!Qb)+H0n@AdAM@JV4kZJ,hL[B'm"O+8=H,<CndAgYM8jYeRlt4mP2_k%@gaWDk@t+;G5&c&]mC;r_;]%q=e@TbF>AqG;LskfljMpfR5f[\&0LaVWKiRQ7Md>$YA.WB50L*^aa'0k/+;[Rs,sXog\,Se\%rlgQgnoZdiC+=8o0VncuQ-pnj@l%XM;D)s-;JdWSK`#$L<'4c1]UZICn0YX`a3G<mhQ/NLPogVjI:uO4W-4CGB`g0#H`[<I*/M\tE7)bi$1Sh93ier>7#dhs\7qf5:H&%]qNcMohGaH!Bnhq:0'R4S`X_7a5ZXciRajBXh4[%WgqC#_)V\k]R2"8UOnb`bC-4q`OqMgo306ji?,su<6]1:-#E@s[,N%&!\T^j%9$Gqj"BAhUR[qqaFY]V*-.g]V<k%OB-@O5L_gi93VS`NQY>4?n:[LoXep2!gI`ucJ\!h6=[FR-qC;KL7G+S\a?dc]8a_&N+emI<@%C7RDj$nr*;C\fsg.mNWg0^D\1pZN"[a7_*dbr(,/P+V#h4k9S?R,>$tmcuIE2X@Kjl-oY4+6]#eC$]4#c,n"!]lhnNl9Jtgnep=)%2"0```!$#4gFkGF$B>&6jhIn4f37L6hLTgrI/-$*^`!J^!5>Pcri*B\]JffPkcN_:g,u9>0'J<+ATaqF2dIZs=a&Y@W+s3Pbj\#a%HLNSg(MgiJK$&(1*<QNg[@SG2)N21nf58O[40>E-ak,/Nqa]hN"am3Q%)TU^U[<0g%GkYu@[.$uK;OnD:8,(t`dO]ZMF<47<7h1G%BE/.J1`t@oi\Pub5Q>t<4f?&5%\$;kWI]3S%d=r$k4n$?^=m9Y5Ml)P^RMdnqL.tDT)[NEh*J=DdI!S&?"YKkjFI/MqXN(7QYK<7%1T;,*YZg]^q\"?OIg5r-qq%>1h]R7+cPa=EpoFDBHrI$[8?Hm(s&NpKor]4/;5;^b'/"%&55bZBe::#oDM_r'[+9L*iE:*S[mckS%cZ":@lWrE4*AU&6^X;mk5N]^=RkLMin5l?-%MO`]s#\poVB7XT)N6r;/b&niQ9YfTf<k[VP?WPjs-mf-e6ZIQ*a5t\a/?PZ#%G:_%/[=d@@B=rbDjrCUm8qD*$?BBeFe8#-lDOZh48%44g5m5fT,OrAj@SRVhDS`u:^P::51\TU<+kB6RnB90$LJcDN2l)G=@ed8IK.)q%hr'OHq<%p'S+;$'q6(#$O^A6+1n$\EnmUpnStF>ofC(aC!J575_&u"h_PIIu.utfhnuMgYB4sLZo-3cd4^UC&C-UOg:kd^_S9@/G%)leXAqliq55M`:ZBJlFJfmdqe(GA91r^3W(oB?aooig[Rr#u]U$![@6ZZTWia"LRM:.(]qB_dR9Ea&GuI/!fj^[bG)+Fj&ObMNDJ%EK[(0pJ?#2GCD!5b86FYAt[kS4LLVbb2pgfShU<l_;,?%;Fa$<Ka2&Y*/*[lr-:Wl;oV[K2XY!*AJp,(bK(P)B73b?`4C\8#uM#W%'KWN#U+Te8CY-&pW],t+n,GW8PQ0R&H;@RK6ct\'riY/+d=As(haU'+'qhsqQd-+15+b$T+\Baf/Us";@k[bPM>DPX#PR%D%=S:^%<H<K=0jHcRf`q=]HFA_Z8f*Lj[LXJLoO/u=)nPDJ@b@!=^KAfnV$OI8m)r@/3DA.l?lP;V;U:?i\Fp!ENB41tj4di-P:5a(oK5a0%H1=,0Y&imuh6:Fh,uiU=j:o?lU&m'<cB+0Al:No<!;q$nC*:;%UmWAM5@ULHTVZ1o6;1VHC1@PcNL8;Lc]0peiro;-O"++_\Pa5H%(LL'k6$+_b@p^sM'!(gm*/9=p?p`tfYCREuZdu,;$9.))Dclo3QQj@Wre<dgGn8%5n)'^/.#J?j(.[e]0.hp7?0&EEIZ?ZNd"WF6%#>k<"fjU!,jNAqD)IRJ@[dt2NQ9b9%bHHD;Re`-cB[3`Xs/ANRKV@Mb5Tt%,gJ>!p0=4bJ&QU!pch`'trk!5XHhjUu%T(49k9*02%S$ggqrXLM9ilC[Sg7$Ssobu:hfluQN<ia52;Uk9RIla\r9k-(1p5uFR_+0-+S7+VqKg6K-AqoFQ5%;nb[_dA!CXj+^(08=Vj0)Y`%<7&RgD:;6"(T`Ht0mn\&\t6YI\DXpF]R+OFFRfsd:lnTIWSKu&)Uqn;_^t8T/Z=[m32j`_.[W5bR_6"9Z!Z.<AU)=f2P;SnHIfC(%3bKF2$h`QDU[n\b9(.V1e-n[Qd=/.(lA`E*TEe9e^g-u/HhKdh\`\o"KBlZ@$r.>XaDn9;Y.+D1kJ,UJmc:kFT/sC7VjF=,5@I$Y%Z=:A.[4G[e2'+qr&,#j?o.??to#3ofY^'T:PlSUjJ%r]Si9Q)##FP5YUJl)T/W,%%'dKYa.<YC[oQ&ih8!kFo(B<Xso>]t"37V^"%r)IO?QfP.U(&^ct(rG#6jVje@#nb2ccMt)G%NPH5)$og863__G2e@T(,@\k_a*%8I,#6H<2II"s>DG%khW%O-O(eBFUkG=3M+lrZ%Wkk9gL%0N8lMm`8^A(dlV2e"E_]4ZR]-B8nIo_a2qtP-8?,MjX._;k&ZEiN*I9f*FrenAYs2-='s8LW"nS\7H?3]e`Vn;urZIlCo%P,[2:T[5'Gos+Mgn<dd0M3@mA+m_4d?h/W[f=:hQFPhAf1+Zc$5<C>^ZV-<sS%V;a:R2Uko:I)KJu.]A*7PFmf6I;?,[:8sit4f%%Ug`%:4.m:\Z%U)AA/SDADuL+Y!0V`-c&^F]SRTY=iu.pa;uc)7][f0PHVfNQm>!o:5:-F^;AS[u$Ib'>%dNda+0URt#5oEPNMel5%APcU$[=cL>eQ^7.d`K[RQgG*#d;ckMI]J[?&*'*rOKH"kmYLR8MOrb/U6\dg2-U!gB`IM^kq.D:7/ccHI&m5HA)JlTPnp%>03Vns%>5/J/CUWfC[?k(W0"Ri'5C!Y'6I!:1XZ&'@7r>Gl+#H2C02IRR^.j&c?FZq<-*<s[.>uO<HeTVq0*-(=JI'VPpf?%:;JYaNrsj5/%W.knI$E*Q`h-(%eWAa3[0/usK`?:UG(._MFm;8jLeZZ`^g5E(jXssY8YK]#F4rjQ^AiB26%?c4`f1YnHE;r?r)YFT?[V0(&XlIn.%;9Fh8q=QnXB+cppeZ$u[8pu[HH$;a[>@CYAm.-e2D<\5!K!sO?&;h6t%bG#nU-bNR>j\6AW\kiD<7cSJHFj>=QTg)T@]_]<Wa3Y"%['K?XYc@s:hCUja^C5RboQj(G?dTVa\Ts+L4*eqOb*932Ls0PbW(qEj2-INUib1113mKrI8:!,I:VihP84>re;E%KA?l+l(:e4Tr%O?,rG;H/n6e][,L3c0PGPNi]eV0?+Nq^3*$(r"'R";+:SaEl0]<(5MK6l>oZ/D\\qod0\aF@I1Q_T>40/fVDN<EcY:R>Jn?pId+3%X5;q&+U[5\0<B_JM:mlO(Ydb]knR54T9Zb2Bds(aILB*X&TXMY/tRMR3kh3-s(/"04K.DEeboC<&f`I^RtC<0J!.s*'&o!R2[HcO%%6l]F?1kZg0;X"r,H\UD`q0f\pbQ5_W\R_+o6-1ZHYI$YeD#E6b1X.Y?g(h31hsk9[oV`"o+XeMT_DtIfkGKYOmQB;-!TrmmFk$U%=a$a"Cq$)u`3TDXrr1`V8,)VX@ZQX\YoCW0^&@TM:`RPr*%,om>CNMAX-!`=/=]nHf"QRt][krfMm>+?aC:/[IJ;0ANOo4\7L,LN%.:'oU@WT)V303.+Xnu#&K`\7)UNn9_)l2Y,Zh6PQ4VCB751],/mqNS`pelGh4_?8>=*!3T*aYI3E68/t0\cGt+0YnoB/@_L@*1N+%*ARR?_iEi)/.,#g[h$H6PLt"WTq4O.kY\FXKFd`(8j;Cl>-"2\>UjuV$88J-76Y61/4;m\ZAOab:g+SI:1A4c((0ds6XeC.$tY]1%B.0nU3_mVKa8"&b_r6<0)C_`^GGA*JIsGi.DDooYq\sA0YRQ*cBrA:+]*&`[cYj7@Wb<;V-3&EE[A!_Z1mtk:%p;::PiIq-UM@[q%jk,tY\OKJ%67ZB'RjBO"S6=V6jH`@t@HZsgf7260V(C9c4P!^c"G_E*QYM4cpt!c:9i'P6'g^jUM5=0MGS-/fO?iR9gOJd`Xf&q<%\#BuMIP4]dPYF1adZV'&H>),Y'+t[M=AJ"">GuJF]:RMNPIHb,6glT3b4+dff+L`amqONKTWXmJ;RS5Zkj@L"T+hL+13\_$)G-Vr%kNPD<D^Ff]m3)*^V$oqr?Frl]OJm/)AcaM?-*_%8+1K(bb]pts;ZEfsOt,1'TCCd&>,5#FW6(FA6r=9u?6d/-MiIkJ(3DQci_eJp%@R=eBSKa]_QunLsac06!5V,AVKX%6b['N^LgjH_,;),"74([VTi;OtoFIodiiTKG5QjN)>`a'pB5c&7U7M'GU[c"4l"nNo/?sf%;%W_LO"5<+,g]DchUDuHh_)i+?)]l1<5_RVsTVmX;)#9`W1hHoL5@Ioa<6UZp]ViBU_Z.+35QSJ*jJ7'?H$PZ("61A0_N4=b<`F/YO%ZFB#MRrtMdeiL9Ls)R:'cYq!1H1#'XDY:8Ei[;Y?oOZDa?[NHXk_ga.okS2Mo=)L+]K:,=>hf1Y?*9!%NOe-akAb=Xgg(t*-r6Jr%$=e--c_&3h%_qmNo8c]:eZ[l,Z+5q7e$8_$Mp8L1mD.)kbEkY4hB&`AI'MBpqZ&[dq/!/SrE:p74O\Ac40RO+/c==?]&-3K?@JsB%hUF'd6E@N"I(MTBG5-?"hf#]C]:Zg&[[Z0Vo<$U:GAZsKp>sonjn7^sI<OF`n5dcT06<D4fb8&&l6Hh*%B*f<rCNYa=.sB@eQQ^;%Kgt5!['FhsL*:opp9m'G`m<f=P]f9f;p.\:g=?e:r<_c_53>mh`hmG-1bY?EV/k>FZ+Th-5Odj]$iKjA1Yh2:lc6j7QhX$ogn4<"%hTo)9UH^+:X1:Qm=kTbF[(fOqDtML\Z.7D5XnYAHokS?u=IbY9jpJEIp@S:!6:.I@A$Iq?\J=##Fa9ZtCU48NNK.r741W5(HSTXZ%2caemlaP,l7\,CQn`fmr;PV"6SVcfJZ;DHsdd58rg@X6=kouG/f7.NFDtJ:#3^R.oWUk.+N<1ciDM@9G&if]BnbE`cS`u`rdZq4f%:mlr*X_&A"rVX$nfVnah1u=@S8ks!Celk;9$Kh_TDVmI6Buc0L[(ZIV9PSYc.+Z&BCrVP/ds/,\m7t(K)Jsp#dL.kMeZ0d3NG@5I%er"8X=p`O?jQUr*.DA[FnqX[PA+q6lUuU4sV8@<Lr%tS(>X@,4s#<[hX"uJ9Iond))!P-?,lR6Y2EKS]hCmWiX7"]o!As)UjU0D?%<o&a.hWX&f1"*"A>(&SING`#dDhggYI8-bKD:rogjpLMGh=nAT4RpCaAtt>,bdO)U)dRg)WN7I(H8VIg0%Se,..UJn_#"MkqtKdZ%:2H]'2lfT.N?2EpIbolr'ICM:<RK*i0>(BgO&m\m:*4BB^">g#X*QS,dBfD7c3lLu/&[Bh?TW`nf+K!-SN6`GmFQZ#UYf*jBB'm6%R>fDIgoP_6,nTk*dXE0aSV_:WnEAiW`TF)OfLC@48meMogg@Y5qKb7_Fck2;[W_9(rDS*=7r'o_X7^W^dO;Ihc#3J_E"WHCm>cTV%e>fUtg3@6X]P(>M+5a4PCilgqd2Yk3c2@Ka]n'1/5IK:(NqM#jaWtfsfq48j1fN,EThULbdjrDnE2071qr.,L2S("MKiY^6W0YH+%-_,$eFKO@F$Eop_CNQto2'4"1f_Y<h1i)_RBCU&!]JF2A9=rB>TbV7LgarlZoED]bo`lDkreNJdH<QluN@oZ/Kh&_$[S`Fg7#dY9%B@SIhMQO+f:0b3ogT+h#<9katTg(D`dJ:'QN>c*N\[?n@31DFcTAmWAn3A=-SlMsYa+"%c)uHGu?-dX+^7ATXC[L/=\8Pd[[cb[<%)j?cdD4H:4]koasp8!`+GHoEfmc.NUQ,S1+BXpVtG4!A[@eP"-*D^&<m`,9QDea+UkhF[TKPrqFqg4q_g@=(gCHlinlJ.p.Omp&*%F1A[L0qIh$rpSl9pO".X>OV'n*pf]BHjmuog8(+ZL$ilMWO(=/ek3fgT8Mfs:Z'_Ih[56@2eKg![[oAiI_@gm;fTNXa+&H?^AV\i%`ghncp@&3.j?N%$Xgs,R0E/VQmBVlDmH]+?iOSBqIs_"OfK#o_Yi!Gsm)SIXi9p#?hn5QdnhB4\g4cdo54<A:;654d\D8#eWlP/9%\+\j%qTn#Cm'h[e?gc6u@u%+)hmQ_32d^S/F6uW*Lu4Q1^Ge(ENkT>BijW2[W3q*Gg)g,G]c$_7a03JACuNjq0D`,8@ds?ebj=&m%fp_j3b1k.<2f[i(,9aJSmnWj*l)!eH3j+:6R2^?,;bn0=ZhmDlf_jmR\$>c#T5^sG\c4]k]UJZ3:WI_ZXGeathgd>$na*QRXXlE'%Tf8lbe=LKeI,HlZiAc/R6&-IA-2mfgR[kik/`4j(L,ZgMa.76QDRRQEl/gq/Ib:')Wa"u8KSe^go.)ohgeOG'X8BWbX>P'ih!"P,%c\9;,[I"Fd.%sLN!_u;rF6Q.P)f#$9B1ep\@s2mf4$0Q;dAVoUL!m'347V`d>R-8V]S$Uh6Z(=6SQ*`.AaMm"oR:Oi68f1Q/A7Po%b%;k$7W*R2Dq)A29Q"s"q`tUlb&F\/G"?9\:6TX?\4p_FQImU#j#bt(i`Jbs8Sf+6Og?>(cHA\FFqGe]hGe#dom+nAW-S6X-fXXU%5#]"eM0`_"-^5T8=rtj`Y4Zf+>Yq4"N`eor?_:CE9,E%??_#ka[LX8M_l!k,IsXSNJ?iY'mi7kuN=Y1I5HC5^^*3@bSh$r='6QGY%:P!b\^8g[Of1n5sUPmB^\)RA<W7;0Bh^C_?2[fE,KP4aO@cl\$*pCr#VEVW^B,_5HX9pEM<`ZX9b!.!dV7t1`=\@Z5WV<%k+0MhR%5aSn)G+h2$+>\Z\)SB]Q@K`0A/%=ZD69p7m4(lV'k7m>h+1'H<XdA*D[3M6"FK,0pYrGPZ0R>L$%FlY*"U`.MCj*Mgd@9@lc\Zrp%Nu?iT^0cj=?`p&^OT)4bCrX_mS3M)fr9HYPq3sV,r.=)TjK\+b6>r3&dts?<rcV$U0UBG/Pu?:\1:--N);&4-9D^mNIZ]o%,[Uk8%WLVMgCQm5ZI8N1bmUaM^6W<umSPJoa)R1K\kAn9K'g5dQPrH)O1&A-<aVB-I`m65blUQ:l<+3c[E+aZX.qPudEpNS#PM.+AmIU,!%Q"kF.U>6TVT_IKbG4MZ'8K=0Z\[5`2CM;[4N03s_U,T'LfG[BILfU_8SB4X-4;JjcbS6$d?Ar49^P0.R*Wo#r0O*.uV3$?Bb:plt%>5brf("UpcBj03#IODE,Hh(Qtq7To.T!V.?&PP!aE:R7+AX1\DL<AMVJlNVm_62Q3c02a>NE>!nXLn+)8"<i=(53C`EdheqrPRej%DoB!$XZ7F]SZ!uk-PZU>;NQji0t^@&5L:'hU\rc7>E8?63-k$WTkDBWZ16ZM*'_O?NFIh^(7gVM059P$H](Q(r;*L[.VlAJSfQ>$%Ni0?"2PseA@u(riGJ[6Xfp6Z453M[nqrhC6MI68-q:i/r@c@+)4hKd9VsK\S58dE]B^]pbWCq#Sm:W!+7$Wc?fpe&e<1Q61K=t6q%m.8gA>Ep(Fnh??b:Y3&'qir[BXfU-b,HY;rT/]i:`:Np<;JL>!TNG=E%S<q07-g=Ogp4m:c.KP9>R2EVGB'TuorfCZ^65$/qpS^4%+ZU6j2I;D,lmAaa\O)X7*Nq![7Si#2XNH<(j2]3[INJf+k0<:baj+WedY=C4qkm3_@is'Pl]ti+ff=N+C.:`2b=YtGKr"C)@@GW)%G`e"?9e!M$]qdoZN^S$5JS<JIf`rN(cH)YMc,=Ks)](G6IqNfadM+%r:^kIL7<4Q`W2AtAAuEBJ&r[`Ubeq'AL\ODB+E.`.:[Cu^%cr[+L'EEa*PU6':DaXX,`])H:Gs?:rX,C<pdRg%R8G(/ee.jal1I@PCC?m[)Zletg0GQ.[9?#]%p6Tl*B@<4Gc^si7+2?%8T=Nf7%\Co!8`"S1pr02lQZA0RRRjp1B/U&BH*9EReq'3eV]=2qIF*)s\=\-tW$(rYAVY;E7J+'\)R$3GA.-Pe%c<uh6/G8afPP[;&5S_8>%jpdRQnXIngY&/Fao>^*/XknO+Q7F65,dIpDo1'!(?*8sJcCFOaXfR1I,R_##e*=sXP%:`sl6P%u_OR^Kc&ebFX@cu9Z5-K;pS4a1%R/"3Y#%a7L_;^f<!GNA6A#qo:5,hkWE/8[Uqr)D=%%kN8g'AM0N*s?c8,'e"pjDVT(k'U*Q%N88c.0.PR:/@kFAC_SCjH0iJ@Br?%-*lD;7[S:-@BOsX9@.743c9HEOO.R,4r3#?Ar:Zgp^J(j`G,1[94)gM:'Mk([!r.:mgG74GBlW`g8hH`EgHC8GV%\-MNqnnb2`oO%Z*fW9H'MtnA]n#"I(ehP+!gaINV&'+4[ZD<WoZ9VZWC[X5P=ZZmj[GuR**8e_S.qUOFN@8jO6Tj8;Yut4:L:@NbgZW)d]bP8PYmg%+((0DEUbn2.2DM3=,8r1$]-b\,LOg5QY8r+&m-(tOD+%EW4+h""s6cHZI:2R.l2L5YVK^59rS1aK[]I"fD\pC6lTP$TCjkbibTE1%cgVS7Cc&k-Wok_VFge0t4(i,6T3S+%lR4Su93U<]3oi>\f273=ah';;#N1m#85NC=^kW=Q<u:%V#O1S-H'll:+Y,,5rJ=[UX</TY%CHk\??G?(Sr=E8Y^Sftk>[_:L"[`d^Z:UFTogBP*^3Tlk$0iBh"G1BFeHEKImlfu.?9*ilH)rrU.dPRKQaR^UF5'-.2uGRmINN%I%lZ_%jLHG%b$*2)N-KJ:th%2'ZEdUR9$UZ9LW,-.:9*Jq+4urNnp8rh.<pVI4D&E48<"%RkLYB_]`Td,:[H%ZXlcHLQVXK4iKW0qQ%(rP]pOhD;n_WU#eaBRndI2OFQ#tKIW[hm3#;@T4\@2Oj4!;,Siic-eC8m7ME((35Uo[#!BBY&agL<;8'a:+Li<+Yg0.\t5@0Z=ra%X>@toA`AR1,3(^[o:Efs5l4[\q-/H8mi>.>m8Ej+AXo9!GssWg;TuRkRCFgpg631/VV?::+Y=jX/c!&/)3(Ig,%ZMJ"Xii"Ms'`=%;:^i<$<6[>h--%gl-"F+Q$"i<EDMI'YpUoE#/W0QS/_mN9s#s4`Mf$D.D`L/&K%4aH(ph&;e]k&Pf4qlA8VL4$3LYCO(hD'S#(?b%l&O"Qr].sA\E_^u[r<"I6'j*\-AO3:K<?_7BYYV!oF*d(H6#2)/j4h>/R,HO*4kbN\o>+9i&PoD)0EF+BQE=b1[$%9Jck2_V.\0:%$DY_:9@'9+k`-89d&!)(m&(HVd%tC%WE-N;Ep1q-kdWh-4,5F.OIVhLp(jQCVoHM"B*,3KpXQ)c9CMCMX&n6Qnng*K^6GAb%2i;q%4OkZ#1qTS#k]GTU/:"O^ms$lRd]>)_F_BBL8".\79Eq!0?pk=upeiT2+*r=1_=l0Eb<EX<YP"'HkRhH&mk,o!55$[_V0&[uAIbi;%I4!3MP;S]ub-DMrp@O\:eOM"n>Ph".+@!>)j-sP`UTqp/r=(>YFVdn64d4^=Oc]MZ#(ukc=Gq0\lk]&uM4TlV-G'^$$5/Yj5aW8#%Y'MqlGmqNh6oG/%p\V$C*.e?,et'@Ua(@DR-BH8rbUBf4itpr'%a(J((V7MgCI5KDP>(jG1$*\.=]6/aTC',JI+aB@(,_ZU2B:"b%Rn<$liY%%Oo2n/&abft9=^VrEOI-8reO`giqT7bj^UbP/SDF-=@YD!)F!ZfHaf/u)S^l$m>tRtjj"0]HWT4n@0m/oHc_'P="5cTi%?R,NPJVcS]pj2)@,Vqe9LR2(cg)(938^BnIAkG:QKm/e*.<aP-eC#/PP$K5Z&!BSm5q*R-r49#55c;n"4/.cFG^t%km?tc2Q[5C^%1*p9[.P6f5O9-daoC8m,rop]!40+P_%PbLFLV5=hDTZB@iJn1Rj)TN^Qmsd!/,%JeSmLMP-dY7UPoF[s\ih:[B:e/u\)(o82`[%,%N"NKo,_g?C68*ATBeI$^=.Y6&:9s,H`fKh1.BH&-ou`/')+1C65!c&AUE?g2f24!DPYr1U@\cb>7TA.O%&AqMQO6m?(.'*9Uf41Y%Fh+BIfhLXUF=Jf3U0a?D$Nq>jR96+`AmAf3,5K<IcIS=N-Da@IJ%JfdL0Z]q9X![P$qYFf?&ILpZ)W:k7k?FXV#T$+9UE^BZ`<JT%%j.YA3J0aiq"T.T)dY`>A!%)425'D6%mRE<Mi<V_aI\.;^I9Ir>L7jA1dG06X0.E2_=I3oZ,e3Cq2mAE,4.05k5]@h9UqV)8n.1_%/(&b7b?45CnLViRg\rUA&m*EOoSA&L#7Y:!gE2DPLP?Q\3?-h;Z_X9Hch&;)(YN0Pp+qCToLp?bKJ"N]$hh`DlS"PY2F;ONCV3u"%?Cfm3;DX#R#Dc2s?1K:A.OSj:eUs/8VB]O8J/-NXZIhX5lZp8...Z>!4A69lpsAhUKA8]BIm.+b'_J?qiJ*4dc(#<r,=6N@q/@UC%LL,PFo&4%r"AOgc*&J`i)@[Fks$iIg(N]$n<]8rb\.#hLN$'3;R27`VDoDHj0k[`o[glS>#'J9]o#8&d)(9Q"AE8X,ADK"69Oq4h%`*dB\D#!XK'LEZ^+a_e(()`Xq_i+1U%aY+G7d+>]c`fG'XHr9qF*nCDDi&Y'C(Q<C47fkP\dW(RH'lI7Sqn%`K];Zspe7lRA4.G\%El0F"6"T6$.jmWC,qd*;lcT=W8L)qKd!Go=nFCEA[fKDjC!/3bl':NO@Mu2R^`jchXrCD;Z9LMO2QanOCTK(7`D!Jid+#),DJR0&%c:)POM"O`Ddgjl"7d@H[A>EPHO"_dn.N;Y_lLk#[1/ddbHP@?s[IJnFoNJP3Ud@43a\='g/CU^F4aRihI-NX82>]8XlB+%iY)a>h%b,)*9"rZBZ3fCuQY%>+FlnK+*lrlLd/l@Xg1_gMnZ(;OjiB[s8$C<S&UJ6F]b&3V-'s>;mje/SlOZSA:>5smf\6,fKaA_&\lsgpZ%B<Zkt&I"<oP>`*d_>t;Jh$>+Qa"Bl*Tc,8J"m4k;]*C,/OKl+\7H?i"0XpH=-,][A(W+khPu9W+$R[6B!OM^8CijDB)3UI6?-:5#%MKLafHf,[40C76!=EY0R5C+I$rI+@nh>G!8I_&SJCfIlI5F6;S^MZ7$\O'l&r;#+07/c`Ak3CadfB).u3<qb8*(.j4b4`gIp:W2o%1;:kP68J9bp>kh4A@KHV2&?W6G0#ja,eHd@?QQ91X&'/Ub$sJt1+CoD+u/Bl?fog91@44-m=[s"$%,_L7oHWsNsrWZ1V$A1<]dQ`%HrTtd.2QbHS7*4*G!!,AV9s5h(d0`.)N?)Ui<,K$8Ju^&9M1&qpi`d(fVl6ls62M:;1+G.?la.a8kO9=8P=5rFHRU!q(hJG2VRgF%?fC55TU+*k8IB_RpWjKl"Za$!Fg`<^eOapm61B`GB(n$l>g?<oXD!`:CqW50C;4?sf/(o9\(L%`afQ5rHtc"a;0bd&NnI5ZBef?F%6Z/Y;/<JDR$2]N:1B][K9C5lBgo<*QUL37eM0HpD-$QB;,G$_Tc9n+.8+r*NgcKP]GH))EP$FV[\?8KN#0qs>jpG:QHc3gAIAr:K%on_oQd3E[gj%FXk/Rtl"cS"m<CEPF\1PAY\mSY#%rOD4[V:k1Kr4$^tC_+ncZLmj_9fK!kVS?rY\9!2-_Mp%7/hWJCrdL5CZK^@b%JhcS&aDAGt>e2(6+8^"e-Uuf#S4seC9/O,(7+l[%<V=!JV!i-2\3k\Q*P%eY\i;p6Z<*&7Rk?=[0&d`d5rN#=SL&Y:gaKJmib\#Q%oK'!g\s.QE7[QmdQV/-T*?@R,?/2;OZTllS]!s@]D`/Y#RkAUXEeV6WdgXoOEUstc%5h*C?$B:3h\7+SRk@jQ*+_$6?PFG=S$'@Q%]M!+kflVjEXM8S_\._n\jOnWp'i8f@8@.R?.`dT3RkDujdM2jKF>dE0/m\,A3d`hk>l%RT1GXi(]!u"Vkl*>b2I.:W6Eas[,b$DR%-J&O/l/HaJ;VpFQrW'H3ghb@=0_2s16OsnV@tN?8K^LR5F(@pkat,-3Ftr:VlJfC>Wa-&*?<sRSOc<+!?a^CuWM!-G:OFgJ@ZcWR%2ENZ[+Yi:C^/Ninas7<L]e7nQ5K.c%7<e*0aJ[?VVmo!L1^T@4Vg?qE)p74KT86s(c``tY>=)#NFc'a*fu9*r]'CSR/cM0Mn3'k+%<:^$\\P&5BT/67tZT`GsP0&t@OY5+Ri9BdRr1U_G#P@fo-oPm^987*IZ<.f*p]'#EU.$fuTt;kd8sQbrmXj6'Ic>kkX[;18g"]!N%R/=JXl>;#]Go!H=?SWqBp'srOTe.%8cK0?+cP29<r$c)FitL['4BKn!5PKFcrs08%HH,sH11_:L#B=;!8jgHT,7,RK:Gi#=3B>7j%>9kH*o8/K7'0!Mt]:kDc4d`BQ)W3o8BJe6'kb=bG7i;bYRP>_\7ptrYCY$JV,P,neBNGJiP'A!lY0^N=K5Gn-;\IV:ljBOl,-j9Z%;n.$^(KK$JYr:\Ip1Rp;\>!).3VQIql+;'2>62"78uF<O03RJYb)B#ViQC#B8BO0ifa'#_]_@kh7%gtH'9/Xh/G_n9O-=ft%/!b1%WdDl]Gp@[P&GO>0ASdqs',)8[=o7UL9FhU*c?rlc*EJ`0FPftYOLL\DkqAYbi>nu%.uFQP<V2j#4s/d@/<KKlL-@c5W-cd4,r/0/%pWQ=Q\.".=iD/N:`kQLPcnas6iGS./X8@2$/k$_W2ss.tq7&FDU6kFs/>(->jc(N=.Hui(^./ob[<G\Y;O3(bqgRM,a*Y#]h);@k%0AL-PeJs3@7ZuEC__mTQYLsS)CZ@?:Eaa%B'5MCD\$794%#<2+k2Q^[CTlXUZJ58ikDIg=Y;IiuNX2Rr"GsNg9+^<OIMV6T:\)2<%C1rTI-Y-[)e$m'^gLF:V>M(J&CM"`%).!_gf2CIR9>4LTU]t@#@_-8Bc<B14XCiGM=%6<#A%OKLM$Nd5TnBV7<I'_K9V!Jdl)#1U%]+9@n`'hqQ8PJ,<iGQI8'Ko5-b^Cpp/0hQe22s&K@TY'26ki")V,HT`QXj&(0,#'fMS&(2a*$G%1%D,qfK8EP%IJui@6KW>=Zn[%%@aR+Q#;dQ5<O'Qc6$/Kspl1ljL"*R8LO\a^[S9t4VQAt;'(%IIL8d_pF'=U)>eO<dqdq"S]cbS$?>6fJo`@e6qmu'!jpIU8[kGL6%Ic"nBXm\;X5?Ba8GEp<?Gosp`:Z$b`Vsk>e*k*ajhI/KmHb#$WLW^Dd3UJ<XTt;t9a!rTno&8_smZ*HnnEe3K_PaZ9.[.aV>KOF*%mIBT@Eakftp=G9WEK0)fll@uA9.\f\YI%s1(4;t+E0aV,]f=VEC_tKSm];>el;Bt:hfpk126HQA992fa",[\A5:sPuDpCf"n05(%%Kh$HSQML8iKP[m?gqW"'YDJ66<U5_?8WD<])@bPOo+&N?,SF563kX0<B[kcG4^JtBoF!OVm)TjI1jK>i'2QJMm$dnJE_D8NGcZ&7%p2r5kNRl<./'#-@WY;.L"q,YPj/))/Vc5bJ>24"^(,e1nDO69o@Q)c\)F'Or2d^EVr<c!u$V>A2dX0OtYmcGQ:A#>/PEa^QEbn.;%<EGZHJQ6+tC^*P\nT6Sj/]6)W^!(N)fjADm8ci,ek/kHGdX">qni58qr7$ZZkFf(CS,J"Vp?GPC2.P31Atiq!dNX$Y=t3pcS[d#=%OqO\#`qn.))]KPoV.Q(cqJonf0/GeU/"='F\Wt]nR::fFHfIS9CYT]NreRkBIVt.\b6(,D*o9*SF)(pQ2Su!)\ZG\@f6T^*E\qr]%CD<,^@LcesI'K9@(9B&I8h5gJ/.sd[CG_ehZaK=<qO"T]Qs8T\<+k8#k2;3<i9eIM3Ta&WnpF`!=9ls7?,`5uLgk)Eb0\BET`B\8%hR>+*oo[1Vq#*t1k1F#bRFg^%AkM2RZCfNk%cm!MSR^2CGmdbbK._<0^J$<4'CRs&TT-!XlAALY+r)d_mpf9V,PPFhVZI>cJ"\u_%l/hMjOYOb!.C/CQ<EV=L^V\[3.@'RRr3mc*omGXEq]Lkq;Tp+,`N7##]$c;E[6qK2#0?qjRKFCdkT1j4/Aojk\5acQMOnP&R;r:I%p'8nFN6Yd.%\OH.3^=HgH4EH3?YmM/^^-tdShRe:@$>29Ql#E4`<OQg$r';c%U`@u<?aGXGu7?t,7fk>R,"OBXX)o0AGta2<CD3!%qbb)A?=Y#M;82O8=oYWpq;SI_UOSN3pPWj_Ga+8[Of(]:Vo2+$aHP96$[;b9aqn]E)uZOZWUD'mlqtKumoL"h-st&qJ=W]Df*S!/%3m3a+SFEQ9..2i,GPt!oaYgB9Tn[pG00HUT@ab>)[^#;tV-AX_Ei]Ikf.Y"+O]VJc]c/HtY$\b?..JS>kIZ0L1W3Yn9=c(Bhfo#S%EUqKFqP?]:.$gp-hY#'RaYeZorE(CJOuZV1013J>QTheEpF?Jqf.[)&^O]\kM0[]+I6d<7Wr9]u(HY@U\!disY$ZLn=i+Ik@HqAt%5>"U5;RF03hXsP!kfCq'Jp71A?hNaV#-,UcrR-b<#uT&t^Zu[P2'lW&)u;_3&`gT;J(H?e(7P16]^(pP:f/FJLO.Q*4`NA,,B]Z'%rSehI_5i$If,4dAf<77E:4:YGLf53O4b^Z:QS-L&OhGPWGPu"L1dZn(Vki;/oh,h*%VMRIriTTVJ#hm8^TMpd#(5#USUeP7Cr=!Q%Qb(bnOHW3)Y$\ba\<$CZL:G2Ir#XbbGn9GKqXpK*&c]"@\r/O.g:"b?rR*QKQLd<<]70"JqMcgPX]Km>XtZ;grR1Yhd3sT4ht9Wl%eSg9<q"b9E8:-D9kf\(dX*u:=O0@_L3lC=oh=(45o+YP"_@61A?WXO%kZ'j00f7t'IY,7B?hG?`/$4:Y-]uIGI+L#Gc+/:YoDV;;%oc$?VC[ZKGZK8b0qlZQi-0*bDK>$U&?d)No]7,A[_i%Up6LQ/"?DYAWT$gs<9=a/cYBTpXj;:r#\ot=Zht9VQFR$.\%J[)5;L4k`%Mdk@\Sed7;<oq]sqXo'8*;!OOOPoDMeSgi=61nNuFH4FR2"L?df.UDa'V<5dht9W<Lm:'mE:<Y"^ZlW1Nt(`a?^_VGFI5q<l^(V,%)=CeFn4Z;Yoh3Q4mGhKeoZa("(2)cRrR*V0Xsp'FZIH9F<3;B;Z[JN/iZiKIPW@tmQeB*VR!-T0RCJd9"7O-AM\.s]c(B[&2cHD]%?[PjJ?6koWK-6C*&>VR:Wj+W(6%g+aA&YL:O0OE0oKgU#qNF4=C:i"Og?W7T&$7MHKu2i6q<bt(\"1)'j'K:l;4HFEHiEBse`?Jp%Z+\H,f_Y;5H2R62ZT*7,D.9j@gc2E2f,rlcEWtX5qL7HghcCoNSpqbEmak6_s6t@/rVTWEg])]upuUc%Co;[MEIP5M;nTZ?bg$'r%[/V,Z*mZG:I[g5KenGjoMpneo3B9"SX>e<+D=V[\k'QdhI*S?G.'C3Y^/f7@(E/dFf';8bf^+ZiK/$lrk[eYrc<A]*[FH"/qs1_.%D.fSgW9kQF5.4WjWsc%ja-Go_o_dZ"%Xa4J>->MVbq49t=#_L9PkLtkS\$h_p;?&">a7hP=FnERL%7l<g7?LWg[!DWjn7^sq#hsi%7rWe7r?Rt:0=l<&GW#kSEbhf9*0,G/gn0KD.i[`nYL;Lu<8lh]dT_%N-lelII%L=[]!lMO;[:U<8.L>f]&$V0X&FLu/`sLrj4eng%A$)XN^r_tZGlh3n;(K;N.dHU#<Hni'<`,FGp=9[51qEL^FBE[`F20b0_qOsqnUA2Qm`]Roq:9D.A'<M1"74t;g@)AOL[2RtYJWBX%?=)I]-Vs.\5<_m0dR]@WbIK45XN@NKZLb2ST8I]Zo7`7mipPZp^@cR;;m&rBWg.^sSAs.9o=M2k0:iu=S)*seX^$3[^cd,Z,9dom%f<A[92kS@FZgeZ.)p%`0BfZZ:A_WZI5Cm9Z:&&dLNrGhYRnhf@=JL2>TuQpkI5307IJU@"1NTt-rVjA$YdRLOCI,`0eW.pjNF1\'%=nR\FiDt>WOi,=CBDT=:Whb+6Yl%^QTda>"9^Y%J?Q@A<8G/P=GYMRe<&dre`HQcsm_i078j,7SM]-&9^*VEe)C@#KlFTgA^cr9/%p[-:YW;FaX.rtNaj"29Y(6nc/&t#MOn&'N%YsNY0"mbuYdC&N@h<kmRafE,PI\kLJ74V__c]o#9T2#+SlTBT2bW(N4/72%9/)&4C%V\q.cKroWMk3(H]G!;n2,`#,@;!EYdI<t"<+)3@IeX%cp;5:#<W0\mcTB=Fb>0b9YFh$l=\1b/<2"UZf/6Cd-H[02(^G`.[p&/gd%IS'5gAj5XTK;!daQP3tImOk7]pl0:&Z2&fDB5G>.G@^;@04tK;!`%VM\GAdTh:S0qh=+4[K8im`XGWM9CKTWk''6&/2_T,lVg<5E%:3bU0AhF4qI5dDIr*$]3K,!?Q=`[g1(V;Ym>;;H4l;!97VimO]r)QY4N0"*\@KnXS6-s_1);FujT0@[0/%=D:8_.^,e;fT!`D#?X%?I&)5?eGGc2M)h/(RkPAq3bd2>YsY^*JDF[$!Eo,IpTVSgTh[a23468occQ]8agQ6TC+7o0X^FLMe^6fe@V)rO>)pINLJ%7cl^P;%CbaG#h+p^4s#sZ"MD`5#r41qu.K7.:o_Ial1.mImY_;O.BNa2a'4(S<S_A][Y#Is7'euBQH/iJKZ)u@PFR+h6=`Mc3/&.\-mm0<h%gYa9#B5n,'kCCie<>VUo0kSgWcAE[en&#`pO*N@H*\?BW_\/U59H8W<DUhe[A0YnjLd'$T%lqrfT5NJ+-"6U%UeK0JokC%h[A^<,%q0HhUYKRQ8pAc09<W"=7X8'1fIKrTaqd=0he9BrZZ?6d<[X<oUj.q==eQF;u^"PqN[P!Wk.dZ;@ZjLmC8lfpM:3U=Y(O4/@+P0@-%1Tq`MmYXFEoFDl.MD4oIXhE&$oQbfo-eT7dE$(g%o/Y/W(3QTYbcZA`XcZA0WX-cEj/.2Q=ZqUWF<R]pAg-eYZ9QXbY*ZI^m-$EX%E>_OF0?SRN(i,GHfSpBCND"FnlTp/l/`'6o>Qa:q4424mG\/I'lsi`SH=L"QC+<'Ok_X,*6M;a:lXNM4N!O4]>j1I4?NCb?Z6TMF%juJl.`^m>e4r#?QQ6^u]Q9MI3";)j0G0D<H6'B#gqbetc'%BsC66oZL'+'K8=L2N&Pk64&O5M;?hjE(5,hW&m)ZOjoi<-Mp_Ja#k%=4/lOG)r4T&W@6+jb(1?K-WY=Tf&q'`krTtqf/^%>(shO:dp*G_XE=K($nf[I]A3)Y][W7)d*\f?F$_iC%g\!hgJ>]PZ3qgBGeb/%`T9GAZ6kH?)@"A"(p"8G%;n4l&&VB2>T)<-P?(+Lji`>-S[u7fA@W>#3D^G?<t6QcMCMu5<Fk3I,&sHh;(&UU[1CY7,Zc<gkN_&J%K:TrcMV1>'$AC,<@I0`L8f5`Z<Cj8dTgQ%>f\5eo6L^h[]6S]QDW,;_bKWT?UC3PZ\K?rS)0mcE<&5C;+7`NK'a[!gQ-X)B*ZJq7%cX`;gP/k/7:j?fL@Al:Hi%U==/@H(Ja.g8gYTo3'DdIqPI5'A>_\LBb,bM@eB;NPJjN=QPM!i?j).[*#+&oBO3$Ms):77)E\Ke![%Y)(_.G3%=bGN;md.-l6&T0GApT9[*1esp!Hm'BW"rD1,N/^MV,QE'1F)0>/S#"QZZI\tl6\I":Ea3F!'j1q/%X7>iXLPHUf#0,+@%[dlOeU0e"D^32?8==UZ+D7t*kjIcG$0qrWRfqpIu"OE^PF8XA',-$a:$iJ>N`@HK1DMJ_BfS[A?$00);D7A*dGt1rk)>StIJsGFX%jbqi'ANBO[Z66n92SPfcdMLQYb$J5"APOj@X9ZL#d`!"eq:1!WbHhg[>Mc@'.pj\Vn*H=,9SRi)\0_k6MM48:nC<@jJ"!ENA+8[O%R]QC@@OqN6-HdX>DLI/eCGZlQAFV%:/eg;qj3#/a82`*W-NQ3%C1l5\P`N"A@9<X&:OJTRb6Be"JeR9X<>+Fqd)n#/Gj"t@B"@VL%C@RuPICB)gbPJ"!A,PQ(F7D]D\-PE&`Tc364uOnT29+159<L"Ri_YUjT=lnl\$Nb+?2qLHGJ?8[RJl\C&,>n"C9O(O\X<^SD`'%H%&4<Y#ludYC-BWS&_S//`EuX6.Kr3a.pL`@4Q-QL$[m,ieIh0hajkH4AI(Hec!h*4p0.0`Z!kG_sc\jRYp%+FaI/5;&mFIY2Xfh0M%4PuXN(I,sa)eL;lFn!]C87Xm$bkciY'$XWJ)n5&!_-Z9+ToE9$;eo2#f$MDgZ7>K%D[gC8qS+O@fCS@AB7"O1I.Hf*D]Q6W*hF;G%q:nlN]Y:<0B8ufNG,nsL>5u4@ft@3,XZ&<:`I)t0['I1(fphZHk']Bg2iQD(>d72h3/;QjR-I-M\c%h5e)/gUmI*1+:7Nle2LfM/%.uFpuD7FLkhoFk$s6P>\13ZeLN6U88?]E;LgS\Q#h=`u1H-'k.@C'5faGq%qm)3ML[ILLZG>S7H\\C(H.RW^HI,P&$]!InWCjk':%T<+=4&"aVe*$=sFh`"UYQWA74Zn_/5F^"UGpTh>PokU^"/$I_+>P/ZCS8:Hs5IP"6iK,\3k0JNpNQiPm],3%NeAbo&c_'a"V6P_s%o6>)F4S<c3k36GgCn^C\)Fs8V8.-#lUt%PB*j$V8h*[d!g>qQW>E@7VQeVSUEH+?DH\!uV=AaIZm>Aln>GMWV1%L!@b?;P$lJlO`%g83IMTMe)lgF\7(.a(cPgD-cfCmk%:iaVDriiKFAU,O\!@VoG6K0N>WZa*k7^A.6gF"R0]WbfnAAOAPJg@EN-gQS<Gg)H<cGIHVq%o+MCS##]'2)T]ph,7UKo*8ee[c4&FX<(VLCRA7HV9BtQN"d*qX@2EaZ**5d4#TC3d_k/:pM?=mu\]6of=LGA>)GI+bAgU/,JQHTI%Ao^Z&l7\2j]G5M*1VKX]c^E[U7q_^4j2IMW'UGPo740Ud//i:MUB3&Db&R+9$A6rTVTBaIZfT0KqUsBHYKEWPs0hoL^%%*LV&NLB%TP&>4e(r!,n@"a:]mcsPHX!%B[S3Pagn'b_DRjo'3Q"&2`m<<J$7%j44bC&)n)c5@r%EVd54-`F5..j12VT:@P4a3'69SP.=nB]Q%\,^ZT(YL0)[<etnb0Gf8Sa[1T5?NI<n3&IM?YC*FA4G3q!-JAs"_)'u?-IhP5sZ/!1GagDM\oh&@ch1j(hLt[f_itYf,-4e_ClCr%R$_;%^O4/1B,WDe5SLK?MEcOLKkg(T3a^laC)+-sVhgMpV@s@SKhH(?*>S'(Y(.Ti]rDG7AWo-mNTmjU++3cZ_T^KNKI3VpFO;PB%;#.$b`AqtfJ82ai3A+\N)!#X#f\?3dpr+-&)aIV/,n+.]TW/6&hWGjBr0`RTfe:N3=fUa4FYru=+*Wuu?1hWE]K<JJdp@;Z.n5>@%b4Rf&&YPdQN+iKhQErTt_@b#*X$l7XH^ftc#R0b&TUN80/tVUUqRCM7SB#l2N:r36`Ve1cUl)_*jQ`&jc78[WVDQ4)2Enj\\e@'0%R^3T=<j'djhqg!,.^]&^?&hm(EH/WDWd$!C0hoTt'W==h[roBk?qr:Zks4:RGmla$kHAY7$N&h.M4m/f2^[pM!=R\)6BkR=s+=Fe%`IPJuMI-k-Ce-2dH7aRk30NJpkBKKpY)pV\Z>qt_aQc3No:aMoN5G3OLp:Gb+i.1%]F@Cs^-,5C>[aN#rVgFpK[N2C#]pSZ\i4JL%;B`kkjh7WSP)>_\+ouY'5;#CDOjoH:5M!DLcJVDiF"#<J'e5pgOPd_m@AVI'Ag15cW$(pPc><M\KI`FJ>7WPD=]`Pcr.'3WpWE"R%I>/S..</Lk*ob[XP_\K*bA5O\AL]jV!q'&_X($N)_s1!$g[hb^_Q[#K04F#+'<9-r&bCsX35lN2#k]?E74H,rP/j,(Eh(I(IOM)1%$7&7F`<NA0cTk+512-&FX"],TS-ca=g>b9lPu,$^X=T,;8K:6,_%>_j1@\K#W6/8=:9K[^`PR^a?7mZh2V<m?B4_^k@pN)J_[]%r%3k<+8__CrP"7]L#(M<-d[VIH:^p0L-cs!^!:^'<flGsu+.j^,_0fIEC7!<*N=JdiGE?*B6,H&e@O[Zg;$PegdZCtjkb=E`=fE]Is%21!/QK,q:/$lI!&ZdW\HJpZ#;gT6ZR"S\kT[f]iA3.cM,n_:k$0bN39No)1Og_IXglM,46[u<^oO#h`:j:U@Un_:T@>Qjf"j0paD%]/tUkeFD9Mqcsfh^#HM\Wggh2-*:1XJ"s\L>,s&Ij54CNP1D,:?iEdnW]=Li@WF#p]rM$\=)psE!]lH][Mnn?""@;"!-293I(Wkg%qduW&nC4Dfri*AIHCk)5_126`lfWE.b8[mLJ;/%92HQ]kH$q#HKp0SPH+hb]I(JW+2&isS5P[a$/e4moH^jiM4=ba\AXDsVk`0fg%V;\HmFBdQd(N4=tINAFfia96Wh!>8n3eD6_--*u2PRK?T4C18MH??Z^2`ra#R=UCsS^Vg2iHP=;+.qN0++X?U\+0e"WukOE*ihEF%q0'ldI6VY]G0+].-i^23Ak=cu/+5PGbCQZf="fuQC$0mT8m(ZQ]:?%g--^HF9\55dme\UZ7`k=>6Ug@)BmC3e:1/OmomrW5"nT*a%%L(N=9ueBpdVP*jRRr%iQo_EC1JI"aVj@fb_Zodsja%&3Np5R,Q!D57$*c(GI\f<DUTk;2-!R_S6k"R&OBHTu-WIi`1,MeoJQ^D1%f+7ThaQhN_3Z(+U1Gn"i$-9u5a"Wl1cSB_]32W$)9D<+UT'>9'BI2F,*Ln\4[<r;9i=)39Be!\qP,YuQc'@6<J(c4)F)Z^WjHk8K%K=1r8UUN@<IcVIV0HHN4h^J:s7%q&HE5MH(YcqUa6&a=?@Fqt?V<WS$7H8u6=oTu-SGeWJSXVd[-)Bj=a``&$!7ur;^B1:!*"CIR%Z+Xr3jS;WpZ)@k2o8pI7d)uPUFPW,CqJ9=<As?[-(pbWXmcZ_1dQr>9H1Gh.?iY0N+KfPc<B6Ys0N3T-U2(gS\]59;1d+0Q_dYK#%2t;(nj28\c_!ld(:VcaD&VJ'il`Srn"/S+Qm=g0k@tjdeQtQ6R&S\-(L'K:A+q5J9a#pe"=<AM$U^-p8YQdhH2J>!+f>FV)TV%oN%j=V7c/.MHr-kF"3_O+\NI-SER*ODCs3S,%*<J)'<,:q%3W2gCE%>_Q`+gJ&)\ZkjO.uO-dOoc4_@j<`cNgS<J&,mB2-`c)\/XnH?%!g;b./.^RrK@Cos&.PWJ%9pf'+mQ:.%2r&*7__A#UmP`hC'tfA$MVCeBoZn_q[/]^D(5YY4VHPmTERZX@:SAcjMJ(=V_1YF]p`_U%60,>*.59[V$Ucir*`PE2beJ%/^n6",$J'mKPa5a+=[\B39We[B7&K@?U43#Eo@+6Q!:T#T:-uaH2Ukf.+J?,sgOlRD(9D(LH)5Xp%IMFE$90&Gc9[']5N+bLR:\6sr]W7;7\gqi23$=6(9==qD@XpkRF]2G9J7uC73.s[E,*l^nOuU0M9+!B1_Ca6U8q@[Y]AjIK"!d(8%+tbKs-8c4\-9a1I^1Un(_a^I1\CGZ!,0cd<@$U%9?\P]tiid`oM]NN_fE3V!RC:gfQkRLs68P9D!OYYSBM:Q,$YI1B2H&ki:#,Tu%deA<+"Mhat\n.=jcasOaKL'sELSMmbQo[qp-l!fQLkIKF9j'H"1c^Su=Ws(h8BfgV5gT%,F`LkCFFg6ljFPAf>HE?Q<@3gWEE-bA%3.mMh/Z@(IS1q>b9^npr1N=91<oGcsA>*7]^ga/E'%uio,)!_!":Z-?!9>=<OBdG?$J8_:)_;TK\/^\6M95HnSai'TQu?rf2E>=`%bgJ@$rXIA2!RXad<;Hd)lNX(dA"0P+b7+4qZ)W\tq?$VZ0]3#]0Z+_bmn+!#TIiN9(F1[X%UVZ5`G#TNbp*CT@oX6GH*.D&o:La[%<keeNN43KR^.g1oY)BWboTYHLn;%>XN=ojT1Q4!l*.cRk[F#L!VLU6^d$H<'f?edb%NoL0Qo<i0]]@]l&d%3[BfN=#]+,iU!!@+X%,uu>9dWHqEg]Xh!5b+A[::Hlf='Z]Zl5%uJ<S"I+qRWNE)sB=ZS>6UM-OU*77"BK/T4FP3!l8OV9aqd<RqdPY9Kl=Vl^@ZpTL(Dc%qkcl!#;FII.1[n`M:6*_JRT"oFEO2eW1=A>e,Yq6'amQarR)p$P!.hBNS5Td'pTcg4b5MqLeR*7mEoNR!QUV*/tf3OEFBEqJp@U>%o*i15>8F.iQ4q[c,c:34bZPo4o`be"\stf\5PuPk!UkS)UsP9lPZe\-`.P-Q&6gV3OkctTE#3PdT&0qiNO\eLNR`2hM6T&Q]KmCZ%M;^/fEC$0F!%p0j(7E*;r1SdrM/ti'<JLRs[V)$P#q*>2-!XMQjmpf<-oUS"VD0fDK-$(@Z'i=@)0gb<JM0^"H%A![SZtmO8_Of.%VJXtp%*)@@_84*s*+agq"Qm]4I`<Nn'tGAcY$%>f#\_R3Fhdu?N(@RH5#KBjl",1"CI'F:.3Q#n;p%M,!q;0gIjQjG2K[HLE-.Pd%1g?&E2X>n0f,Gm7Riir([1o..D-PE,5o?gP95BlbAc_HBK<*E)C'ob6NZf9'KTHc'^LJ+:&"=U*CuY:>A-=F$p@JoMTmG28Bf+&d%'-LDjKiE$A;BWOZ0%F7P$6b/"K"sX:d6*%UNDG9YIa#VL=I.'hq1crEK1]EuoET5nOhnMS-<CZ4oMpRN+X7*04C!]V3^00QV`6jk%/HF?r5%IO36@02H/"l&L:YA&\!A,d/.2in0L?Il%#S*H-'XL'(M!f;T&fC(_2.f]7H^4a@X3W46SB<)ma>QF;h\FSc6%8FuOE?bT%Pbbb.NWSa<PccnQgt$RE5Q"6FT'V"rUi_lhPcbW,7$F]6OKPko;Cb_O@%W`0MT:<iJYZ&fJtuf$$]2rg=VpJUH%CU5@lWFm&X\q%%5]frmH4C3>_hlTq^uQIpaBap6:L\?N*7@e+=hhkUTh5gu,3MC(;Xd'@VJY$q%+_KFR4=KK(83NV11f0j'h-k<Ycc!q+FqNA/[-^5%%c<A"R=_-KEjMO.VjjAeU7G7>r?qm8[@qc]a"s]pdj&"$FW8(o-V,+cF<ZuA#!'X=\NChY[c0lAPDZQS$HXS<8M2_/2nheGkF-s]%dq--/_dGba!kYUi[2DLJp"55R>#*^(V.,%D0VuKp-Xsp_^elje7'p?anWtN##%nGL4BpEK=0Y>p"D9;E,gUJ`OPm?P)b,'CTGk>1%B3YOP5c%`?<?$UTYiUNi!@fG-&(Bn2H6O\jjKj8@B`[9)S@k6u5[ut19"<uHG_ce8:*"/'in>tLNc-\o1f8B\KN&bnYF-QLEIF0T%`#u#l$V7K.!4o?f&t85F`>Za0^bI8C,ZD]kh5;;)):i5o79=++GDY!,@Uq:@AQ3'7'&:0J:&Y0!n^.lcmAdgL!EtcVnWesbQpa2\%EnH47@cXlr<QbUSGU?A\aTVa'Ce6Q"!.O(hn^9/A6DDdk<9QmI_!V8X)dC[''7^D.8UFGld#qhLJakIi(BM#UiUD^?4A-mNO.^9_%OMdrdcLqb@6QdNH>aP2V6O#@C,(7SH6o0KGPD;%Ch\6'R$@65c[O`[#%!'tN]R9IpmR$c\TkT&Y',>O.7ueGQ05LZ(lu_K=bSmZO%^]5G#YJom.^;J6I-4!]"IW<BT-\[]bFqE91Bqfu_4U3QR!JYa58)*`)e_Ala'S=P:"hM/&nR'-n`=$0.5EL0Sgi2jE+PT4'!W^sT%mPQh'63[oS5jiZKfj;1Q!IL?_.^ID@LktHY)Y=GM+N**QQPt(!J\8oR+Jt:Xmt$YdR205(VkS<er*\_LTO+;8-@_Jel`@"ulUh9d%k*I(:;)"LLEW`$$dRIj=nK>k0:toB:#af><Q:`$rhUOJJMM4&UM?6/sckaVr$JbBQ@*lIe\ca3^Yj:cZG&9UeTa%qH#<?%?KG4L@%*pi*1)#GaKkVCV8V1&kjH/+%sqB-@pYdZ)ai!5NDi/<hb#OY4;"5sRr6/;!e"*.Yi$Y(UV(&t5+gRPdp#9$Pg&JU-Ej#i0LLdqq1%aR<RmA"7,?N2/KjR=c2pl$+/aa@M%k0\HJp0Jj&DV_j=r8/`Nb,QPc5nl-9Xd.OLc&[32*G83G1A#AE;aIU0U!EP3=)3pgj=4S*2%%e::[_3)09qO9Lrpr93S69e@%EE#agY,s-qF%'F"JP[=Q(fq=Y_^&0-/0o&N#_Dj3L+tYR)m5q+,3#j*/*N<#Mnq>>p1)"UmDVtf%kGjCG>;?+XB3p6&jr:?!(u$ke;m@DXid#>fi+H3XRHB4i`sNS!Mj9oh+BC_9+&a8Kl'>P.6TsQ)j3WUlrE-mhrE-nGr>6-9\Wm61%5UrdkoGpY^V&hE!d(*SIbf>P79Y^r*YsBEHh9.>2@k),Eh4Y1R`*lrOP[R`4&tg5fJDX'GfX,qjJmlMu2-5W?0Z\r[nq/WS>u33e%]+Dj#NK8m5nKT?jq?c,,,``0qa9_,e'K(CHX:oLM`5i"tnE%cRCR5ATLMsu]d#?%bM2@Fo@:1X;DQ5;(RUHRroE+[%E(9p_Gk;Uj%%3VfbW$>=S*k7kN,&dQ;5%l"JJDK9]1bK.I!<Eh!%Oren!A&)pq5Ka<nQd&s&#:^)1X.-\J<<.[gME59OUK5TRcZ-J$rn#UOUE=k%SG6'QUIHjI_FQ/n!>+j--"[,Xb79PbW"3B.*Rf-u_cAKH7+eCW3sjnZ.>2(eIC4MSn/I9L=Np+Jl6r0r>W$DM&ApHW+Y*hZ>>R#q%JR&XZ=d0[MV66jMCflpfM5NLD=d0\'k2`6n6*#.8:dC.pa[N1<N($H'957)s%3_S`MUEZlGEdn-6sSR<PVlrbJYFMnV8SVgo+P.e%-<DKS$[l*5-piU+cH0DN8]Hb^eO0)&X,[H3M!h4:<fg]t8k^j2^^T+$6Ai"F^2>DJF@95iNl%G%'$TR7@3Pij1`F*k.B??AFg*@C%D8g[<\LJ2$bU?Ph`8mpt0ufrD0QmlW(_M`<0OT'Gk:f8HYTtc1j1p4Ab6E8"Vh:)e-A7413m@#_KEV_s0\m3q%+^"NPS1Z[p$<TZ%^7or=f\mFY&_dbU=s1YuPaH!uY/R:i9H.Wajn8`;.mcog\?VA?7\EVpKQ+C<BtB&$ZZo3`@:YI>h_EYZE(\LdDH9)ZOb*]G,6d':%,HP/55qq@Q_Y/P#R0LS-7G(772]5DR*Q]EWJa!K+8HFLZ8AVgNL^%KGlB$Chk1Le"gdT^aApOnY=`?cN9kCj[U7".CKXm!Lo(3-X%DVS4uZ./Qe&Am6l$7:-f=M<[4gPURhHSbJU'P_Ya&.XIjXGXau`sdm^;bI.JJcd=pM\O*kA.TUP(X^ar9ID-1&U(s%iGl_?K\c9J%LLJ.!6n9&6`na&j,2>To`na)+n@0hOLZ]R*_RdjE/4per^<QUFa?Q!8:G1F2KG`Ut\AO+6PIi;8G_Qdt0N'U`0^;tIlDasbd!$0N%^f?0Gi2/q*PG&Z0p/J_/,4\DS0k%CHC_q?H$e_TjgL32hCt=D]FW_7jkXm`"OF]?D"`b+,Uo<H%/<G;D%^K>^9<g4EMgPKNArV>Y%<+fXG2B3.rG!\*&_nkhZ*^1DLah^RB\JY`kel9e3PlW#%8$sl_$bDD%&'o2-Z!^,d2Grl>#\\cr%+Z)8b&OhN`>T!BBH`9k6?%$J%/CoL,9Go%TU^D(![=j4P>!`7R+:qYC%7UBW$44'UM9/IYZ=Fs+IEZ_JE=`O<fKm]nDp"s)fGL!@=Q]f23ETb=WZ\S)oIfG>X9t[(%b03IK9VRWjnX,\G()3`IcP]IAJj=QNmrAcTj)M(K(*'(i%t0q%8dLYSlJdQ0aO6rd$_And[M"@LLhDIZYRK%[/CV_Ak@g+=Xr]bL%$KAuhh:%9dYH@Z)@"-5!i@+P^6/duS<_,AD`::?qQ3Xg,>rl1'4K&u,.)\8cB\taF8?t5f6*1>C+cV16@8O!jm93-K(*]=f*7-+4%e\E.:b@gYdomdAeSgoN:%N'@qLTl;-4J]TQN!8"s$&plW!IE_0djgDn7DoL[1H_ZPHcH":4K9-C_:1mpe4PDAeFPmL-p(bXWC.XD%\h6u'ASu`dX+B9NE7k_:Eh9V)%nIiZ8j1_PL^9%n<f!S[!F\rnM8LMlXY@CQXbJ0"?$mrWb@\-D14u*PI*G^n#u)rsc?;m:_RbD\%_kimA,am#lXG*G+'hk4H4J"1$ZsYTf$E\'(,:6?(J0TGo=;LdKGW_r5h==CL`'PZX!&Hb0m^f+e('>Rk4qG^ACkClB13gB\k2?02%S'0EOPn<#h9*jp[iW+dWGo4K?'jOY74[1nZM8<RNGiVCG0nhID6kb>)j8p[Y<CoN5a#>>/BeHl+USp$%$AZ4&1QSk-223]7&3VT3%YjKM@edc4-TVfc3brS=s<uK#p1)8#$#IG_*>E,U8*(OZ:T[Oa4i]_qeHoTR.*fEU",=R*Oc6Lf+dD@gEgS-N.85'pR</_jT&[<o6%%>k]m$_%b0j.WE&\H!1i)@K4Gkj]%4H@m*$R%-kmVMFDiEL<8)h`th.YI8u\3C?kp@/q+2OhLm/HFc-]6\_i9;(G1F[#gY3>5/q!%@;tn%N#'c=O(l1VYX76JD20FLM?SUR2hQaHK%WHgJ_`Z<G$qdE2kXnF]H]>^%)^AkAdaGeZ\=:A"$BW(,[56/7jNnO$VUSg:$Q`]%"u@(r@Q=qUDTJaV*Hc0C12I-S6T!3\kk]0@`]#`m\;a+fJB-Jb07;ok$M>,m1rE6^KG)O+#;(MBBH\LP#GZ'1Y"_j$!Y:J#lV]F>%4;"<GBKK/Q.YG#L'ML=lLW_s\`*m+@J?AtES=@X"ILo^77U:+$+@=a]0VRh_(tUU0]"'`!oK^W=#SV8.7MLo?q$i-))A)NSSIgS_%[d0g'1+PEL?&%OCgUW.YU,EOSiS-A%`%>G25f>AdA[A5E>gEjRQGf#EEP)-;$DpK4E2-nk(a9I=QhY`a#`gJKgH"rWi]/j&SRX<X%AiL50,Wa!hK:aLcIW"F!$!!GtoE!DYD'![eq`->p&BZ]gIW"F/VCO0/Cokei16M?\NejeMM^$T/0X1a-$)<F',n?-W_OO"mFfo.C%[D7[EV@:UlRcgW=3FZ7P'UsA,;ZrT#.=L>f1FH)+>/eKul9PQ.MJ::DUMT)Kol8PFbPCtn9`F$UE'(i^A\re]9P1!-e;'mjWaJ(Q%'9*9bd8!'8FDaakjB9CPCl,BD?&k=(ZaQ=?rRlmC@j1hEb1ZLI]I"edf03"K!SV>m!8Z/GO<tO^L5@U01,so&%AO:O]T'^].KI7l%$/"r>gAu7@]7]f>i28]\%(7jp6cF0&HsoM](acRdYRKju4=NN>3_OC#.;oVNq&tES2Gnn29V%SGFUAM]-,=1cgo(p=,GtQ(,U+kp%)<EuK^j5FaQ'geM8KG)jb_3)q;?omr")LVt@<s9DS[PN,(k@/D5aZ3pLI$ddChF:P.p5JgR9folD\auX&^3&Y=A4gpClJBK.=i<]%N_'mndT$iEEu_\gHHr4!b[;W/*sN'9ka,l=):G8'.DT2QDEp7+N<?'PO\nko2>X7*K0n[791(Y?Jmj+fN>G^TqTpr4QSMuG26[Kc%(0KQnJ0<aR?rIFDMP,l33dD-b7M]-G%9ad`VR)dOc*M5CYS:"TdqiPDN;N*%P:AN]bV'RG`[FRT])Vs,TIbN6'?+IMKmk_HP1aYp%Itg5@J4[Q";AQ.h&eCZ.JH68;2'D*eM4qK(-dj^f&3K'm2@[P%PqXsdj0AZ@,oFLJMMTI(+E2cpn[0WoR<BJV5E_is^]8O<ei=fS%*+_ojH^0s^6kb:4Lku<Y,cRWNe45?=]36'9n$4>saU=-Ko$UKtOdH]+R--rnDEK6k+_Hr5VPD44bR1&B1IQUM8?.Kl1*g!4&&Ve\%?&'^l8h=)/[a&n0&TKP,&Td>I4&HQTho@HFlEf8.bPCXHT+Oao<Tk*S@CVIhX4>U#j=/YmfTa]IH2X>O@Lbq!c#?".LtMjn5#Fq7%HHg2Fd92H[oT!@8]'muk3CF43-tMQDd!_Ot7E9K9Jr;\sZ41Aq_+J>(fE,J[#mXU3.>??$<+E-Z=2t\NjH)s]+h)T6P8^6X`XG!]%RfK41Dkq29]8ku%Cu@>?7&_p["otD+8s]$jAk\Ja$2.CoG?*$9&1O(;8;kJH.@QoEE\9qWj'c0rhoZ&K7&ERT/OdZd>np'8;+-V`%KP3\6*1DK?>^I5J2Q7Ys]qT0q=j"4@1Im6JhdUaO<A\i\>_j^KLgoD[("!/OJ^M821jM3)?4%^?*nsVIeK#%WGA4SkV=<u5nPN1@%adu&NeCB>1m7#Kl%YT-4*7i4b/MXo7!#>V['ISRV%gtYs4gm1`)5Rf]P(k%^<`Lm$.s)i1C9tuk<-E)AKu@[8$X\t6!^7-'YiZ?N%BZ$F%@B"iO0h0Wr>u0Qn`&q,M<FMh6;J8C@8bJ.bU`dY(j3^;t:XDZ)7*lNA$&0*[HklfgM4"CpIqc7Y'Z':B.`U"?oGsA;-SAU-%3Pp#5Tn1/#fJ%'WUT''gjOe8i26XB[YlcR%%QYjM6u3hU1J+p]H!MEMHqR4ZNGfdZ(-EAETp`J[=EFft_Fc8U'FfU=5Og'=%(G1Q%l"G5I_K$KJCudW<&'NoKhtAb:L4TQi#VCK3N_2Zq8U=f]*4eZ#0hFaf*(%[c%-0/t.gls3mSONe6\.P"Y/fiE(u?`NA,gZeoId+Q%pajQRV'-$r14^cER;B&76lZBFRRWZt!Y[n+JV&R]2&UYm757Spqq)f-*sKN-^bJD4$j\dc.fiRLXM_>!PdTp7ocFdgc;P:8,u:`^%BSH[<MQ2PBs%Nng=(jt54U-qaBLD[3Tqd1U<`GNfM@#OPj**B4<]1e[B!I`F+p8cq"pY]j=j1T:m5gQQ!_QbA<*DPio.<\9T5bB%%HB_;[$ZEkM4Nh3mD3f)Wl7%\C(8`)!3*f\u>r>b%(iGb8p+ZLb*Gi$GOB81>'%*)][LshL<!O2"[Dl2I].A#2#n/KX5X-6Cko5A\%80lE%dCIbIf_'7FdL'#%04hGr(T`I`Ms*d-\0P%@5Ts[Q6gKir8W<I01lMI!r!7G5kQ)DJ$[Es7575AaI#j;i?j<J%BhUr>F"BBE%-t3[5"^L;5-R*i/nTPZMJI,>t+%es?PI#"FT]qVd=-`p\<;/c>:Ei&5T*5l7bTKQ<X0cN4*t?-f75k[:KgRPt.Dmk5gLZ4$'&tN;%:/Y:t"dU*$W?SRnUMkC[;@7j:CpCg60JF3uZ'bP'g[f5&lsMS-2bGg\kA`'*+qiQSh`6AuBHCmB!O&5-`%o1[Lg6u16[MEil/X'$%<3ecV<ap;SGh44_*)(WuaQ&=n>EmtK8kKj$iM!jmoiatr;@nhAs0AR/L7pHA9Nd6sn8*fj0j`,uSBr1i!!`)2/#=rg"t_.46]h]_%qdD`5?=VXDn$"-q[TM@^cM0Y*cQY`O^c8)4in9W<"@X!(5s(FgB,+,,#\^:uIEtO$`%HUQGk08((@W)-G&H8/D$:M%>[h@M^d.Un%MIBtdamAc)m;]Q\cb($P0gM,$Kq0JK6p;egPEDjP-N)7/8D.VZ(2X"N'arTmca-rRfR`0YcO-_c&sJfb-V+o+ac.'sIZCEl)F"##%pa!,(<[(FA&X]lO8h?Whk;2#/gh9+uP`8^QE`;X.!'28bJO7C:b[d'j<6;aBOm?*k]-To+G@ZM:ioFjcC3-m0QNjckMc,/+9q,d=%$3W#.F%s:JVgCE04#pT$H_5Ark41'il(Vn?[rFpUSt]=p#'CStZOn$1@=g0;6K&rR(>W2oiI6g%FI@Uqks='L!8Q[`LBXa$12u%A%E=>,j'!PM]F<N/iFEV[l-R3=hPjdij;_kFf=?O;'ke[^;*?1c"d>Y6Wjdm<NLX$F#4nQlG#\NR/_<&!C$SGi'FtL;Zemh9NPV@u'%(]clHZ[Bo8%*D\g7BYiFp#tO@G1StZOR_2&/9"Gj2$Jq_5l67FOi?4PqbAj]`%h)4Z?5&#J5c[b%"au`lt9a_jJ/nU6FQ?eKM?4(%UtO0ioNh%&fnI6hWc%okK^_*_V84I5pR!FdJQ@3m1P%P;N>hDPl%0u6AYB+<`NM3f.:uES;UApD;nCBf0@7+H-#,Q$9EKGVYod5V%b94Gu'p]TgL/=^7T-/#5aFY84-3,qR313t`_[]VRVVk'7I+3-]k9>h8!cP)m.,W=HMT?uq#jcIf+dQbfr-*NSENC(baOGQ&;(?"q%"rT<m1?m`]Sq>,eN88d%nu^<SmaM-$j=[dkZCq)D:dXAjC_)Uh\g#]/ngUF)k$8Yp).[O;F]8Kb(YHF"'&s;Q3k95ZL"BrY+`,Ku%0N^%ppjK.VTdi^/:idKjd;@Vt5'@SWhKn+clQ.@,5q-9eY(;/\\6`"HeX<#OQ6!TZ&\X.a]*o8%GJit$;KtF1JL_Q^8k]j@!jNRq%Z"nPDL@L2/!e<ZkC42Is::DN8HZ[T35a[2Ge\+d.MoF[)F+Z4?GUQDN-CE7Y.115bKNX69?3msZGt)2l(d:jdT[ZSUEAe6^a(r4m%'hDi$,9akjPJVT4RB;q_^Iot?d%@">PVg0n^XO\O1'+0-<gcGc@uFk*kR/P8^9=MckUc4Zq3!^l+_YDj;_X0VAH!6M$(Y*$AI@@l%TZ!c0J2LL-Sk<,kmmY5m7+?#AJhQbE14MGnM1G=@0RkLkF;=m]<ABKh)bP=cb#.+@hsj'U;mCjBW$rXnR>;#g6ZpIopcRKBF_D\k%'K0]5r4sbIh%36satDBqX"),l\Ar>u1Be]$6]5V_+Et@-k1C05!?H*67s.[=Q`hkqM8N#u<M*Rl@drjh\X2=W"g;[)M[+)k(<L42%ncljH6'`-'m'@+@$+MMmWm]/elC.41Pt&iN=1W3Ia%$Z9gn<sc4][2l[Ts'QS2?Sr/[7R8"uRjcjmB%"ZLCP%.I.iLYS<3ICQaKi%:LZVnJsqpq8&m![Dim3A;Wj;t3$h%VOpJ0l(qNGI&0j=Q6lEPN3/+UaoKW_B7d11KfYrs=Y#J7*0<iB#+1DBt2+!*SE.K0:)Vhl_%AoFO+dG`nM>c/?VTFmc?>NZs.+J4A^a11EQ918$*^k1eXC6DL6[&6[3mBJ&a=j#.fV#d;;M9,B9(A')T8bTf4Ht))H:ZTH(^(j7;%8O"/<*aP=]M9)8Z/=:[\M$ugn:1[5^bhFb2<L0IDk,O\&0+k$DJH[iJ]BnNMV<?7r7:tD]=i`^_7E]1B2+\54:In>>rh*Igb!j?]%M>XAY`,$T?8E!Z.N!6L"o3n$b?-5S@D0*9+MlH!&`&&677_W?T:cB?+4NR3Oct;<GU7<:Y6PLs$C)lkWg.@D$+^PbsNsPmJ'N07n%WCZ:W4gcCE3$$r3)3l'8X4M#f>^]IM-/J]5Wu0\CVILU1jF<"W?BJ?oQ@bRdH4/G*=!c]@jm),+K\@VU2'Zk!Lhojr6*Gm/AC%m-%-W[)1M-Q=5Z='_j4H=s/:#r==M!Tu:JlPCO+Sh>/hIKFCWq9Qq%ZW*Zdl-<fP_dbZ^k,RC2.:U8ddu\t,-0-&*p(2qF^T:]BaY?O%cT#+#0"VZ'L[J'Om9X4J4;^r$P/=4K(3$eiIo!kuDn/_$KNZNNXn9OU\$aZ5!!"@ofXj*E!`]C6Jt^=s0L7/+d,'E[o&-$3>qjo6%K+tniFp(Koh6\OPSrllM+M<J5A!%Njg?"#&6=R2:P5o%CI*k(q!lN3m=;VrK3><9a7^iMIWdHYe7#f2ENGCl)T?RFb_AMmCBZSd0%^XPp:[@+Hth9n17iYfN5"$H.FLbbK/W#ElU;\2.N]:=K3?,5g[';+H]`F5I^&M+fTERn,CZdDo&!X_$0egL^@i:i3C7VVSkfE45(%J^02J>@AC]*Q2V]4N4OoA>i()N-M@5ra=Qkg"o!';Bs'H&&>+WE[$n+l_c:s&B:-q^um6s2E1`tbYOSRfR3E:B/eWd6b+7O+OYAo%6Y*a\Qj//>%d'Im.=qeZKTT%-c5SU?-kJT3iVVS?kWZ>mLG4A:8>Q77#ae=QQj/;F]PfR7BpIRAAp_r3J3Pkreph_c11a3(Q\kqe%5Sg,"jTI+W(WJMbnOJ[6kH6mTC8?q'%;uHdC`uKMB(qNe2CS,!h=Sk$:'iPo3P(5/D`rn-$oV#decK-/.Q@p)Ttn=(JT#F*jd9!U%:5>-L.K*Xq6s1pQ3Q]fk(iNJ]"YfVf19a_+=T=X?b2Z!hnK%6V@AnjS8mf/cK^rc@\\M#JG3t_H"ldcNRth3R<auq]=;EIrHpu9d%0%SsJ35VHVRDm-lSAParOuS?Q9K0r;FU3$2`kHf.MNKuj'JQU/ND9giYoAn:e!sj_`>n*/T\.IRftd<'_cMl.Cs63V-)&`M3jX#!%HRUZEM3]-ZE@$A-_HD\']c-$6U@>GtS)<Br&f0fOlN&T.76mOp`_.$T3`GQSL_+a)$tTDgV&X)TV646c<i?te=='gHOn^XMo9Obm%RsJ'h^<7^0Kf3R;TD*aY/F?Cf=K6V*#ec=r@!GlZAT7nk7NrCnPPGkZ+;=tBXY[dE0s2VHh'.*;Xdh*"?qE]M[,RqNB];o^ftdaQ%L-LX5Ep:kXErB,lieh6Ue7d%-WgLinCD=HN%d%.``nHjH8D0\Rrp67tJdGl`"G9b^0MsDt.q1^%0JRKtjlArpk3uq:B:e6IEcaq.%!C,6aGIf5.7i0C:$7?1<;scQ$$=^=Q6$==Va4M/"6"?km#[\!`^iL4q%\ksU=-eQY=SPHX6+@P(M&C;d`uTqBQPBdc<u'aB=[Xgr%#S\?SG_V[0isHRkZP2-aPCNg@'V0&G:MmoN+j2Gn*aS7aOJ&d.(kQ7FHrZ$^bik)'JjRCYJ;ao2%g';bKeTZ[@7UUY]:g(O"b#Aa%d5RjWU3)Y\q@nR,#Sht0odT6[=m5D+,b8465pm\(gei_0h)VO#17>#7<2:Yd*$Z$8*"9Hfnk)W$W^hQPCl]h-*XpUK;+U=`<"pA/%SJ'PM0hk;\-5gorX6LP#&k3\!$>1!k$dfDfip;4.*58J/X=881!;#B2;P:,dR.hpQTL=Gh8\qnmM68M)I(@$e6r>[N@!uG.,_OOL%?+!Mu'\`R;mTY$T\W,s)_>Xu.b6:!1=QjW\g"d`e@0.]6H!hs7/-LNsS5GdZ\oQ_Ar9oDVXWgp'c&;,S(s!P(lRXo;o@:fh4]W;)%''U<*.+ru>%]dS`&iQ-6932aT>FZQ'-jKhY.1G!_O*&+\I)1+9+oFC_MAFm,l:Q)a\WRd9ZlRHS[ui^\mjs):NF7uUHg2;:QCIJ=%?[T=<[\DSV.([q=Pd1o!lcOtP+4Y3Aq7sNd`RP@!L)%OiOUr"H'*koG")GU.nlQK%@!#5AgG)_3(W55bY;(WV+PGjEJu^(jE&F^'%Y(AOIKoj#Z>@2u_oYCnfNtoKR7LSVWo4deP_Ks%PH'>\g"II.SDpE%aQR\1o`-@!c8M5Z9#.h\;;\8YEU"!Fi8<I-d.fuXI;@uOg%I8+ai?Ibrgcg*5IO0=DCJB8tr<1X\NKqCM?4"HD8h!''>f@i9`U/JBL<]3fU2D8BU^4;K.KmhpgRM,RE0j=JsX"mkDj)5cL(ePNX%=:qag@J6^14i#7_\m>@?CT2>\HO.'OK)fCT2b$'R6^^oGW^17fHZr<^+E=G,s%"(Fo"heQhE%`eHs*FRf.UWVhA.VkeD@DHO#-,7%\B?b*\LJV3kJt3Tl9$WZb$%##lU1D43im^jf-]ogs7+e7$m=`4`,(Nn"M_BT=r8U,aQb7E90Ho@;R'8\]>_<d>hFuRJjKYj0L>_a%s*NIQV!lRaU4J.UXk]Y5>J9D&gOQti9U+u"5cXPr];Ki4N%C=Z^]=;Bq+J*4l6R?#6TL`LVTHTu1t$\RU/Mj]hsF*+%-4:C"6Ctr%+=Go/&VgjqQY;0-,oXP*-F]._SLI'O5rdr8qM/&;Xko]Oa?Ef]d.]!`l0mW6Bc$!K%-+ja$T(f>fAQ'Pka6N^]ulGj+<9g<NSuGL%N\)(2XrDP8^3AL.EIbQ6jIJpSc:Sus*-7_o5Pn6+p\+?BTB?Mh,kuQ[=0<,jXQ>JQ[sJ$t$9HDC0`PKFm,8c\63$cRpCI$p)&OGI%;"F3&+"e.o?%q,SKNBD:])d1],-'cE4L;8@A,Z_=6%F'@79L5m%I,ebksP#!J/"BlYsWcO(4gKqfA"F%hTk"$eRIqfbmhn+MYr&+%.Ba9dB!RN/%H6'S*6[)$k)%1U=5N-L_S!Z+K.&cYMU@a)jdi]=Z6N0-r?$LeM[)j6Xmtf)DZQP]l0U]!:6[A>Q5j?a/nbOjo_PYm%q'Yq7CP_0U3?</)=Oo7R4u,nD#JE&%feOs1df@bPB&WRqSh[L5=FXid$&h`r.r68%,NJYl;U]hh:KYR!`QANE-BoT\R<f#!C6=cX%\X;ALVMA)GF9BnF1[Z",SQEKn]cn`_S%m.=aT'`[r+hAlq>k$1GOr!j7E+A+[-BG/E$KBQa:rXj,&JIAs0nLa`"Q/7]g4aTHFEFI%!r-?2gO=3ng&'fZ4A)O!mCYg`TO&So^]'1OD0u0O"$&q(h/lL"E(C4-FL"geUaoYKd3X_J698?1^eEa;SV;ej7RQ,C-aa":^Ge?p%Ltq_0piT.q"&:Sl/eg4r0+2.(=c\IhR?`j[#sc8<5g4-Pgl>hkY];>b$`9jpWDDQiD#Nb8_0j5EF,EL:,a=2[jI[K4P;'ZPh]k/b%E*Z]5B`jd#7VkLA/R*j2Gea([dp`&V*^$qD[a>WB]/#aI6]%*9cJK$[_9Hlcf$+p7D)e/6'L_?C4h6cd=eY$eC2*f<FO2'CKcbEt%AT0.;l'pmW!J9ne.[Q^O.!G1r!=7Pgl'TSf`'o-%l=P]30bt@9k%p%hr?_+mQa/S:MF0VN^NS@A3W6ue=YJI;*_*_kEoc[#Y(+&(%Zs,!qdsQ=CYHWplM6&,P!XN-'U1"d-r(%A"p\W>k+t+K6Q5^81d+&C+*GbFEHkK]:<SeB8c,EeN9>4G-fA17\.:pK(K#A@-R3TOP%&[7Xl\h;QMD$qhKV*jPpAd;q+>)1P'"@;=b4LH:i+b7"oU'USAh*E5=H)/-Xp;l!_q&R'fC<kuI90L._<hT0lfjGuEOhZjf0Id^*%Xb4UTP3$;?^HWd>//Baf>U^rfj!RZ%l.BOT."CCq)p$Qip&pY:^gE`AM:0sZM@K?rGJBtqFjH^afqrDJHjt]>-)W_OQ%&Y+ciIR"%)r>Y8@LN;42bq:.m7.8mIK6)tNT=fLkd4us]^-*[_(p[&H&,i)\L906!*qJl#a4"[A<=nB&ALQ;Yr6\>1@B'm-g)*#ZV='"6i,]$%&!FmYA`#2J'u(Z=*atn8"rq)4d[LCd9c8D(Zco*nj@p#4&K&?I=nqD@*26]RBA+E['qb5e#>+L4]g6$7@?(@oJb`5;nF%Gg"`a&F%Lqp$5<sgZ<?QeJJopPp$VZ<B<M7HF;F"egl]1,%d^P!`OCUXo:a_JU7Vb:o,Ti2\Ul6h/)K1e=0=r@;Qg4)47Zl:m`O+_KPKi8Mn%0<ui>dTcr]B+rHe?Nd=YnD+Kk^kNt#'RjSN!`89kr>c94RYOGHU!ua&?`$f[^?MimnIPX"A0!rIkOLuQ+rNl\mmMRNQsoq4/fnm;%HZ<&<-S\%9Qncn[Rn&*+M,"%jDt!]AB@g1ue5Qpb$C0Lt2f\TD.!>j5PS.'g32j&KJ7qFq]KYdQb]D,UF@Ul^'.PbN5'S4t"`m7%%7le']Q7HGHTe^hZF.WcpgLUFSnr_V[\UU_38M'kuZ?H^^^coAN+)]p52Qt4E+09]pe%9#jI-r*a$.*7U2WHXmF5Bq&:j+TkgHTcH%gZ<n'!IU(6Y+V.0:,:LO--C_kh@p>8C?nT>VY7Lsb4Cuankab,D4nXc[!(qrcm.IL';[;'N+"R[nV,QE,lMs2RGr66X'Abn1S7lF%V68!u*M1jCQP4hFFSOt!I;-k2NPTduQLhZ%hbq@@iKUL3%Zj>b7T)Jr#`L2-Ff,oY"X@n?W_aYY(P8a@L1MlbIQTk"#2Yg>mm4'm%9Ln)Q7(3j0VXl7G-u(GVAm))qcfQ.RN+RAf5S=aHf?hM->uPN7G/\[\>`C/j:aIr5G,O^`Gb"g+5T(M\7R[\[]#6CcridZkI`ZQL%%\I9]6rZ#WM8H-:&mX?=Bil6RT=(`$X'PXmGnaUMa:,IkhQgUZ,r\L"llFCHHm&@OOj"=?.@a2C]HpUSSt6Y,bh5Y!IR3!^)&fFb%?U%Z'!IKKbC%Al4;uiOLFbm[Z;'dD0I0&j^\A3Um5\Z+/qu:QX]l>ul@5..KN&&+&rajj6L'!R:1+lT>[Dsh4FpGVr?F9-5"7f-:%bB=3[R7djSr"U1S&RUFh4AU:-eHBo#7+iF;WD'_2)c/8!8_P5Eb0,cf.BL)jjkU%ac^qMl/#"+_K8.tk<`fDj&f;G2A@hqY0rjfG%G3%"TiIN"]MiUA\XF`O7ZTs3P7c-k=[BR*-jI;C_"$78LWjlJS>bXXiV&hUm3&PB7@hEpn`;l,)6t?G,'hJe$E0;uWJ`k[cfO#.c%UblI8\^V0Yi%8cOmJ+,_pE<@C8"(m7jZjU?YAp>i5rD>AO[f^iK*ntcNnR?R"P,IZ!oX8<!ePC"F_b4U*Of-3+9<o2`r^A`.)n/:%Sl.pFJH!TA`LN)jn,6Wa^ERf(H0!^M71Nf3g$K!.JLb^6Pqa2=Is-Ipha,Ut&_9I&IFu9n>o)]f>HB19d-H=cQrm-VXoe"0cs;*c%0m%RVYr;pK9Vfip"25t+L;/<L8VX4XR?q>Yg!rV.]uuQY<p;B-N%.)A;,U\&s,9:tb)\sF]6KABVkMLQO@dFq!%HW=,9a\@]]l.a%,rHSX3p=i)19t"FOQ2MXV:$Id((H*1.f]mAL>D%po$7FVj0<%NTFiOh^GN7-<ri/H$ls64@92JiemG#&JJS4d0Jf5ZLOro!n;>!s%\f8+.*?Z*LlVpo`0M-oFIFk_iW=*c?gtLX-pVZX,[1h+!0utcO+9BYXc_%I+a("B>=hTf5*nYHjrMb-50m*bqMM9sOinSH!m?uJK%\Z\UETm&cbBlf-`HM>?DQWOFXboc@T:*[FVrLOtDD+)ak_IXV6?o#E?*=*E,JKoSS,`s+OOH.JM`.o*HT^S)qRJP-b1@M9>//dA(%ji^^J2l`%74;3Z:NLr:Nq"]DLC]Hm:bF5nQP"as3'n)A[>*BGCk(R>kLmn^9P"!tM&pFQ)+-X[XJYJi*!"o9oJT3-I*4T,AP-l[3%e4OI'q\JNP`'F]5@aVHtJ[Y(_+LMb=oWkdMN%G9K81#p3>er_AC(.ZWHC$oTRWq:,=&;MVN23d#`(rhm-FrF[;!nl!SY'NSJW@@Y%pUm[=5X;cfeCl^J&hWl/=Mh0O$l8mELR=4bSmcV_h#t!<\#@J1!8?HE1^#s7mgb2^Fn1!r9LaUd$-<WXWdfX9#l-LoLtoc4OaK?U%7BHX'UsR0"6`c4J@^l<a"^KHs'aU'TW^=5n,G5@s+B:Sr>^.BIl0'u#&(kR2qsYi(dr[[HI0#am)/3J<CquaV2W&A5OYrkrmr@!>%-8F06.iD*F;U"e$bO0ZQJV_YC8<srDgAV9I?)`&TO^2?P3t<G@i&\R^HQpg+Z`9$&9f**F<^E/0!'%$(!#*\m^khTu2R2lrn^&Cn%TNX\LFB]c)8EM)W\Nhi]J^:->('(!m+RMHq@PH86T"@;cVUF$[&m>et$]@+k2$1AtMn>]##69/T5p>(*qmK]a9JT0[j=:4dYHn:-%"Xj*9$K66IS!ReH)N`?1J(HC%JAThpoWA_\BYCLuP5[TS<V65//D@Os)]Eh&/ZFIE!SjUJbY]u(W`DV*T_;jIB(2Y_$V_8TT,UaY%q\@l0AuQbT_Gpn,CY9&Md:1MuUM$O=DHMKX[h`T%;K@G2&SFi@U(T+beZXAU?nfSLSJ50na^G>48PY]))'j4_f&*c_@5[m+W9gu'%b;thUU')-o3,"PK4%SpN;/$jG4BOp(F,\$c!-1kWm;C7Ce<Ut%oICF0Rj`%]_RYE"[JDE#jHn]9aT0&sH=Ke;YPlU\9[EukT5C7X%3eLcch+Ltuos.EnZC[_Bgt'j''6FQ(G5Ck7!LgAO>L4+n>hcJf:i,YZXaWRpbhUdE>>XXF?dLBrTj,mXa'-iVc<f#,h^kgS_<p`u%K)uF8_WRo>ju"os&2YB3!?Z7i.Upp>kdsGBf.XMGm3TCTW3#NSPkJ_(JV5;;T?D""nF9=Fg(W&`q@g?CE7J`JlMuFfQ("X0.X:*D%@(u&4K?k%e!CT@0MnGT#H8Ma&OBi@k^np`ea?FMR1.'P/g93?KhS`X06)l,*Ift&^b_@Z%.Y)E*kMi/c?2KcI&Re#k&%,gU-3Ud\%(hsVqi23YC>$7.XNI+lUUm-)=#;#?gCou#gqVUigmI.W("fc?BI\a,qH'-i'V)&i9]rf%i)\FEmFa:JaYVKXRI^2JR/!6%$ns3dN%As$mrWEp4:/qr50c(9(efiWJC,\?]8:<J5o1KWriq?<3$(8%8FO0H0.7.n&4ZgLI#h_Q"ZP6WXea\`K9M'bXIH"&NJf!Zi,4h7%L%;GC(#:lY6pGXtu%VfCldW=eZQOdCg&d@rICiF->4@N<JNKN1LW=c@h7d,<($1%3g$UTa7d??THpp$#B>!gkp8h)fc/g-)B?j;)$%%DO3T@K9nsOYc-"G'j]nA5%Gr"@>)Z)TW(;&T__>=H81fKQkP+uLe#$Nr7;Kt)*-J.n2[Uo@759("'2[pnkB>)4=n[qEEog&Otj9!%ED`_u7BQ8a\e>cAo,2a`C2=XEXdlguUP22H6BpT%ECLY_<`ip7.Hlk^-dkU")F%E9++DH?$jB\Yp/?R6'NdXFk<Al:gs/J<oEJDl%FTn$V/k[t[h^+I1UWTM]_EVe3DrlPjF^<P\Q5YdK%ljFudJG'oUCb/;c/QmSh87=Cn9,bf[u]E.#lkX`H:ER@X=#4mQ95?HA*&9!%46aWA#@!qV#W!L0g]eYdlX)b4MnTQMk[LB9ii8gf']>U7#8.C-*ugp6^Zj"%qg1"*2AsIFfno=*L>#`k'?hV'k`f%-i?:r9&oKFB%5S;hA8k)`GW\>L.I<fB8Y`"R+jdZZ8%;Bi_98j`1X+K1X!`9P3g9a"25F,;#LD3Nq3ugi^iRk#__AP[[rWa.(k>4q<d/dil>(dGT%Y3N+ide=s_!XO"db6<eV28j(4R,j!,b-4CJJs!/FM5C)``24hi2R"e7@u0>N5puEt!Ue);$RhU[)UGf`OMN)ifQj];qYp)S(H-^1%.[=,1!FQ(?i%h=amUej=`OsLF34/!MW#gf,C(/3LN=&RTnHd.tP(aT7*&@dq&hfQmTd2N5(hIg'/EI&d%,)>]1rF+o[V=RS+,o=%%bnhAF.n^D)#ZRKnpnB[o$<l66Y"EQpqIKt1F@%aC*/C-pN3!'&pfEC3OGAS0488He;(9\P@Q^lUQlf&m-=rB<$&@;L]V1$Y(h19Y%7m93uPb=RWAOG*e\*8'1.X4q"K<%V/)7q3l<s3SeQ=^>0O$MF:ou-fYPmN>7DK*s&;NQkO:-+\C5>-<Cat'IX9FJNDbl/kT64i`K%Ad%l(9s^\h7P<RnHiKg,K(t+K)2o$@oNT:up(S-1aA@fCaY`@:O5sbfbq<oZ^A(&f!eNIoYZR2!_`Ufko-ikMS^_AQ5M.tsNmd^=%5<"O`7174`G>qg[^u>WPl4TMW_FV7R43,t\,/EMR>CEJp"EbM^k+]5+",sRlb9Mt=MKkpO<lXgm@'&g6*frjrmmf;I"`n16d"f%h%K\VBeH8cjPD9S+Pe2*+>2sT+?J@SOt'!aC5ge?KmgL_Yhkd\q!B;/jQ4:u^E(5q%\@;U<'1/<(6+(;<(!gQbqiJtI_hu!0I>dEjb%N:H/E5N`"GHi+[To).DF[^5n\GGC?aUP#lmcd&*DT>$dXcZ@9t'0S:D44A8ga\s33B?kXAFm<M`%Hl%1gi2h+`t"IthpLqB_IHfo%SadQ6`$pc'o_LS/M4Qcm[0nA-H8V3QmEsOro,_s/GN**ek0A?jJ@SVYds(g*Eq!.!(lh@@LH:9_d=DM[d3c7W3m[pjg.ja-_QtT9%Y]earejIrXG\DTY#X$g9PL1A_hre^H*B:EqOb&8F^hu=?>(T9CN/TRsO*5S"ck[VTc,iLdn7XaZ"0LO-VFK9l6bAJ@1^K0=#omXk%*pnDbTLh,M)q.?IE+A`E^:+(.(I.ll-SrgBXc*;)J)c$-rKmH&J&qZZJ)2_4nEn!hpZ:e71]$EeKUX,/V^IQ^9,6JFZL.m@LN+)]%<",`;G\GS*L*Hq&Ck8H@H&Qhj008piM[+TYJB<f]:<6#./OI`-9JokUUB2Qic%C`JYKm?VV;YKXiFOl)63(Y%K=Omh7@bTcl\[B#%G'?rZ(t+X-j93A=HEL_mcN4m1%"T<9Gk4r+1GFl3pHW1'17K,$-t3h(_9P?;5SisKN%_!Z,PZ<p463F$U&f7X0K+KHNb#9=3070+%pG$JfXH4p;bMDsU?otsHR:rI7";8S!L:Lg:IfVgd.IsS69V+#XqXR_W?(qrCC4ZM[Q:R(,2CFBe6:1eNGJlLnE0)3?VTnO?o8nGK%CmTn$#XU6+.7!qE;3tM33m+'T=JR^E=R:!uLEJp4pjf'u+@Hf=SEh?M-NN_Q@$IaE?3'DTX:P)=/?=B;6Lu6VEn$RNoao<6!`Y]W%a+_'U/K\UHC)nE,LeG;$8\UHlUI2s+lXjcXno0\^>5q?t>K&K)=UYagA3]`A1";FV'p+*mnq7q0L)JD,Ul'ePF#q3H0#m(.,^s:`%!ankDD@mM9@agOoT8$A0ePHXIaKJX>[0#:3Khub#QJg2Pcrn"fWqaOdkLqMbk$/CE9\1_cX_c"hQ"IUa&4]k;m9'QB93,+BDCR::%:@I-7-"rR1#95s8OlHD$lkZ55GejLUnKAS];ru`h&X\i9FWdF.ap9JLq=-Y_G0=GRqKht2=/_+B3rGC,#`:/#Eeq-Z@gBQBTZ_6u%UihC-8[+gKLgROmeA\_m"_iV#p"Wj/U!n3q.S*bY6m.[XH3DdT-I`,ngDFZ7_:N^^+k/RNgoK"50TCYEdWN&dmDZS^>[N*JM\@r,%ob^#4],aak&;O*<DlqsuWZ1A^$<S34D=k:l[c&G?&?:'rI6lRX:Fj$E+_D=tq-Z6BO-WK\3=k3b!/QKk&o8Y#*5O@qDj52',nCgS%Mj6.qDU>?ZIH5O%go3T;,=rii!6JD2fUuV'o>%Ap57J7#_]&t<T=Y"X8;jZ8.%$F)b2+lE,O@nmE.VF<k8`Kuo:^UWLM*q^P(WR(%.Okg^#ms4aVkmn4]E-7"C;:E1q+`9'Xb:pl!a.KC7A4CF8/7D][St<_1J[Ls<X$OS--T0HgLVa8cGQf&d)'tG8"Z*u86MHYK/54h%NiF%Y+'cJq3Z"jO*#r!6WImn*`s*Ze3.eu^3cpNs2bFf_Pq$#J8Kit4D9!;@>8^$?he@?LS>qS-l"<g"#9dVKT+!WB+D*;5a9>\r%U&`Eh]NFEu5jo.s48sM0^DhGkCRrDE9"L-@Yi>q-_l"1hFBYVW@$9r/^Q3HFY8V[N>h/a<kZhP!:Je'AA;e#AFFLC)[NH"egi<c[%'h%C42!\ZXjCW^:eoMa+pU5iPq!.CGJ_l'[$f]gCEEA#@AC[\u$d4mqZbk=U'IH)1:@#M4VIiE5XRfuDO8#&hmhdWB=;-;)'amQ]%FqE\#;8l7G7/1^U!N=5-InBt>[Z^fOFlpbSc*H/If*7=qa9kJg+(^m_>:p38-"Q3CrtNWBSJ!kT$puJFAN)c@)\1"L$"\6A+U]=+%\XUAp+f/$*.3,6b_>Ltr4;.;KRl"B)pTjMD\O`gjQt;&K&mXG#]sM"'6[TEMm&^WG\bO9%CJ3Jo$;+^Y!@R?AHOmt2YTOdeW0W#Q%fJ"n4b"M>LKJWj-'_Z1O5[c^q9'pM!i:(,[QhFCMf:jbAVLt_^m8EC/<=l"W<\,$Za"+m'W*GKtMVJ>t@',Sh]=nA$AkCSa>4]1F%O<^=8hJIVil3SlL\=E827#KnVZ\Y>[]!-(H]O3<M>*PH%'Qi4?i,_lTY7#o-GnsM4\nT&T1h3:ZRDI:83kZG9n"Le.F:*&*N^F/c%$4()A)2:d5^ERhtK]1W)<#Qd?`5\LQ?l5V::hp0l$7*U/Qc;aRU2QE8+I<_b<`8%O\pDd[ND?%WJ4Id<A]GBabr_;U931TYR9GT\%a+/;(W&Lf3"Br(BL1(IP"L:1EoG%;,I\Ve\ZKb@uNk@933drMBb:VjbFe3JDr_u^G"\$$B7>707K<eFOAf,#XJO9I>Km!,Z)")[3%`&9#[7GdnR']iWa=q7c[Ibi#jV!Z<tS_0po%<I0TXZH@sCP+nefs75[XQcZ6H+U9L"fuI<Y3cLqH7E\jZ.e7EF&R&tYF>ouAh;Tr%k!J24I5:o5cZ^/Kg(\esjoV-=UW:^sn\X(1-qa3Yg/'VL;Ucq6@4cX?IW$Xp^tM;SPK,h&P?=KD]1WAtat3VU(KRTX)M;&fAXXh_%+YS1*qbA0/-[?,J$`auo>t$*.,TAfs+$XrmbcnumaOm?6dG4G5I5Qup2+D!Q+Z1&n^.iaP7(s31DUkG6C`f+#i5DAJ_\P:H]@^,-%A`_<Gbo8F>@?M2_m8s+lP&?PG/09i;Hug(E4R6r`Y&DSi\^Fr*pL5$aJLnd15r/hIRI@^?'e<gh6SCDTA0Q6<jmA/N(?JEFN_"23%E5(X:6"pSK'U^j[D>'htA6#O5B7k#_$)u?81Q*tCJSQZI+N57eB]XZCf#W(bS"lAr)cH'c%4VS(KX@o$*1XB,VF<f<hB[r*nR@BN%8M\]4&Y)Q.[G7*#G"0S9-!>RTSQ-<(-aGF,ZQrF&E:Q'%,URnErBhr'/OD6e@[4>#RUm+iH1'64RO5;rX>O@%P<`rqMfFo,i%W."%XHWGT,=^/PBV%om,WBA-9Iq:?R3tl"r@l2op;t66HN)8YT^q3*_%.<uifq!OG"'#E'.*@8fcuE3'%W+_-"iuHRiO3%7L=i2R;\XY%&t/\r:PtDM>B!g6pk"p>!R4BmY[XOV70(oE=t11!^%?:\;^I<oQ+\\PAO<i-);A`("BE+9i6>F33h5#"))>8?<4\_VWV/puEBftj%V7jbh@J:JAc;(^0ct8]Mf;!b&VQ#/<,BA0D[H,'S0(iIVe4oF[32%$<hq/r4'm#NV>fitSSiEel\_qG,C=Y3'Na/f!+Wkrf[3N/g%*F\?V4^"+p*Fhi0ho=sb1s;Fq]h20W2f?-kYO`T@merftPo4.`\N\j+lhZ:G'&^e#IB$Cr57:;A?8ZCuHTs%YYaFATF+(X5\+L&-%I'TP4I%M>>hG9ceZ$cXgenp^>3o_&mqZGAsFMJ<XB&RVZ7p$`'[]8Wc&9F0+gM#D:5grJT2\?5a@nmAJnJF$rG=mR(r,.mO/unR0%!,DHu92\6(Cb+%9RgH`9DLBc?E5TT$$gOM]RDKjU3e[`6O=@DY9m:)eW,C)?fVP+XJuUWk$u=<o2J@Z^lLY`("d7-.Be14\I'!;r%3-%Ab=A\f`L>A`3CeQ]^CXZB^%d:Ek^4O*%CEPQaAIHK-D[Hl&/A%JQe0.7hEKDV#r#IIi</$$E]?\]W$LE?c>W%h,a2m\]W#-Ju%2bml!"<>%AWN!.=b^jnc<6h9j6rd[SI.(M<:EAFaCTc/-!E,okV;bZu=Jt4RNJl>RW8:MO!s?i;3u*Xq&po*XCkcTVR`;Z'Jo$`'%W[pD/)lYmA7Z7$+I&\$VW-O:Z_BG,)]'1c5Q`G5aT#0l+%8CQqG!\f_donXb9:@JIRs!8O<OE!G7B;GI>?H=>ZCO7gL&3QY<7M`h%<40\RVR?IrgYT:Q!*LHP?>Eug/(S,Z=pkn,)D52$7Mhh6&Z2sD%^tqR;JXqmTi0E2J<6P[Be>kH`S6Nb0#u\1QAmFPVq5(Uk3KR]%9kU/E!4>mL[GF<4pU,_g:Z7hG"`o8neSDmP[Bh3G,(Uu_*B)8Lch&NbSMmV;#]$=IouH/%R.n9XO4T5%"K-k"c-Jhtgpj]I,OKW,%\TckYcbBjBkL^l#'m%+t,Q#(Gmm=[)=K_))X-eD)@d1cBjN][7>e/-$>DbG9STbh?,CCPd)^11;ldCiu@a8\K5frse^OXj?KPCd9%nddG;\mI'?,;d@(/okf!=EEEL.,/OT%<HT1)m=>Kf-1LGY?s"CD?OXC]r`Y)Q=dDjfiG^nrje]>E/:nc"iOuC]dF6WV(9urGJfr7%s#(?G7^*MrWOr*3ctUF6lhbdij/laG2J.mt%,XotJWSj^OtiIRm!qLDm?GS;?OYVs,&8bL':a7ib.GG=F[45nZhl+WPBB"=Vl]>S%4!P."qK7As[bn86]O(KnLYLJ;]T<Hgl6L2`h!a7dTegM<\TckYcbJeMII>um0HV\VjJ;.Hh0dKO$Re82#63]!#JuREkJ@`a)0'-U%i?R-'8Z"#bM9ksF/k,Bk"(QJ@il,P(1lFC02h$OLYL?qBaN"f3MbFq/jR`>-SZ&]=oMXsWn`=73j9@'YHq](a=nCd2_Gs^oq*6Rs%@cl#"2!p$b6Q_ZsabrY2*?a<[Fm/ugTOBpS5,,h-bO%L=Qn7"/@o7qcRTH,<#7@Am>9<hoi2^@[8J>=5]Ts.q6`RZiJLlS9LVA2>%s'j<AF'm3pMg[:9^1fFdh@Ihp2%tZ=pSiFraNY_&<-t%3?G-$^9Mo]M\bN--9'*6?reC60j7rd*DLV<fe^#=>LGKogc@_,(a"*Yh%_`X*N]t!n>jI;G4pu^n_JhXmP3r=JiFL$5i\LFlhWkTX6]51'nR1=]hg&f7Rmh#423/g%NI[ejXMUS1ZS<8-:ld*hFls/BAmHhe/%/$D-k:M4]hr3r)pT)\[up9&ll<#hcUS+#6CErI;mJ_ZjIq]AA8@%5$Gs2]Cl?.A0<7j<%Y^%WU_*[E.ThLB')W&de&l=soi8U;Y@%S>V<ek5>h[,3WO!pE.0O.b<n`B+bmXTm?ZhW=!V7rZch]7?i](h]^PIn$'L4$g)1PhL?Y[c`GuQp51c)ir*L^Po6Oar+ET&Y>EL>%O#^#qMt<QPDK]qGi+t/$VqD@Xc)f[]T8Md0.aEOH']W;bo,kM$FF@3Q581]T_kKS.cVG)YX'#erX%9;$[As,]m2km!htL4Z!8oab%G"rDFE*,\g8gV3\6i^Tp.kg`N!eA0NHisGHK"4\MT#M)cQX4TOQr[fu[AT%]6nVUF!4Q;i2b0u"."!tu"Tnb/c5)[A=;MlR!rs<Q%!<CopdDF+MWZA-2@pK'70]q<C!!)X_ASOj<!;jJ'!<@\BOLONSB0E*/]Djl=$7rCS!cB2[N4,X'<a>JIoc#bc\K+lS!*2^S-RAi0%XenMegt03"!!pVR1$_RjWgM7eN`5af*^bJ5\b@"e`Vaf@9Q.CWQoht,6::%B"/`0-f>&p!%_17QSG%.mT_8_;JR"6gU\a1.*)X=I%"\KG:XF1MRR;!QU6Wg^&PKLe:>hKb7r*c#N1dXe4-K-84ZsEOT,g]?r;($aa$ijqUAcfu-3U_,A(h#TjH*bGt&I.q!@LY`>2YQ*l%(o:-g4;KL%$53Bm@u%V&Gb/i?[gb7r:S5'2%<KEiNJDS6eVik@dPQ:jA*p#&YM]aMa&'J3\s=SB??=L-%WDEUBt05Sbl]^g66AqW%0K3U^`E`B'FUsB]Im0aC@fEp_aG*0OgCbXq^%QoE+I-"hC5Zr4QlG(&*,^_O.,b"?/*>E@'Yf'$]#._/@CjsBBS<e%YX4r#6i;nR%^>JeMqG*&I+%2Xrc8+V^l_E"Io['QgAN-$e$*MJ!A%Tfqq5G=p!7Y+S"[$CeW4q<$c4so>-_"/DB]D?A0"abiJ-E9..i9>_=s4cl%1DLe]gNBOQPffiC7EiO-<O^Vgr?@ZZ*j+iJ"U]M(J]-+4cG;O`35q+[I]A^Na.TKHWk9R\A)05Gh(UeFq1.3eDfff_q`o-X04>l2%DK9[aorJgb&rD%/.ctmn'+:u/$Wu_-54D<&ZOO1jQL%@B?VSLEhf&JbI6SH8kH5j9e("OLUC-lM=-"Ae:3B@9=-"mM8_[Nh*r?*C%os2"f`I>e#*7^P!cLRY-k-6-a3gdHQ"Y!9NF>q+)h)oir$9d.g,GL2M[CUDM!-3niX55tuZ5W+9\TpSD6se]o_]e^8iNU#'e((k]%4SV*tVfqY3[d$,_Rg1tq%X7N[kX%!cg<F-j6+aau#NogSSF;THadBV^o>$k<1q^2ni,gF4SKu@q5od&qk(*\qgCi8c",gL^bo3YG%<H@ct`FD+??UVGL\@lAgO8BD;(QY+EM3mEZ*Y,N7#EU0"GO[ru/IoL$4?1JkhB-&d0GCNG=K`E#W\\!7(0R,fAMDq-8"k16HO#mm%0bX0=JL-Q+;(`nT8GuXD*Y,.c%u8iW",KRgQ\u([$biSV%s1+cZs5_DCaNIghM,PBBCtp.N:)KJ\-aMF=0uGHj\!?P[.P4Gm\+[l%g/FL*UugTe2,N:-]6J:kNdYg^&%A!Nn[PcJJ+8=#+[;=]KT40sWZ!K0'p"I_e;;8&P3BscK]/e>'5-:&^gtG5iM_lih1of;$qCI6%98]-kUB6XgTu<_G[7HhI<<cp[#8W@=O_FS*JJ"#Z]_$ArZm9KsMat`r18Qh<NLu,)(-=?YN_S)'Maq>k&'Hq!5Uq;+=@bXY;M"2R%,%(GN^t,<:pc3<!GVLW:W'E`ag>Ysap#L2g$%o^PF=E6kM<4EZX`DD9UbJ;7*(''f[pO2p6=g:rK%)cC88?.R/l<_t0HFgQO<gQt%%=&L:O9@dJ1D_U(,f4oFZ4/+A,R/<J<rj:<H^8m:-DogHRSU@T<=4VJ8<SdbRGI;6(.f.J=@/u=OsFplZYV@^":4D8/s[c#L&]2&%8H=j<^;c<qUr8EUaC7a94,;KrkpjU*!r4cZ/."#:"^<MaqOM;L/[6Q<?"3_2M^?1ZUu[,70hk+k@o4G?9[X<V=;"B>;YeL7\Bf!R%LghnA(6;.m/sZVj*3RJj[c"'?XANO('WR"C\9kf+C+K[?atDm8Q3<TC`?gfQ>r[%dG3/Z.L^`;qQ3:K[pT;As6sSEXd>&s,EV0q_%o:jJ$p=-'^&N,dUPA)!u23]Al5!fs\mCHF8`#;7"V35M/Td7G5[[J13S"9tM0+'"F5Rf#Z==JHF+-IsbYp=^f@QS<U#s)(10Om\)%R)d`d8ME8tG:f++Z=:YD,G1PH+>q24!f]XGp\<mX!7#k/8cY4>1>RMd,Zm2!#dn%Q/GdM(2^Oh:ekCu79QHIa+&4^;_`+](pNDpG%mmr1=o3>,dNXuH/l4%3kV51V"%g2Q!;Q-p9eIa!rp?&6!8%_r!nG3j_]?H(!h)k$Ni1]Dl&N$dN]Et2:oTI0OQ?7'5YiY4nDu@er%X56Z#p,+k\]-0oADHKcLnO(Dbj.pug%?YA5WSW#D$;L35=KZ%j%b/0:.nGp>4R(^b?CKACn&TfIS"j!BA>Z]Vpkt)Ag:^18-&/Rh%U3^mS/j$(,oo>\H51a6S7mSt$".lLWhUhsdG%fF>JQXD1l/$=HR-oC[@7BqQ-DK+ml.un+h&BW-`MQ&Z4)ue]YBj]CZEY1qRkq>G%I(i]t?ML]6&R=(9pnnU9b#S1r[I.)G]s3;9HnMuhep0nXN^;LU+]\8[R-EJ_`U_fQmN'E!GA^a]"r7o-Bt?5aA_&>0^=dMf#?U"+%]-nB^*4>6+o:ZZpjKtF@ftk,E<UR8@$?]#ni6Zea(7Sse^:@:\=oI/sRdtl6oI&`>0(@@\=Z+Ff@*#T6H]q[ORNWt$P9K@&N&_(0%p0Q("Z($<_$-@piOA&M_UmdB=ak.N&PXINH"ksb@M%g0*(979o=F[:`P40KhX*Y+PDPE>Wi#W;2l=;.k4#*g27NSOn!@oo<ARfkB%CbkQ@A7fUD&mUTiSLPm(dY)/KMNGb0dBHN&,i6"u^T7^__l@-%+aM!M>`4\+X>[I&Op<E&Nlt!cP^tu]f6e+8#C7hE0O)A%=G3Lr%=Aqbf'!pSN,`"+?]j0D;,iKeCHCtSd'[,UL$-?/fY,[S"H`%.kgCC8N&t=]aI83<kX9_DYcNK0=P)r?piil!GN0;C)<D$^I67;de%?`3X`CA49XT5%/UQ;JbRH!$SnPEL2'<V`ahahu8<2C[=@-7'U3Ua5a/(,$pD.ok_c,iUh.9;I`4b^D8?X<Jq;n$HAkOG'gOnP__E%U>iFRm,Ahl/k796O]GH@0_?(C5hFiR7WT0O*M&/-;FPZb8k?DP/4/p9kYFP94A%=-:>a?0%jbAcZ^cXQCd%HNRZGg(\W_s4iO'P)%.uPlB\m/8;NnYY5H\?AkRV.i(.9(4SWPoLqK.B?C0b,t;ITR`>@-F9\r6F;$DGN^?7.L/L&`X:co8!lmXS\K*C.@K=M^K-bJJ]K^%.]5s&oCh!9S]iQj(=,E\T.,CH9H^DUa6sO?6AIt_kL@_K6[hH%O9N-aB_HgVE;>7RjKb!j`oTXu)3msH"E%Z+9VEg<pWi/&]Adsa%5f[F=e$R]!)."bs`en,=(JgDVO)d#>WQT0A-+t.2Var0\0-`Rf<E0T$@qTOIC#bZ*`=H;_5M'[,UCP!Hbkq_?9"t&@9?Xh!+K)bZ%=G[huCgAujKV[*cZaJ.$<OWGl(*(;7H+csr@9H3A"/o&D:%I]B$bCr_S4'(A';Jkdk_1k.Uc.?DS;(i_`Njbe-4:h^\/cgnqHBEB%Z$f"-1Hu7o@='IB6O/))jJK75[X;F)aY25oi_UG^pd"-#Ru'nq#=fXOD@%C/W\tI/QN[bb`#S:i"J*h9Z9qV*q:pjqq330?aPQ$>%3<\)/QCN]sqF(*OS.d0p+G(3/Zc*?Q]O?3s(<_M[Oa1L.`pmXL!J]DMNL>Dh/R$,&5[JPKF)EMS#V5sX!?"T=U6W&eP5<\YDCb5U%!K_?;9;i=P#ct@Oh!lG5XX..m[:>P0Lso82E&)1+)CF/6j'CG$iirYNM`qBK@E#1%]oIWcU[tBPR*54fZlX'a+pj!pCGR@R8<r,T%cZ7)^]V0?U&@6'rSTGqa?l.'^fE4*eZE4&JE_^m)bMoZ!e4s]eBGFNiXR"AEe*F9@phoC?)qOZHqZQlt+B]ejT4[T4J"!VK#1QH+%9lZigAhu!:\_.B%C2W`+'.Os7c@q^Vc*3o(Ai"h5\_.B9.bFN.:/l,-B3%u`YOeKoj0(86Eo4OTNLH?]YbQ6N^!)P[<j+<TZJ"O`%WSBJ:Z_Z_q'0N8lg0\JbIAXIp0W$n8a]VHfhcNf?=Mlb3o,Dac_ch."$74K[;a"4bbZsHG<p_@&c81BY"5@ND)#'TsHbcTF5X,VY%<`P6fhfr-AfKFN?<c+5mhLJsums\_JD3uF7J7\CCFadh)D4"\RG\::STGtk#Fk),Yq42f]JUS_cp=8>G$s6UPkdrTX@eHD[b(,K%%JUR\3(g0#cG4:$IeUq`I&"$K?k\"PDcMBXdGF$g7q0<f2[:XB4X#2i*@;F-4B)#OoI5f'rb!*P`fuaVHS[C=6S)J5/,J,b@ZK'9d%XaIr@HRh2T.XruC_<VN4\_69gY.;pgMed3RkAbX;s$#jUY517gj7L)b1VGc0B22N'b0-lh>a1S#?+I\Q1V9sGX5'lEiJ['*DUrQg%f3froEbOEr&%Gq/p]B2#D@(B3Y@or:pkgTA'^$tbcEY*XjW*`i3]k7WM@#a3IRVF?p/eVkiIBtWH(=ueMh)HNCkoaA"H/"U>d2qJ%'5Xmd36)9)/Mb3LX*;j._J4/:Yeo,VHC5RM>AJg.FtCK7*3g"Gg=(j*[R6U+3T>qhBVU=$0AQ>34]pBG]CnVAT9TN8f]NPXn],s_%)s2Z<[R:!I#<]:5ot'gP9=@3YG!4iKm80]fO#U]6g.g+J=8"OR"+FAi;=4k!GkTE;$hV_"CVTAW1CJ;bBbi9J\7X.Tc8H(&c8Q.'%`]+@qc8hqtI:f$M+.mgk9@$=2rMu?!2-2ThZWN>Oqs8!m#J4E[6OWP36jn*kM`/&6A>;T:.6^olS7A?`b6^pIXPFjHXh$R09<61&%@AZK:.;i>VQ3h_<214Pae])j)Tbd%X3,6i]L8>[QVKcj`\e@cF[Y#s;C=.'^X]@MuL9FW>C5/uoHXMT7p+FGSgpJ3jjSj\E[R:"%%5N&d=BQr)>G\fIk+8,dhgCEn3rIE5FURfaRE8'12C;=]Pd;Dthr3d[6H8OQiok;t'!RL/8T*)f3O89oW3,^tFHSj`qok;t'!Vc!+%HSOHook;sP!=s('H>gcQ$eM/&QOW_/4m5$E"&@V]olDnH`V!p-b8>3YhIc&uOmBf37d`CL)'(EmHF/1q`g5pUho?==Y'TT]RHr7<%m!%=AgX$3'\SqQ)(j#pVE9Q:%F"Fn93Q7bOL,2N7R.D1J?+$/1dm_G?5$a+eMGY0!k;[V3Ef*jug[(>0=6L(!Y(eXJXfF$2_leo`%F8WW'N=u`4[Z+YWfMu9k=EZPd1H`9_3Q&5)>qj1(HhZ+K3HmX?$/>RMDMS(PD8<jNdI(ZenF(P!5MHA^]H-:`[K-oB7sj_'SW!5#%<s)3(O*7ibi8sWFp[/&@n,;'dNa@ciD]/':!kgD_HF/1q`n'IkmUR=lp8SADS@p!27t9^h]o@KVhs8ZBJ7QISgS&LLNd,q7g4bXt%\9pBfmDfg2Dhn0sOo_Ja8%Z;MnG;!n9EtF/*pmQN_"!oA!R%Z:qe,@k^E3(H*3oIB&'oX<*pl9h#+WH;nIN-Zna8L90@2f\YC>Gu%!EeOo#;B?,YlLQ\SHg"qSI$.sSI9[!)hT"IYQB0YHcppWfV@97#OK8#GMcPT4kb[Gh3ikGc>a#_jW%JY>#+SkUYunsYkgDs)6E(j%@1>]L3Sn/N]Pbs0)T":SYhnrh*ir+4n-<`ebV0<tjU?nug<Hl.A!>eqKK\%=8p;mrmp@+j$>W>]SAL_i$!(IdeI8XcQ@=Qk==mnC%(=itAR9eIkUPh5P0as-A[Nhs6%Xj%J(_,['L=(%%EB(FtiuCP+3S%WGSDtVjB.'(%0gBa7_e;'N5)be+r532-a$ADdL]J$+LVC\p%N0\Ni`7gZ`ZOp]LkP0k@94f#tp!+FM@Vr@$=c%!B:%/d2Hd+5XImK5,3/TlQBj_%7@YBNoR>O/]5C7#np1U?X$lFoQLM+nAO*6<C%J@G<NQeqOr*SC%*^gRZDc=/>HK#\];VjNDT\:<Zs#'so<p1U'.E+_$$B]CpM2kO642<ng\A"\$X@ukd`G%Wa_?Eb$bYt)EW%[`8<%e/8?XCr[Ui`de*MYm6gK@)RBHU!=?+?p8b,T;E4tnSOj%/BAn"An8]1SC%?RZ:Fe)msN1tmC(Mp'3Ta.AjuE,2uWh6nnn<`cB.D?%DNtGXaW9Ze1girD;#^n*[UbGBA%M>W0W"klE^oNQaT-8GaT-8WaT1c<b!>D8b36W`@o3GVk><:C[_KtDpltI.B1?GObnI"\cj<`a%1n<T+*d.<P=+h1+Z:DNL)=T2(ZkE]IY%<Z;9/,:.^?qm#n$5HqSNGb9mSMg<!WR1qqHk(Y0RL/Gdt!5L5,LC`F,.KHaGc(h.8FJ3%S7?,"b:-c[:Z'DP1TTUG2`"W4YqomSF8X6q3QKL*Q89N*g-%5Cc(2opE&Dk'95Mjd3Q9UONB+i-XF3+HfrUJqXNbE=`S7Ik:,"W]%m[E'OelpA'2il:H&W\`p)j@TLIHGPSH=q<-+*cdd(-9@sN0Z8icFMb]eJ[SAf,<e3fiaA"F$&]#T@oe."4-njf(IW4T%.e3j&o%G%bjml"l2.G<id:B42dLXQB*WTu*q2ANhE9_G#'sp4(-984NJ;L*ckt@S%l@J80gVSr$l?;)c*0L/jW#@!>#$e=@nGfBU![n<'j=i/%R29&j$o>8F0Yn4#9f9fuNL"Y`d+XKn%+/fL_\'#rcEK]PJnB8%YpNCCdFnd\>g[b@G3=hPckffZF1Y$#BXF:>N^h2@mc`GFN]e9i%kP1h&f,4d,[%--;7`.5%BsaDiOiHgWA!6Q[K+X_tLVCVRNNp]I8o%p3YY(\L*3Z_maUGM_hDrJ*Xo1,p/o;PDJmV\#Ck?*l$Q"Hs%f<e%0m;Kd!m87ds)KAN!Zr8(P][M(RTKE0qLVCVjNJ:@Oe@FNX$T/htnPH">*"t25c>c^VjW#3s>0cY8UZE17[FTAMP8Xnn=K+B5%45d"(d$NCad;k8>>!$eWTisO!L8.r,A:gX]YFORNf)D+GWn-m4iMtK.RUN8rK##(k<d.q_Y0Q6]]=L?[HSs/1rbB)mMSU2?k;]Qj%Ef.gS%B"HPeSp,^>$[]XZ:<"t2J][ij0Q`XQt*MSrgD]O7`.<g[Eo4dCQ77pAo#ZE%(EXQnI3%;<d9AV)D,</\COuViODq3)4#((%l,u3@BK*tRXd,F7]%5H#@Ct*.IH%j[#jT$"3b#hsBVU:$47;Ie5k"X&qLp:$Ck4A^fP!:_JrOqt*c.Kn->]?!/o6SpI=K1jmABSY%O7hmQ^\I'&5EQ6KrKiR@^\IQn]79V?TARE`b7DAbq9L.T55gi:J+LR-rS@5Jqo9e-p\<#%^]2anDr:Tedr59Ur?$L`^\Qd"rT8;g%r;I5ArS8!&^].ZUrA0PjUceY@dm*cnJ+r^S'n-rA~>%AI9_PrivateDataEnd